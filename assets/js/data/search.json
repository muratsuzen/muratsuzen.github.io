[ { "title": "Building an ESP32 GPS Tracker with SIM800, WiFi, and AT Command Integration", "url": "/posts/esp32-gps-tracker-with-sim800-wifi-and-at-commands/", "categories": "ESP32, IoT, GPS, SIM800", "tags": "esp32, gps tracker, sim800, wifi, at commands, telemetry", "date": "2025-05-10 05:00:00 +0300", "snippet": "In this article, we explore a robust ESP32-based GPS tracking system that integrates:‚úÖ SIM800 module (GPRS) for cellular internet‚úÖ WiFi for wireless local connectivity‚úÖ TinyGPS++ library to handle ...", "content": "In this article, we explore a robust ESP32-based GPS tracking system that integrates:‚úÖ SIM800 module (GPRS) for cellular internet‚úÖ WiFi for wireless local connectivity‚úÖ TinyGPS++ library to handle GPS data‚úÖ LittleFS for onboard file storage‚úÖ AT command interpreter to control behavior over serial or a remote serviceSystem OverviewThe ESP32 runs firmware that does the following: Continuously reads GPS data (latitude, longitude, speed, time). Stores data points in a local log (/gpslog.txt). Every 10 seconds, sends the collected data to a remote telemetry service over the internet, using either SIM800 (GPRS) or WiFi. Listens for remote AT commands (via HTTP GET) or local serial AT commands to dynamically change settings.Internet Connection Modes‚úÖ SIM800 Mode: Initializes GPRS (AT+SAPBR) and sends HTTP requests with AT commands. Retrieves and runs remote commands via /api/TelemetryData/NextCommand/{DEVICE_ID}. Sends collected GPS telemetry via HTTP POST.‚úÖ WiFi Mode: Connects to a local WiFi network using configured SSID and password. Uses WiFiClient to connect to the service IP and port. Dynamically switches between WiFi or SIM800 via AT commands.GPS Logging Uses TinyGPS++ to read NMEA data from the GPS module. Captures: latitude, longitude, speed, and UTC timestamp. Logs each data point to LittleFS (/gpslog.txt). On every post interval (default 10s), reads the log file, builds a JSON array, and transmits it to the telemetry API.Dynamic Configuration with AT CommandsThe system accepts AT commands over: Serial input (e.g., AT+SETID=NEWID). Remote service (via HTTP GET).Supported commands: AT+SETID, AT+GETID: manage device ID. AT+SETADDR, AT+GETADDR: set or get the telemetry service IP and port. AT+SETMODE=WIFI or AT+SETMODE=SIM800: switch internet modes. AT+SETWIFI=SSID,PASSWORD: configure WiFi credentials. AT+STARTGPS, AT+STOPGPS: enable or disable GPS logging. AT+RESTART: restart the ESP32 device. AT+TESTPOST: perform a test POST to verify connectivity.Service Endpoint ExampleBy default, the firmware targets:http://serviceaddr:port/api/TelemetryDataYou can change this at runtime by sending:AT+SETADDR=192.168.1.100:8080or programmatically adjusting:SERVICE_IP = \"192.168.1.100\";SERVICE_PORT = \"8080\";saveServiceAddress();This flexibility allows you to redirect the device to development, test, or production servers without reflashing.Key Takeaways Dual internet mode (SIM800 + WiFi) increases resilience. Modular AT command system simplifies live reconfiguration. File system (LittleFS) ensures reliable buffering when the network is unavailable. TinyGPS++ integration makes GPS handling precise and efficient.How to Use Update the service address, SSID, or APN in your environment. Connect your GPS module (e.g., NEO-6M) to the defined pins. Deploy the firmware and start capturing real-world telemetry." }, { "title": "ESP32 GPS Tracker with SIM800 and WiFi Today‚Äôs Deep Dive", "url": "/posts/esp32-gps-sim800-wifi-integration/", "categories": "ESP32, IoT, GPS, SIM800, WiFi", "tags": "esp32, sim800, wifi, gps, telemetry, at commands, iot project", "date": "2025-05-10 05:00:00 +0300", "snippet": "Today, we take a detailed look at a powerful ESP32-based GPS tracker that uses both SIM800 (GPRS) and WiFi to send data, ensuring high resilience and flexibility. This article explores today‚Äôs depl...", "content": "Today, we take a detailed look at a powerful ESP32-based GPS tracker that uses both SIM800 (GPRS) and WiFi to send data, ensuring high resilience and flexibility. This article explores today‚Äôs deployment lessons, technical deep dive, and key implementation tips.üõ† System Highlights‚úÖ ESP32 MCU with dual connectivity (WiFi + SIM800)‚úÖ NEO-6M GPS module to capture real-time positions‚úÖ LittleFS file system for local storage‚úÖ TinyGPS++ library for parsing NMEA data‚úÖ AT command system to control settings liveThis setup logs GPS coordinates, stores them, and sends them over HTTP to a server ‚Äî either via mobile network or local WiFi.üåê Dual Connectivity: Why Use Both?Many IoT systems face environments where WiFi is unavailable or unreliable. By adding SIM800, your tracker can: Fallback to mobile networks when WiFi fails. Cover remote regions without WiFi infrastructure. Switch between modes using AT+SETMODE=WIFI or AT+SETMODE=SIM800 without rebooting.This makes the system field-deployable and self-recovering.üìç GPS Data FlowStep 1: Collect Datawhile (gpsSerial.available()) { gps.encode(gpsSerial.read());}if (gps.location.isUpdated()) { float lat = gps.location.lat(); float lng = gps.location.lng(); float speed = gps.speed.kmph(); String timestamp = getFormattedTime(); String record = String(lat, 6) + \",\" + String(lng, 6) + \",\" + String(speed, 2) + \",\" + timestamp; appendToFile(\"/gpslog.txt\", record);}‚úÖ Logs are saved every update, ensuring no data is lost if the network is temporarily down.üì° Sending Data via SIM800Preparing SIM8001Ô∏è‚É£ Activate bearer (APN):sendATCommand(\"AT+SAPBR=1,1\", 2000);2Ô∏è‚É£ Setup HTTP:sendATCommand(\"AT+HTTPINIT\", 1000);sendATCommand(\"AT+HTTPPARA=\\\"URL\\\",\\\"http://server/api\\\"\", 1000);3Ô∏è‚É£ Push data:sendATCommand(\"AT+HTTPDATA=length,timeout\", 1000);sim800Serial.print(jsonPayload);sendATCommand(\"AT+HTTPACTION=1\", 10000);4Ô∏è‚É£ Cleanup:sendATCommand(\"AT+HTTPTERM\", 1000);‚úÖ Debug tip: Use AT+CSQ to check signal; aim for strength &gt;10.üì∂ Sending Data via WiFiif (client.connect(SERVICE_IP.c_str(), SERVICE_PORT.toInt())) { client.println(\"POST /api HTTP/1.1\"); client.println(\"Host: \" + SERVICE_IP); client.println(\"Content-Type: application/json\"); client.print(\"Content-Length: \"); client.println(json.length()); client.println(); client.println(json);}‚úÖ Resilience tip: Use connection retries and check WiFi.status() regularly.üîß Dynamic AT Command ControlWith the built-in AT command system, you can change settings live: Command Action AT+SETID=&lt;ID&gt; Update device ID AT+SETADDR=&lt;IP:PORT&gt; Change server address AT+SETMODE=WIFI Switch to WiFi mode AT+SETMODE=SIM800 Switch to SIM800 mode AT+STARTGPS Enable GPS logging AT+STOPGPS Disable GPS logging ‚úÖ Field tip: You can also pull commands from the server dynamically via /api/TelemetryData/NextCommand/{DEVICE_ID}.üåç Real-World Use Cases Vehicle tracking in mixed rural/urban zones Wildlife monitoring where WiFi is rare Delivery fleet systems that need dual redundancy Remote sensors pushing environmental data‚úÖ SummaryToday‚Äôs build showcases a flexible, powerful ESP32 GPS tracker that seamlessly switches between WiFi and SIM800 connections, ensuring robust field operation. With smart AT command integration and careful data handling, you can confidently deploy this system in real-world scenarios." }, { "title": "Detailed Guide ESP32 GPS Data Collection and Transmission via SIM800", "url": "/posts/detailed-esp32-gps-sim800-tracker/", "categories": "ESP32, IoT, GPS, SIM800, Data Transmission", "tags": "esp32, sim800, gps, telemetry, iot, gprs, data transmission", "date": "2025-05-10 05:00:00 +0300", "snippet": "This guide dives deeply into how an ESP32-based system collects GPS data using TinyGPS++, stores it locally, and transmits it over a cellular GPRS connection using a SIM800 module. We‚Äôll cover each...", "content": "This guide dives deeply into how an ESP32-based system collects GPS data using TinyGPS++, stores it locally, and transmits it over a cellular GPRS connection using a SIM800 module. We‚Äôll cover each step with explanations, practical details, and insights.System Architecture Overview‚úÖ Hardware components: ESP32 microcontroller SIM800L (or SIM800C) GPRS modem NEO-6M or similar GPS module Power supply and antennas‚úÖ Main functionalities: Read real-time GPS coordinates and speed Log data locally using LittleFS Batch-send collected data every 10 seconds over HTTP POST Handle communication either over WiFi or SIM800, depending on modeIn this article, we focus specifically on GPS data acquisition and SIM800 transmission.Step 1: Reading GPS Data with TinyGPS++The GPS module sends NMEA sentences (standardized ASCII messages) over serial. The TinyGPS++ library parses these into usable data:while (gpsSerial.available()) { gps.encode(gpsSerial.read());}if (gps.location.isUpdated()) { float latitude = gps.location.lat(); float longitude = gps.location.lng(); float speedKmph = gps.speed.kmph(); String timeUTC = getFormattedTime(); Serial.printf(\"Lat: %.6f, Lng: %.6f, Speed: %.2f km/h, Time: %s\\n\", latitude, longitude, speedKmph, timeUTC.c_str());}‚úÖ Important notes: Always check isUpdated() to avoid stale data. Use .lat() and .lng() for high-precision coordinates. Retrieve time only if gps.time.isValid().Step 2: Storing Data Locally with LittleFSCollected points are stored in a text file (/gpslog.txt) on the ESP32‚Äôs flash memory:String record = String(latitude, 6) + \",\" + String(longitude, 6) + \",\" + String(speedKmph, 2) + \",\" + timeUTC;appendToFile(\"/gpslog.txt\", record);‚úÖ Why store locally? If the connection is down, you avoid data loss. You can batch-send multiple points in one POST request, reducing overhead.Step 3: Preparing JSON for TransmissionBefore sending, the code reads the log file and builds a valid JSON array:[ { \"deviceId\": \"SCM-AA0001\", \"latitude\": 41.123456, \"longitude\": 29.987654, \"speed\": 12.34, \"timeStamp\": \"2025-05-09T12:34:56Z\" }, ...]‚úÖ Batching advantage: Reduce SIM800 data session usage. Ensure multiple data points are preserved.Step 4: Sending Data over SIM800 GPRSUsing AT commands, the ESP32 communicates with SIM800 via serial (sim800Serial):sendATCommand(\"AT+HTTPINIT\", 1000);sendATCommand(\"AT+HTTPPARA=\\\"CID\\\",1\", 1000);sendATCommand(\"AT+HTTPPARA=\\\"URL\\\",\\\"http://&lt;IP&gt;:&lt;PORT&gt;/api/TelemetryData\\\"\", 1000);sendATCommand(\"AT+HTTPPARA=\\\"CONTENT\\\",\\\"application/json\\\"\", 1000);sendATCommand(\"AT+HTTPDATA=\" + String(jsonArray.length()) + \",10000\", 1000);sim800Serial.print(jsonArray);delay(2000);sendATCommand(\"AT+HTTPACTION=1\", 10000); // POSTsendATCommand(\"AT+HTTPREAD\", 3000);sendATCommand(\"AT+HTTPTERM\", 1000);‚úÖ Key points: Always initialize HTTP (HTTPINIT) before sending. Use HTTPPARA to set headers and target URL. Set CID to 1, which refers to the active GPRS context (SAPBR). Use HTTPDATA to indicate payload length and prepare the modem.‚úÖ GPRS prerequisites: Ensure APN is set (AT+SAPBR=3,1,\"APN\",\"internet\"). Ensure GPRS session is activated (AT+SAPBR=1,1).Example AT Command Flow (SIM800)1Ô∏è‚É£ Check module: AT ‚Üí OK2Ô∏è‚É£ Open bearer: AT+SAPBR=1,13Ô∏è‚É£ Initialize HTTP: AT+HTTPINIT4Ô∏è‚É£ Set URL: AT+HTTPPARA=\"URL\",...5Ô∏è‚É£ Load data: AT+HTTPDATA6Ô∏è‚É£ Execute POST: AT+HTTPACTION=17Ô∏è‚É£ Read result: AT+HTTPREAD8Ô∏è‚É£ Terminate HTTP: AT+HTTPTERMIf anything fails, you can reset the connection with:restartSIM800Connection();Debugging Tips‚úÖ Enable serial prints to monitor AT command responses.‚úÖ Check signal strength with AT+CSQ.‚úÖ Use AT+CGATT? to ensure GPRS is attached.‚úÖ Retry failed actions or implement a reconnection loop.Final ThoughtsBy combining ESP32, TinyGPS++, and SIM800, you build a resilient, flexible GPS tracker capable of working in both WiFi and mobile network environments. Understanding the AT command flow is crucial for reliable data transmission." }, { "title": "What‚Äôs New in C# 13? Official Features and Practical Examples", "url": "/posts/whats-new-in-csharp-13/", "categories": "C#, .NET, Language Features", "tags": "csharp 13, new features, dotnet, official release, language updates", "date": "2025-05-10 04:00:00 +0300", "snippet": "C# 13 is officially here! Released alongside .NET 9, this version continues the evolution of the language with new capabilities designed to improve expressiveness, developer productivity, and perfo...", "content": "C# 13 is officially here! Released alongside .NET 9, this version continues the evolution of the language with new capabilities designed to improve expressiveness, developer productivity, and performance.In this article, we‚Äôll explore the confirmed features of C# 13, explain their purpose, and provide practical code examples so you can start using them right away.1Ô∏è‚É£ Default Interface Struct ImplementationsC# 13 allows default struct implementations in interfaces, improving the flexibility of interfaces when working with value types.Example:public interface IPoint{ int X { get; set; } int Y { get; set; } void Move(int dx, int dy) =&gt; X += dx; Y += dy;}Why it matters:‚úÖ Allows interfaces to evolve without breaking implementations‚úÖ Provides reusable logic even for structs2Ô∏è‚É£ Extended Collection PatternsC# 13 expands pattern matching with extended collection patterns, enabling you to match the head, tail, and middle of lists more elegantly.Example:if (data is [1, 2, .. var middle, 9]){ Console.WriteLine($\"Middle section: {string.Join(\",\", middle)}\");}Why it matters:‚úÖ Cleaner data deconstruction‚úÖ Simplifies working with arrays and lists3Ô∏è‚É£ Parameter Null Checking with !!Instead of writing manual null checks, C# 13 introduces parameter null checking with the !! operator.Example:void PrintName(string name!!){ Console.WriteLine(name);}This automatically throws ArgumentNullException if name is null.Why it matters:‚úÖ Less boilerplate‚úÖ Enforces parameter integrity consistently4Ô∏è‚É£ Lambda EnhancementsC# 13 further enhances lambdas with: Capturing ref variables Allowing attributes on lambdas Improved target-typing for lambdasExample:var add = [MyAttribute] (int a, int b) =&gt; a + b;Why it matters:‚úÖ More powerful functional constructs‚úÖ Fine-grained control over lambda behavior5Ô∏è‚É£ Improvements to Raw String LiteralsIntroduced in C# 11, raw string literals are further refined in C# 13, including: Better escape handling Multiline formatting improvementsExample:```csharpvar json =" }, { "title": "What is Top-Level Program in C# 9 and Later?", "url": "/posts/what-is-top-level-program-in-csharp-9-and-later/", "categories": "C#, .NET", "tags": "csharp 9, top-level program, dotnet, programming, simplification", "date": "2025-05-09 12:00:00 +0300", "snippet": "Starting with C# 9, Microsoft introduced top-level programs ‚Äî a new syntax feature that simplifies writing simple applications by eliminating the need for boilerplate code like Main methods and cla...", "content": "Starting with C# 9, Microsoft introduced top-level programs ‚Äî a new syntax feature that simplifies writing simple applications by eliminating the need for boilerplate code like Main methods and class declarations.This article explains what top-level programs are, why they were introduced, and how you can use them to write cleaner, faster-to-read code.What Is a Top-Level Program?In C# versions prior to 9, every program required at least the following structure:using System;namespace MyApp{ class Program { static void Main(string[] args) { Console.WriteLine(\"Hello, World!\"); } }}Starting with C# 9, you can skip all that boilerplate and write:using System;Console.WriteLine(\"Hello, World!\");This is called a top-level program ‚Äî the compiler automatically wraps your code in a class and generates the Main method for you.Why Was It Introduced?Top-level programs were added to make C# simpler for: Beginners who want to write short programs without extra ceremony Scripts and small utilities where you don‚Äôt need a full project structure Tutorials and documentation where concise examples are clearerIt reduces visual noise and makes small programs more approachable.How Does It Work?When you write a top-level program:‚úÖ Only one file in the project can have top-level statements.‚úÖ The compiler generates an implicit Main method that wraps your code.‚úÖ You can still access command-line arguments using the args variable.Example with arguments:Console.WriteLine($\"Number of args: {args.Length}\");foreach (var arg in args){ Console.WriteLine(arg);}Best Practices Use top-level programs for small console apps, samples, or quick tests. For larger or production apps, stick to the classic explicit Main structure for clarity and flexibility. You can combine top-level statements with functions or methods declared in the same file.Example: Mixing FunctionsSayHello();void SayHello(){ Console.WriteLine(\"Hello from a local function!\");}Advanced UsageYou can also work with: async code: mark the top-level context as async. Dependency injection: wire up services as usual if using minimal APIs in ASP.NET Core.Example with async:using System.Net.Http;using var client = new HttpClient();var content = await client.GetStringAsync(\"https://example.com\");Console.WriteLine(content);SummaryTop-level programs in C# 9+ are a powerful simplification, especially for quick scripts, demos, and educational materials. By removing unnecessary scaffolding, they let you focus on the core logic.In tomorrow‚Äôs article, we‚Äôll dive into async and await in C# ‚Äî how to write efficient asynchronous code that doesn‚Äôt block your application.Stay tuned!" }, { "title": "What is Rate Limiting? How to Use It in .NET 9?", "url": "/posts/what-is-rate-limiting-how-to-use-it-in-.net-9/", "categories": "ASP.NET Core, API Security", "tags": "rate limiting, .NET 9, api throttling, performance, protection", "date": "2025-05-09 12:00:00 +0300", "snippet": "Rate limiting is a critical technique in modern web development used to control how many requests a client can make to a server over a specific period. This prevents abuse, protects system resource...", "content": "Rate limiting is a critical technique in modern web development used to control how many requests a client can make to a server over a specific period. This prevents abuse, protects system resources, and ensures fair access across all users.In .NET 9, rate limiting has been enhanced with built-in middleware that can be easily configured and customized.Why Use Rate Limiting?Without rate limiting, your API could be flooded by excessive requests from: Malicious attackers (DDoS attacks) Misconfigured client apps making too many calls Heavy users consuming disproportionate system resourcesBenefits: Improves system stability under heavy load Enhances security by stopping brute-force attacks Guarantees fairness for all usersHow Does It Work?The server tracks requests from each client, usually by IP or token. If the client exceeds the allowed limit, the server rejects further requests (often with an HTTP 429 Too Many Requests error) until the window resets.Example in .NET 9Step 1: Install Middleware (if needed).NET 9 includes built-in middleware for rate limiting.Step 2: Configure in Program.csusing Microsoft.AspNetCore.RateLimiting;using System.Threading.RateLimiting;var builder = WebApplication.CreateBuilder(args);builder.Services.AddRateLimiter(options =&gt;{ options.AddFixedWindowLimiter(\"fixed\", opt =&gt; { opt.PermitLimit = 5; opt.Window = TimeSpan.FromSeconds(10); opt.QueueProcessingOrder = QueueProcessingOrder.OldestFirst; opt.QueueLimit = 2; });});var app = builder.Build();app.UseRateLimiter();app.MapGet(\"/\", () =&gt; \"Hello, world!\").RequireRateLimiting(\"fixed\");app.Run();This setup allows each client 5 requests every 10 seconds. Excess requests get queued (up to 2) or rejected.Advanced PatternsYou can use: Sliding window or token bucket algorithms for smoother control Per-endpoint or per-user limits Distributed rate limiting with Redis or cloud servicesBest Practices Always test limits under load Combine with authentication to apply limits per user, not per IP Use meaningful error responses to guide client-side handlingBy implementing rate limiting, your .NET 9 applications stay robust, fair, and secure." }, { "title": "Understanding Async and Await in C#", "url": "/posts/understanding-async-and-await-in-csharp/", "categories": "C#, Asynchronous Programming", "tags": "csharp, async, await, task, parallelism, dotnet", "date": "2025-05-08 12:00:00 +0300", "snippet": "Asynchronous programming is a key skill for modern .NET developers. In this guide, we‚Äôll cover async and await in C# ‚Äî what they are, why they matter, and how you can use them to write efficient, n...", "content": "Asynchronous programming is a key skill for modern .NET developers. In this guide, we‚Äôll cover async and await in C# ‚Äî what they are, why they matter, and how you can use them to write efficient, non-blocking applications.By the end, you‚Äôll understand the mechanics behind asynchronous code, see hands-on examples, learn best practices, and know when and when not to use it.Why Do We Need Asynchronous Programming?In traditional synchronous programming, every operation happens one after another. If one task takes a long time (like waiting for a web response or reading a large file), the entire application halts.Example problem:var response = GetDataFromApi(); // This blocks until the data is returnedProcessResponse(response);This is fine for short tasks but terrible for UI applications or high-performance servers because it ties up threads unnecessarily.Benefits of Async Programming‚úÖ Keep the UI responsive (no frozen windows)‚úÖ Allow servers to handle many more requests concurrently‚úÖ Free up system resources for other workWhat Are Async and Await? async is a modifier that marks a method as asynchronous, meaning it can use the await keyword. await tells the compiler: ‚ÄúPause this method here, let other work run, and resume when the awaited task completes.‚ÄùThis works hand-in-hand with the Task type, which represents a unit of work running in the background.Example:public async Task&lt;string&gt; GetDataAsync(){ using var client = new HttpClient(); string result = await client.GetStringAsync(\"https://api.example.com/data\"); return result;}Notice: await does not block the thread; it returns control to the caller until the task completes.Hands-On Example: Downloading Datausing System;using System.Net.Http;using System.Threading.Tasks;class Program{ static async Task Main(string[] args) { Console.WriteLine(\"Starting download...\"); string content = await DownloadPageAsync(\"https://example.com\"); Console.WriteLine(\"Download complete.\"); Console.WriteLine(content.Substring(0, 200)); // Show first 200 chars } static async Task&lt;string&gt; DownloadPageAsync(string url) { using var client = new HttpClient(); return await client.GetStringAsync(url); }}This program does not block the main thread while waiting for the download. It lets the system handle other tasks or UI updates.Common Mistakes and Gotchas‚ùå Blocking on async code (DON‚ÄôT DO THIS):var result = GetDataAsync().Result; // Deadlocks in UI apps‚úÖ Instead, always await async calls:var result = await GetDataAsync();‚ùå Forgetting to configure the context:await SomeAsyncMethod().ConfigureAwait(false); // Recommended in library codeThis prevents capturing the synchronization context (especially important for ASP.NET Core).Parallel vs AsynchronousMany confuse parallel with asynchronous. Asynchronous Parallel Designed to free up the thread Designed to use multiple threads Uses async/await, Task, I/O Uses Parallel.For, Task.Run, CPU work Best for I/O-bound work (disk, network) Best for CPU-bound work (calculations) Example of parallel code (CPU-bound):Parallel.For(0, 1000, i =&gt;{ Console.WriteLine(i);});Example of async code (I/O-bound):await File.ReadAllTextAsync(\"file.txt\");Chaining Async CallsYou can combine multiple async calls:public async Task&lt;string&gt; GetCombinedDataAsync(){ var data1 = await GetDataAsync(\"https://api1.example.com\"); var data2 = await GetDataAsync(\"https://api2.example.com\"); return data1 + data2;}Or run them in parallel (more efficient!):public async Task&lt;string&gt; GetParallelDataAsync(){ var task1 = GetDataAsync(\"https://api1.example.com\"); var task2 = GetDataAsync(\"https://api2.example.com\"); await Task.WhenAll(task1, task2); return task1.Result + task2.Result;}Best Practices‚úÖ Use async all the way ‚Äî avoid mixing sync and async code.‚úÖ Avoid Task.Result or Task.Wait ‚Äî these can cause deadlocks.‚úÖ Use ConfigureAwait(false) in library code to avoid context issues.‚úÖ Catch exceptions using try/catch, especially when awaiting tasks.‚úÖ Monitor performance ‚Äî async adds some overhead.Real-World Scenario: ASP.NET CoreIn ASP.NET Core, async code allows the server to handle thousands of requests efficiently.public async Task&lt;IActionResult&gt; GetData(){ var data = await _service.GetDataAsync(); return Ok(data);}Without async, each request ties up a thread, reducing scalability.SummaryAsync and await are essential for modern C# development. They let you write non-blocking, efficient, scalable code without complex thread management.By mastering these tools, you‚Äôll unlock the full power of .NET for web, desktop, cloud, and beyond.In tomorrow‚Äôs article, we‚Äôll cover Entity Framework Core ‚Äî how to work with databases in an elegant, object-oriented way.Stay tuned for more advanced guides!" }, { "title": "The Rise of Edge AI 2025's Hottest Software Trend", "url": "/posts/edge-ai-2025-trends/", "categories": "Trends", "tags": "trends", "date": "2025-05-08 08:33:00 +0300", "snippet": "In 2025, one of the most exciting and talked-about software trends is Edge AI ‚Äî the integration of artificial intelligence with edge computing devices.üöÄ What is Edge AI?Edge AI refers to running AI...", "content": "In 2025, one of the most exciting and talked-about software trends is Edge AI ‚Äî the integration of artificial intelligence with edge computing devices.üöÄ What is Edge AI?Edge AI refers to running AI models directly on edge devices such as smartphones, IoT sensors, cameras, and robots ‚Äî instead of relying on cloud servers. This approach brings several key advantages: ‚ö° Ultra-low latency for real-time decisions üîí Enhanced privacy by keeping data local üåç Offline capabilities without continuous cloud connectivity üîã Better energy and bandwidth efficiencyExample applications include: Autonomous vehicles making split-second decisions Smart security cameras recognizing faces or anomalies Wearable health devices detecting heart irregularities in real timeüî• Why Is It So Popular in 2025?Several big shifts are fueling the Edge AI boom: Advancements in hardware ‚Üí Mobile chips now pack dedicated AI accelerators. Tighter privacy laws ‚Üí Companies are pushing local data processing to comply. 5G is good, but edge is faster ‚Üí Even with fast networks, local computation cuts latency. Environmental impact ‚Üí Reducing cloud load saves energy at scale.üõ†Ô∏è Essential Tools &amp; TechnologiesIf you want to experiment with Edge AI, check out: TensorFlow Lite / PyTorch Mobile ‚Üí Lightweight ML frameworks for mobile and embedded ONNX Runtime ‚Üí Cross-platform model execution Edge TPU, NVIDIA Jetson, Intel Movidius ‚Üí Specialized hardware for edge inference TinyML ‚Üí Ultra-compact models that fit on microcontrollersüåç Real-World Use CasesHere‚Äôs where Edge AI is making waves: Retail ‚Üí Smart shelves that alert when stock is low Agriculture ‚Üí Drones scanning fields and identifying crop issues Healthcare ‚Üí Portable devices providing instant diagnostic support Manufacturing ‚Üí Predictive maintenance directly on factory equipmentüìà What‚Äôs Next?In the next few years, we can expect: Local generative AI (imagine chatbots and vision models running on your phone) Federated learning ‚Üí Devices learning collaboratively without sharing raw data Even deeper integration between software and specialized chipsEdge AI is not just a trend ‚Äî it‚Äôs reshaping how software interacts with the world around us. If you‚Äôre a developer, now‚Äôs the time to dive into this space and be part of the revolution!" }, { "title": "Getting Started with Entity Framework Core", "url": "/posts/getting-started-with-entity-framework-core/", "categories": "C#, Entity Framework, Databases", "tags": "entity framework core, ef core, csharp, orm, database access", "date": "2025-05-07 12:00:00 +0300", "snippet": "Entity Framework Core (EF Core) is Microsoft‚Äôs modern object-relational mapper (ORM) for .NET. It enables developers to interact with databases using C# objects, reducing the need to write raw SQL ...", "content": "Entity Framework Core (EF Core) is Microsoft‚Äôs modern object-relational mapper (ORM) for .NET. It enables developers to interact with databases using C# objects, reducing the need to write raw SQL and making data access more maintainable, testable, and scalable.In this guide, we‚Äôll explore what EF Core is, how to set it up, basic CRUD operations, and best practices. You‚Äôll get hands-on examples to kickstart your database projects confidently.What Is Entity Framework Core?Entity Framework Core is a lightweight, extensible, open-source, and cross-platform ORM. It maps .NET classes (entities) to database tables, allowing you to work with data using LINQ queries and C# code instead of SQL.Why Use EF Core?‚úÖ Reduce boilerplate code‚úÖ Automatically generate database schemas (migrations)‚úÖ Use strong typing and compile-time checks‚úÖ Easily switch between different database providers (SQL Server, PostgreSQL, SQLite, etc.)‚úÖ Improve maintainability and testabilitySetting Up EF CoreLet‚Äôs create a basic project using EF Core.Step 1: Install NuGet PackagesRun this in the terminal:dotnet add package Microsoft.EntityFrameworkCoredotnet add package Microsoft.EntityFrameworkCore.SqlServerdotnet add package Microsoft.EntityFrameworkCore.ToolsThese packages provide the core library, the SQL Server provider, and tooling support.Step 2: Define the Data ModelCreate a Product entity:public class Product{ public int Id { get; set; } public string Name { get; set; } public decimal Price { get; set; }}Step 3: Create the DbContextusing Microsoft.EntityFrameworkCore;public class AppDbContext : DbContext{ public DbSet&lt;Product&gt; Products { get; set; } protected override void OnConfiguring(DbContextOptionsBuilder options) =&gt; options.UseSqlServer(\"Server=localhost;Database=MyAppDb;Trusted_Connection=True;\");}This context class bridges your entities and the database.Performing CRUD OperationsCreate (Insert)using var db = new AppDbContext();db.Products.Add(new Product { Name = \"Laptop\", Price = 1500 });db.SaveChanges();Read (Query)var products = db.Products.Where(p =&gt; p.Price &gt; 1000).ToList();foreach (var product in products){ Console.WriteLine($\"{product.Name} - {product.Price}\"); }Updatevar product = db.Products.First();product.Price = 1200;db.SaveChanges();Deletevar product = db.Products.First();db.Products.Remove(product);db.SaveChanges();Using MigrationsEF Core can generate database schemas using migrations.Add Initial Migrationdotnet ef migrations add InitialCreateApply Migrationdotnet ef database updateThis creates tables in the database automatically.Advanced TopicsRelationshipsDefine one-to-many, many-to-many, and one-to-one relationships using navigation properties and Fluent API.public class Category{ public int Id { get; set; } public string Name { get; set; } public List&lt;Product&gt; Products { get; set; }}Lazy Loading vs Eager Loading// Eager loadingvar products = db.Products.Include(p =&gt; p.Category).ToList();// Lazy loading (requires setup)var categoryName = product.Category.Name;Asynchronous Operationsvar products = await db.Products.ToListAsync();Async queries help avoid blocking the main thread, especially in web apps.Best Practices‚úÖ Use migrations to manage schema changes‚úÖ Write unit tests using in-memory providers (e.g., InMemoryDatabase)‚úÖ Avoid N+1 query problems by using Include()‚úÖ Keep DbContext usage short-lived (scoped per request)‚úÖ Use value converters for custom types (like enums)Real-World Scenario: ASP.NET Core IntegrationIn an ASP.NET Core API:[ApiController][Route(\"api/[controller]\")]public class ProductsController : ControllerBase{ private readonly AppDbContext _context; public ProductsController(AppDbContext context) { _context = context; } [HttpGet] public async Task&lt;IEnumerable&lt;Product&gt;&gt; Get() { return await _context.Products.ToListAsync(); } [HttpPost] public async Task&lt;IActionResult&gt; Post(Product product) { _context.Products.Add(product); await _context.SaveChangesAsync(); return CreatedAtAction(nameof(Get), new { id = product.Id }, product); }}SummaryEntity Framework Core simplifies data access in .NET applications, allowing developers to work with databases efficiently using familiar C# constructs. By mastering EF Core, you unlock the ability to build data-driven applications with less effort and fewer bugs.In tomorrow‚Äôs article, we‚Äôll explore LINQ queries ‚Äî how to filter, project, and manipulate data elegantly in C#.Stay tuned for more advanced .NET insights!" }, { "title": "What is Health Check? How to Use It in .NET 9?", "url": "/posts/what-is-health-check-how-to-use-it-in-.net-9/", "categories": "ASP.NET Core, Monitoring", "tags": "health check, .NET 9, system monitoring, liveness, readiness", "date": "2025-05-06 12:00:00 +0300", "snippet": "Health checks are essential for monitoring the health and availability of your application and its dependencies. They allow automated systems (like Kubernetes, Azure, or AWS) to detect when your ap...", "content": "Health checks are essential for monitoring the health and availability of your application and its dependencies. They allow automated systems (like Kubernetes, Azure, or AWS) to detect when your app is down or degraded.Why Use Health Checks?Modern applications rely on many external systems: Databases Message queues Third-party APIsIf any of these fail, you want your orchestration system to know immediately and respond (like restarting the container or redirecting traffic).Types of Health Checks Liveness probes ‚Üí Is the app running at all? Readiness probes ‚Üí Is the app ready to serve requests?Example in .NET 9Step 1: Add NuGet Packagedotnet add package Microsoft.Extensions.Diagnostics.HealthChecksStep 2: Configure Health Checks in Program.csvar builder = WebApplication.CreateBuilder(args);builder.Services.AddHealthChecks() .AddSqlServer(builder.Configuration[\"ConnectionStrings:DefaultConnection\"]) .AddRedis(builder.Configuration[\"Redis:ConnectionString\"]);var app = builder.Build();app.MapHealthChecks(\"/health\");app.Run();Step 3: Access the Health EndpointVisit https://yourapp.com/health and you‚Äôll see a JSON summary of system status.Example Output{ \"status\": \"Healthy\", \"results\": { \"SqlServer\": { \"status\": \"Healthy\" }, \"Redis\": { \"status\": \"Healthy\" } }}Best Practices Separate liveness and readiness checks Protect health endpoints (avoid leaking internal details) Integrate with your hosting platform‚Äôs monitoring toolsHealth checks help ensure your .NET 9 apps stay resilient and self-healing in production." }, { "title": "LINQ Queries in C# What Is LINQ and How to Use It", "url": "/posts/linq-queries-in-csharp-what-is-linq-and-how-to-use-it/", "categories": "C#, LINQ, Data Manipulation", "tags": "csharp, linq, data querying, collections, dotnet", "date": "2025-05-06 12:00:00 +0300", "snippet": "Language Integrated Query (LINQ) is one of the most powerful features in C#. It allows you to query, transform, and filter data directly in your C# code using a consistent, expressive syntax.In thi...", "content": "Language Integrated Query (LINQ) is one of the most powerful features in C#. It allows you to query, transform, and filter data directly in your C# code using a consistent, expressive syntax.In this guide, we‚Äôll cover what LINQ is, why it‚Äôs useful, how to use it, and provide plenty of practical examples for working with collections, databases, and beyond.What Is LINQ?LINQ stands for Language Integrated Query. It brings SQL-like querying capabilities into C# and .NET languages, allowing you to work with in-memory collections, databases, XML, and more.Example:var numbers = new[] { 1, 2, 3, 4, 5 };var evenNumbers = numbers.Where(n =&gt; n % 2 == 0);You can write concise, readable queries over data ‚Äî no matter where that data comes from.Why Use LINQ?‚úÖ Unified querying: Whether you work with arrays, lists, databases, or XML, the syntax stays the same.‚úÖ Type safety: Compile-time checking helps avoid mistakes.‚úÖ Readable code: More expressive and concise compared to loops or manual filtering.‚úÖ Composable: You can chain multiple queries together smoothly.LINQ Syntax FormsThere are two ways to write LINQ queries:Query Syntax (SQL-like)var result = from n in numbers where n % 2 == 0 select n;Method Syntax (Fluent)var result = numbers.Where(n =&gt; n % 2 == 0);Both are valid and can be mixed.Common LINQ OperationsFiltering with Wherevar adults = people.Where(p =&gt; p.Age &gt;= 18);Projection with Selectvar names = people.Select(p =&gt; p.Name);Ordering with OrderByvar sorted = people.OrderBy(p =&gt; p.LastName);Aggregationvar totalAge = people.Sum(p =&gt; p.Age);var averageAge = people.Average(p =&gt; p.Age);var count = people.Count();Groupingvar grouped = people.GroupBy(p =&gt; p.City);foreach (var group in grouped){ Console.WriteLine($\"City: {group.Key}, Count: {group.Count()}\"); }LINQ with CollectionsList&lt;int&gt; numbers = new() { 1, 2, 3, 4, 5, 6 };var squaredEvens = numbers .Where(n =&gt; n % 2 == 0) .Select(n =&gt; n * n);foreach (var num in squaredEvens){ Console.WriteLine(num);}LINQ with Entity Framework Corevar expensiveProducts = dbContext.Products .Where(p =&gt; p.Price &gt; 1000) .OrderBy(p =&gt; p.Name) .ToList();Important LINQ-to-Entities queries are translated to SQL and run on the database. Always test performance and understand generated queries.LINQ with Anonymous Typesvar projected = people.Select(p =&gt; new { p.Name, p.Age });You can project only the fields you need, which is efficient and reduces memory usage.Combining Multiple Queriesvar query = products .Where(p =&gt; p.InStock) .OrderByDescending(p =&gt; p.Rating) .Take(10);You can chain multiple operations for complex querying.Best Practices‚úÖ Use method syntax for flexibility.‚úÖ Avoid materializing queries too early (use ToList() only when needed).‚úÖ Be aware of deferred execution: queries don‚Äôt run until you enumerate them.‚úÖ Watch out for performance when querying large datasets.SummaryLINQ is a cornerstone of modern C# development, providing a consistent, expressive way to work with data. By mastering LINQ, you gain the ability to write cleaner, more maintainable, and efficient code for a wide range of data sources." }, { "title": "What is OpenTelemetry? How to Use It in .NET 9?", "url": "/posts/what-is-opentelemetry-how-to-use-it-in-dotnet9/", "categories": "DotNet, OpenTelemetry, Observability", "tags": "opentelemetry, dotnet9, tracing, metrics", "date": "2025-05-05 23:06:21 +0300", "snippet": "üåê What is OpenTelemetry?This section explains what OpenTelemetry is and why it matters in modern development.‚öôÔ∏è How Does It Work?This section describes the core principles and how the technology fu...", "content": "üåê What is OpenTelemetry?This section explains what OpenTelemetry is and why it matters in modern development.‚öôÔ∏è How Does It Work?This section describes the core principles and how the technology functions.üèóÔ∏è How to Use It in .NET 9Step 1: Install Necessary Packagedotnet add package [PACKAGE_NAME]Step 2: Configure in Program.cs// Example configuration for OpenTelemetryvar builder = WebApplication.CreateBuilder(args);// Add services herevar app = builder.Build();// Configure middleware or routesapp.Run();‚úÖ Note: Replace [PACKAGE_NAME] with the actual package name and customize setup accordingly.üî• Why Should You Use It? üöÄ Boosts performance or observability üîí Adds security or reliability üåç Enhances integration with modern systemsüìà Advanced UsageExplore more advanced patterns, integrations, or performance tuning..NET 9 makes it easier than ever to integrate OpenTelemetry into your projects.Want a full hands-on guide or advanced example? Let me know! üöÄ" }, { "title": "What Are Razor Pages in ASP.NET Core?", "url": "/posts/what-are-razor-pages-in-aspnet-core/", "categories": "ASP.NET Core, Web Development", "tags": "razor pages, aspnet core, web apps, csharp, dotnet", "date": "2025-05-05 12:00:00 +0300", "snippet": "Razor Pages is a simplified, page-based programming model for building dynamic web applications in ASP.NET Core. It offers a clean separation of concerns and is ideal for scenarios where you need l...", "content": "Razor Pages is a simplified, page-based programming model for building dynamic web applications in ASP.NET Core. It offers a clean separation of concerns and is ideal for scenarios where you need lightweight, fast-to-develop web pages.In this article, we‚Äôll explore what Razor Pages are, why they‚Äôre useful, how to set them up, and walk through real examples and best practices.What Are Razor Pages?Razor Pages is part of ASP.NET Core and is designed for building page-centric web apps. Unlike MVC (Model-View-Controller), where controllers manage logic separately from views, Razor Pages places the logic and page markup in one unit.A typical Razor Page has:‚úÖ A .cshtml file for HTML + Razor markup‚úÖ A .cshtml.cs file (PageModel) for C# codeExample structure:/Pages Index.cshtml Index.cshtml.csWhy Use Razor Pages?‚úÖ Simpler: Less overhead compared to MVC, great for small-to-medium applications.‚úÖ Separation of concerns: Keeps markup and code-behind neatly organized.‚úÖ Productive: Easy to scaffold CRUD operations with built-in tools.‚úÖ Flexible: Still supports dependency injection, filters, and routing like MVC.Setting Up Razor PagesStep 1: Create a ProjectRun:dotnet new webapp -o RazorPagesAppThis scaffolds a basic Razor Pages app.Step 2: Explore the StructureCheck the /Pages folder. You‚Äôll find: Index.cshtml ‚Äî the homepage markup Index.cshtml.cs ‚Äî the associated PageModel classStep 3: Run the Appdotnet runVisit https://localhost:5001 to see the app.Anatomy of a Razor PageIndex.cshtml@page@model IndexModel&lt;h1&gt;Welcome, @Model.Message&lt;/h1&gt;Index.cshtml.cspublic class IndexModel : PageModel{ public string Message { get; set; } public void OnGet() { Message = \"Hello from Razor Pages!\"; }}The OnGet() method handles GET requests.Handling POST RequestsHTML Form (Index.cshtml)&lt;form method=\"post\"&gt; &lt;input type=\"text\" name=\"UserInput\" /&gt; &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;&lt;/form&gt;&lt;p&gt;You submitted: @Model.Result&lt;/p&gt;PageModel (Index.cshtml.cs)public string Result { get; set; }public void OnPost(string userInput){ Result = userInput;}When the form is submitted, the OnPost() method handles the request.Using Dependency Injectionpublic class IndexModel : PageModel{ private readonly ILogger&lt;IndexModel&gt; _logger; public IndexModel(ILogger&lt;IndexModel&gt; logger) { _logger = logger; } public void OnGet() { _logger.LogInformation(\"Page loaded.\"); }}Routing in Razor PagesBy default, the URL /Index maps to Index.cshtml. You can customize routing with attributes:[BindProperties][Route(\"custom-route\")]public class CustomModel : PageModel{ public void OnGet() { }}Best Practices‚úÖ Keep page logic in the PageModel, not in the view.‚úÖ Use partial views or components for reusable markup.‚úÖ Validate user input with model binding and data annotations.‚úÖ Apply filters (like Authorize) to protect pages.‚úÖ Organize complex pages with areas or folders.Real-World Example: CRUD OperationsRazor Pages work great for CRUD apps.Scaffolding Exampledotnet aspnet-codegenerator razorpage Product -m Product -dc AppDbContext -udl -outDir Pages/ProductsThis generates Razor Pages for listing, creating, editing, and deleting products.Using EF CoreIn your PageModel:public class ProductsModel : PageModel{ private readonly AppDbContext _context; public ProductsModel(AppDbContext context) { _context = context; } public IList&lt;Product&gt; ProductList { get; set; } public async Task OnGetAsync() { ProductList = await _context.Products.ToListAsync(); }}SummaryRazor Pages offer a streamlined, productive approach to building web applications with ASP.NET Core. By mastering Razor Pages, you can develop fast, maintainable, and scalable web solutions with less complexity compared to traditional MVC setups." }, { "title": "What is Minimal API? How to Use It in .NET 9?", "url": "/posts/what-is-minimal-api-how-to-use-it-in-dotnet9/", "categories": "DotNet, Minimal API, Trends", "tags": "minimal api, dotnet9, rest api, lightweight", "date": "2025-05-04 23:06:21 +0300", "snippet": "üåê What is Minimal API?This section explains what Minimal API is and why it matters in modern development.‚öôÔ∏è How Does It Work?This section describes the core principles and how the technology functi...", "content": "üåê What is Minimal API?This section explains what Minimal API is and why it matters in modern development.‚öôÔ∏è How Does It Work?This section describes the core principles and how the technology functions.üèóÔ∏è How to Use It in .NET 9Step 1: Install Necessary Packagedotnet add package [PACKAGE_NAME]Step 2: Configure in Program.cs// Example configuration for Minimal APIvar builder = WebApplication.CreateBuilder(args);// Add services herevar app = builder.Build();// Configure middleware or routesapp.Run();‚úÖ Note: Replace [PACKAGE_NAME] with the actual package name and customize setup accordingly.üî• Why Should You Use It? üöÄ Boosts performance or observability üîí Adds security or reliability üåç Enhances integration with modern systemsüìà Advanced UsageExplore more advanced patterns, integrations, or performance tuning..NET 9 makes it easier than ever to integrate Minimal API into your projects.Want a full hands-on guide or advanced example? Let me know! üöÄ" }, { "title": "What Is Blazor? Building Web UIs with .NET and WebAssembly", "url": "/posts/what-is-blazor-building-web-uis-with-dotnet-and-webassembly/", "categories": "Blazor, Web Development, .NET", "tags": "blazor, webassembly, csharp, web ui, dotnet", "date": "2025-05-04 12:00:00 +0300", "snippet": "Blazor is a cutting-edge framework from Microsoft that allows developers to build interactive web applications using C# and .NET, running in the browser via WebAssembly. This means you can write ri...", "content": "Blazor is a cutting-edge framework from Microsoft that allows developers to build interactive web applications using C# and .NET, running in the browser via WebAssembly. This means you can write rich, client-side web apps without JavaScript.In this article, we‚Äôll cover what Blazor is, how it works, setup steps, and explore real-world examples and best practices.What Is Blazor?Blazor is part of the ASP.NET Core ecosystem and provides two hosting models:‚úÖ Blazor WebAssembly (WASM) ‚Äî Runs C# directly in the browser using WebAssembly.‚úÖ Blazor Server ‚Äî Executes C# code on the server, with UI updates sent over a SignalR connection.The key idea is: you can use C#, Razor, and .NET libraries to build full web UIs, reusing logic across server and client.Why Use Blazor?‚úÖ Full-stack .NET development ‚Äî share code between frontend and backend.‚úÖ Avoid JavaScript for most UI logic.‚úÖ Strong typing, tooling, and compile-time checks.‚úÖ Access to existing .NET libraries and ecosystem.‚úÖ Deploy as static files (Blazor WebAssembly) or connected apps (Blazor Server).Setting Up BlazorStep 1: Install SDKMake sure you have .NET 7 or later installed.dotnet --versionStep 2: Create a New Blazor WebAssembly Appdotnet new blazorwasm -o BlazorAppcd BlazorAppStep 3: Run the Appdotnet runVisit https://localhost:5001 ‚Äî you‚Äôll see a running Blazor app!Understanding Blazor ComponentsA Blazor component is a reusable piece of UI, written in .razor files.Example Counter.razor:&lt;h3&gt;Counter&lt;/h3&gt;&lt;p&gt;Current count: @currentCount&lt;/p&gt;&lt;button class=\"btn btn-primary\" @onclick=\"IncrementCount\"&gt;Click me&lt;/button&gt;@code { private int currentCount = 0; private void IncrementCount() { currentCount++; }}This component updates interactively when the button is clicked.Blazor WebAssembly vs Blazor Server Feature Blazor WebAssembly Blazor Server Runs in Browser (client-side, WebAssembly) Server (with SignalR connection) Performance Faster for local interactions Lower initial download, higher latency Offline support Yes No Resource usage Uses client resources Uses server resources Choose based on your app‚Äôs needs.Data Binding and EventsBlazor makes binding data simple:&lt;input @bind=\"username\" /&gt;&lt;p&gt;You typed: @username&lt;/p&gt;@code { private string username = \"\";}Events like button clicks:&lt;button @onclick=\"HandleClick\"&gt;Click me&lt;/button&gt;@code { void HandleClick() { Console.WriteLine(\"Button clicked\"); }}Calling APIsYou can use HttpClient to make API calls:@inject HttpClient Http@code { WeatherForecast[] forecasts; protected override async Task OnInitializedAsync() { forecasts = await Http.GetFromJsonAsync&lt;WeatherForecast[]&gt;(\"WeatherForecast\"); }}Best Practices‚úÖ Use components to break UI into reusable pieces.‚úÖ Avoid large monolithic pages ‚Äî keep things modular.‚úÖ Use asynchronous methods (async/await) for I/O work.‚úÖ Consider Blazor WebAssembly size optimization (AOT, trimming) for production.‚úÖ Protect server-side resources with authentication and authorization.Real-World Use Cases Internal business apps (dashboards, forms, management tools) Progressive Web Apps (PWAs) with offline support Interactive public websites with live data Hybrid apps (with .NET MAUI or Electron)SummaryBlazor represents a major leap forward in .NET web development, allowing you to write client-side, interactive web UIs using C# and WebAssembly. Whether you choose Blazor WebAssembly or Blazor Server, the framework empowers you to create rich, maintainable web apps using the full .NET ecosystem." }, { "title": "What is gRPC? How to Use It in .NET 9?", "url": "/posts/what-is-grpc-how-to-use-it-in-dotnet9/", "categories": "DotNet, gRPC, Trends", "tags": "grpc, dotnet9, microservices, communication", "date": "2025-05-03 23:06:21 +0300", "snippet": "üåê What is gRPC?This section explains what gRPC is and why it matters in modern development.‚öôÔ∏è How Does It Work?This section describes the core principles and how the technology functions.üèóÔ∏è How to ...", "content": "üåê What is gRPC?This section explains what gRPC is and why it matters in modern development.‚öôÔ∏è How Does It Work?This section describes the core principles and how the technology functions.üèóÔ∏è How to Use It in .NET 9Step 1: Install Necessary Packagedotnet add package [PACKAGE_NAME]Step 2: Configure in Program.cs// Example configuration for gRPCvar builder = WebApplication.CreateBuilder(args);// Add services herevar app = builder.Build();// Configure middleware or routesapp.Run();‚úÖ Note: Replace [PACKAGE_NAME] with the actual package name and customize setup accordingly.üî• Why Should You Use It? üöÄ Boosts performance or observability üîí Adds security or reliability üåç Enhances integration with modern systemsüìà Advanced UsageExplore more advanced patterns, integrations, or performance tuning..NET 9 makes it easier than ever to integrate gRPC into your projects.Want a full hands-on guide or advanced example? Let me know! üöÄ" }, { "title": "How to Build and Document Web APIs Using ASP.NET Core and OpenAPI", "url": "/posts/how-to-build-and-document-web-apis-using-aspnet-core-and-openapi/", "categories": "ASP.NET Core, Web API, Documentation", "tags": "aspnet core, web api, openapi, swagger, dotnet, api documentation", "date": "2025-05-03 12:00:00 +0300", "snippet": "Building Web APIs is a central task in modern software development. ASP.NET Core provides a robust framework for creating APIs, and with OpenAPI (Swagger), you can automatically generate interactiv...", "content": "Building Web APIs is a central task in modern software development. ASP.NET Core provides a robust framework for creating APIs, and with OpenAPI (Swagger), you can automatically generate interactive documentation, making your APIs easier to consume and test.In this article, we‚Äôll explore how to create Web APIs using ASP.NET Core and integrate OpenAPI/Swagger for seamless documentation.What Is OpenAPI?OpenAPI (formerly known as Swagger) is a specification for describing RESTful APIs. It defines how your API endpoints, request/response models, and authentication work, making it easier for developers and tools to understand and interact with your API.Swagger UI uses OpenAPI definitions to provide a live, interactive web page where you can test API calls directly.Setting Up an ASP.NET Core Web APIStep 1: Create a New Projectdotnet new webapi -o MyApiAppcd MyApiAppThis scaffolds a minimal API project with a sample WeatherForecast controller.Step 2: Explore the Structure Program.cs ‚Äî main app configuration Controllers/WeatherForecastController.cs ‚Äî sample API controller appsettings.json ‚Äî configuration fileUnderstanding Minimal APIs (Optional)Starting with .NET 6, you can create APIs without controllers, using Minimal APIs:var builder = WebApplication.CreateBuilder(args);var app = builder.Build();app.MapGet(\"/hello\", () =&gt; \"Hello, world!\");app.Run();For more complex APIs, use controllers and proper routing.Adding Swagger / OpenAPI SupportASP.NET Core Web API templates come with Swagger by default.In Program.cs:var builder = WebApplication.CreateBuilder(args);builder.Services.AddEndpointsApiExplorer();builder.Services.AddSwaggerGen();var app = builder.Build();if (app.Environment.IsDevelopment()){ app.UseSwagger(); app.UseSwaggerUI();}app.UseHttpsRedirection();app.UseAuthorization();app.MapControllers();app.Run();When you run the app and navigate to /swagger, you‚Äôll see the Swagger UI.Customizing API DocumentationYou can customize Swagger with attributes and XML comments.Adding XML Comments1Ô∏è‚É£ Enable XML comments in .csproj:&lt;PropertyGroup&gt; &lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt; &lt;NoWarn&gt;$(NoWarn);1591&lt;/NoWarn&gt;&lt;/PropertyGroup&gt;2Ô∏è‚É£ In Program.cs:builder.Services.AddSwaggerGen(c =&gt;{ var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\"; var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile); c.IncludeXmlComments(xmlPath);});3Ô∏è‚É£ Document controllers and actions:/// &lt;summary&gt;/// Gets all products./// &lt;/summary&gt;[HttpGet]public IEnumerable&lt;Product&gt; Get() { ... }Securing the API with AuthenticationSwagger can be configured to handle authentication headers:builder.Services.AddSwaggerGen(c =&gt;{ c.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme { In = ParameterLocation.Header, Description = \"Please insert JWT with Bearer into field\", Name = \"Authorization\", Type = SecuritySchemeType.ApiKey }); c.AddSecurityRequirement(new OpenApiSecurityRequirement { { new OpenApiSecurityScheme { Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = \"Bearer\" } }, new string[] { } }});});This allows you to test protected endpoints directly from the Swagger UI.Best Practices‚úÖ Use ApiController attribute for consistent routing and validation.‚úÖ Validate input using [FromBody], [FromQuery], and data annotations.‚úÖ Return proper status codes (Ok(), NotFound(), BadRequest()).‚úÖ Version your APIs (/api/v1/products).‚úÖ Keep OpenAPI specs up-to-date to improve developer experience.Real-World Example: Products API[ApiController][Route(\"api/[controller]\")]public class ProductsController : ControllerBase{ private static readonly List&lt;Product&gt; _products = new(); [HttpGet] public ActionResult&lt;IEnumerable&lt;Product&gt;&gt; Get() =&gt; Ok(_products); [HttpPost] public ActionResult&lt;Product&gt; Post(Product product) { _products.Add(product); return CreatedAtAction(nameof(Get), new { id = product.Id }, product); }}SummaryBy combining ASP.NET Core Web APIs with OpenAPI/Swagger, you make your APIs discoverable, testable, and easier to integrate. This boosts team productivity, reduces integration errors, and enhances the developer experience." }, { "title": "What Are Minimal APIs in .NET?", "url": "/posts/what-are-minimal-apis-in-dotnet/", "categories": "ASP.NET Core, Web API, Minimal APIs", "tags": "minimal apis, aspnet core, dotnet, web api, lightweight apis", "date": "2025-05-02 12:00:00 +0300", "snippet": "Minimal APIs are a lightweight, fast way to build HTTP APIs in ASP.NET Core with minimal setup and overhead. Introduced in .NET 6, they let you define routes, handlers, and endpoints directly in Pr...", "content": "Minimal APIs are a lightweight, fast way to build HTTP APIs in ASP.NET Core with minimal setup and overhead. Introduced in .NET 6, they let you define routes, handlers, and endpoints directly in Program.cs without needing controllers, attributes, or complex configuration.In this article, we‚Äôll explore what Minimal APIs are, why they‚Äôre useful, how to implement them, and walk through real examples and best practices.What Are Minimal APIs?Minimal APIs provide a simplified approach to building RESTful services:‚úÖ Write HTTP routes and handlers directly in the app startup file.‚úÖ Focus on the essentials ‚Äî no extra ceremony or layers.‚úÖ Perfect for small services, microservices, or serverless apps.Example:var app = WebApplication.Create(args);app.MapGet(\"/hello\", () =&gt; \"Hello, world!\");app.Run();That‚Äôs a complete, runnable API!Why Use Minimal APIs?‚úÖ Simplicity ‚Äî Less code, fewer files.‚úÖ Performance ‚Äî Lower startup overhead.‚úÖ Flexibility ‚Äî Combine with DI, middleware, or full MVC when needed.‚úÖ Perfect for microservices ‚Äî Small, focused endpoints.Setting Up a Minimal APIStep 1: Create a New Projectdotnet new web -o MinimalApiAppcd MinimalApiAppStep 2: Define EndpointsIn Program.cs:var builder = WebApplication.CreateBuilder(args);var app = builder.Build();app.MapGet(\"/greet\", () =&gt; \"Hello from Minimal API!\");app.Run();Run it:dotnet runVisit https://localhost:5001/greet.Adding Parameters and RoutesSimple Parameterapp.MapGet(\"/square/{number:int}\", (int number) =&gt; number * number);Calling /square/5 returns 25.Query String Parametersapp.MapGet(\"/welcome\", (string name) =&gt; $\"Welcome, {name}!\") .WithName(\"WelcomeEndpoint\");Working with Dependency Injectionbuilder.Services.AddSingleton&lt;MyService&gt;();app.MapGet(\"/service\", (MyService service) =&gt;{ return service.GetMessage();});public class MyService{ public string GetMessage() =&gt; \"Hello from DI service!\";}Handling POST Requestsapp.MapPost(\"/products\", (Product product) =&gt;{ // Save product (mocked) return Results.Created($\"/products/{product.Id}\", product);});Product class:public record Product(int Id, string Name, decimal Price);Adding Middlewareapp.Use(async (context, next) =&gt;{ Console.WriteLine($\"Request: {context.Request.Path}\"); await next();});This runs on every request.Error Handling and Validationapp.MapGet(\"/divide\", (int a, int b) =&gt;{ if (b == 0) return Results.BadRequest(\"Cannot divide by zero.\"); return Results.Ok(a / b);});Best Practices‚úÖ Use Minimal APIs for small services or prototypes.‚úÖ Add authentication and authorization as needed.‚úÖ Validate input carefully ‚Äî fewer layers mean more responsibility.‚úÖ Organize routes logically, even without controllers.‚úÖ Use OpenAPI/Swagger for documentation (builder.Services.AddEndpointsApiExplorer()).Real-World Example: Health Checkapp.MapGet(\"/health\", () =&gt; Results.Ok(new { status = \"Healthy\", time = DateTime.UtcNow }));This provides a simple endpoint for monitoring or health checks.SummaryMinimal APIs in ASP.NET Core offer a fast, efficient way to build lightweight HTTP services with minimal setup. By learning how to use them effectively, you can build focused microservices, APIs, and serverless functions that are easy to maintain and deploy." }, { "title": "What is JWT Security? How to Use It in .NET 9 for Secure APIs", "url": "/posts/what-is-jwt-security-how-to-use-it-in-dotnet9/", "categories": "ASP.NET Core, Security, JWT", "tags": "jwt, .NET 9, api security, authentication, authorization, token-based security", "date": "2025-05-01 12:00:00 +0300", "snippet": "In the world of modern web development, securing your APIs is no longer optional. One of the most popular and effective methods today is using JWT (JSON Web Token) for authentication and authorizat...", "content": "In the world of modern web development, securing your APIs is no longer optional. One of the most popular and effective methods today is using JWT (JSON Web Token) for authentication and authorization. This article explains what JWT is, why it matters, and how you can implement it in your .NET 9 applications.What is JWT?JWT (JSON Web Token) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.A typical JWT contains: Header: Defines the type of the token and signing algorithm Payload: Contains the claims (user data, permissions, etc.) Signature: Ensures that the token hasn‚Äôt been alteredWhy use JWT? Stateless: No server-side session storage required Scalable: Perfect for distributed and microservice architectures Compact: Easy to transmit via URL, headers, or inside cookiesHow JWT Works in .NET 9In a typical flow: A user logs in with valid credentials. The server generates a JWT and sends it back to the client. The client stores the token (usually in local storage or a cookie). The client sends the token with every request (commonly in the Authorization header). The server validates the token and grants or denies access.Step-by-Step: Using JWT in .NET 9Step 1: Install Required NuGet Packagesdotnet add package Microsoft.AspNetCore.Authentication.JwtBearerStep 2: Configure JWT Authentication in Program.csusing Microsoft.AspNetCore.Authentication.JwtBearer;using Microsoft.IdentityModel.Tokens;using System.Text;var builder = WebApplication.CreateBuilder(args);builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme) .AddJwtBearer(options =&gt; { options.TokenValidationParameters = new TokenValidationParameters { ValidateIssuer = true, ValidateAudience = true, ValidateLifetime = true, ValidateIssuerSigningKey = true, ValidIssuer = builder.Configuration[\"Jwt:Issuer\"], ValidAudience = builder.Configuration[\"Jwt:Audience\"], IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration[\"Jwt:Key\"])) }; });builder.Services.AddAuthorization();var app = builder.Build();app.UseAuthentication();app.UseAuthorization();app.MapControllers();app.Run();Step 3: Generate TokensTypically, you create a token when the user successfully logs in.using System.IdentityModel.Tokens.Jwt;using System.Security.Claims;using Microsoft.IdentityModel.Tokens;using System.Text;public string GenerateJwtToken(string username, string secretKey, string issuer, string audience){ var claims = new[] { new Claim(JwtRegisteredClaimNames.Sub, username), new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()) }; var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey)); var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256); var token = new JwtSecurityToken( issuer, audience, claims, expires: DateTime.Now.AddHours(1), signingCredentials: creds); return new JwtSecurityTokenHandler().WriteToken(token);}Step 4: Protect API EndpointsAdd the [Authorize] attribute to any controller or action you want to secure.using Microsoft.AspNetCore.Authorization;using Microsoft.AspNetCore.Mvc;[ApiController][Route(\"[controller]\")]public class SecureDataController : ControllerBase{ [HttpGet] [Authorize] public IActionResult GetSecureInfo() { return Ok(new { message = \"This is a protected endpoint.\" }); }}Why JWT Security Matters Strong API protection without managing server-side sessions Easily integrates with third-party systems and microservices Supports roles and claims-based access control Widely supported by frontend frameworks, mobile apps, and external clientsBest Practices for JWT in .NET 9 Keep your signing keys secure and rotate them regularly Set appropriate token expiration times Use HTTPS to prevent token interception Store tokens securely on the client side (avoid local storage if possible; prefer secure cookies) Consider using refresh tokens for longer-lived sessionsConclusionJWT is a powerful tool for securing your .NET 9 Web APIs. By following these steps and best practices, you can implement a robust, scalable, and maintainable authentication system for your applications." }, { "title": "How Does .NET Ahead-of-Time (AOT) Compilation Work?", "url": "/posts/how-does-dotnet-aot-compilation-work/", "categories": "ASP.NET Core, .NET Performance", "tags": "dotnet, aot compilation, performance, native compile, optimization", "date": "2025-05-01 12:00:00 +0300", "snippet": "Ahead-of-Time (AOT) compilation is a powerful feature in .NET that allows you to compile your application into native machine code before it runs, improving startup time, reducing memory usage, and...", "content": "Ahead-of-Time (AOT) compilation is a powerful feature in .NET that allows you to compile your application into native machine code before it runs, improving startup time, reducing memory usage, and removing the need for Just-In-Time (JIT) compilation.In this article, we‚Äôll explore what AOT compilation is, how it works in .NET, when to use it, and provide real-world examples and best practices.What Is AOT Compilation?In traditional .NET applications, your code is compiled to Intermediate Language (IL), which is then JIT-compiled to native machine code at runtime.With AOT compilation, the IL code is compiled directly to native binaries before deployment, so no JIT is needed at runtime.‚úÖ Faster startup (no JIT at app launch)‚úÖ Smaller memory footprint (no JIT engine in memory)‚úÖ Reduced attack surface (fewer runtime components)‚úÖ Cross-platform native performanceHow Does It Work in .NET?Starting with .NET 7 and enhanced in .NET 8+, you can publish AOT-compiled apps using:dotnet publish -c Release -p:PublishAOT=trueThis produces a native executable that includes your app, its dependencies, and the .NET runtime ‚Äî all compiled ahead of time.Types of AOT in .NET Type Description ReadyToRun (R2R) Partial AOT; IL + native mix, improves startup Full Native AOT Full AOT; no IL, pure native code, fastest startup Full Native AOT is available in .NET 7+ and is especially useful for microservices, serverless, and CLI tools.When Should You Use AOT?‚úÖ Microservices ‚Äî maximize startup performance in Kubernetes.‚úÖ Serverless functions ‚Äî where cold start time matters.‚úÖ Small CLI tools ‚Äî fast execution, no JIT overhead.‚úÖ Security-sensitive apps ‚Äî reduce attack surface by excluding JIT.How to Enable AOTStep 1: Install .NET 8+Check:dotnet --versionStep 2: Update Project FileIn your .csproj:&lt;PropertyGroup&gt; &lt;PublishAOT&gt;true&lt;/PublishAOT&gt;&lt;/PropertyGroup&gt;Step 3: Publishdotnet publish -c ReleaseThis generates a native executable in bin/Release/net8.0/{runtime}/publish.Example: Hello WorldSimple app:Console.WriteLine(\"Hello, AOT World!\");Publish with:dotnet publish -c Release -r win-x64 -p:PublishAOT=trueYou‚Äôll get a hello.exe or equivalent binary that runs natively.Benefits and Trade-offs‚úÖ Benefits: Blazing-fast startup Lower memory usage No JIT-related runtime costs‚ö† Trade-offs: Larger binaries (everything is baked in) Longer build times Less runtime flexibility (no reflection or dynamic code generation)Limitations of AOTNot all .NET features work seamlessly with AOT:‚ùå Dynamic code (e.g., System.Reflection.Emit)‚ùå Dynamic serialization without trimming‚ùå Plugins loaded dynamically at runtimeYou may need to refactor code or use DynamicDependency and RequiresUnreferencedCode attributes.Real-World Use Cases Cloud microservices needing rapid scale-out Serverless APIs (AWS Lambda, Azure Functions) for minimal cold start Desktop or IoT apps where resources are limited CLI utilities for maximum portability and speedBest Practices‚úÖ Analyze dependencies for AOT compatibility.‚úÖ Enable IL trimming to remove unused code.‚úÖ Use ReadyToRun if full native AOT isn‚Äôt feasible.‚úÖ Test thoroughly ‚Äî AOT changes runtime behavior.‚úÖ Monitor binary size vs. performance improvements.Summary.NET‚Äôs Ahead-of-Time (AOT) compilation lets you deliver native, high-performance apps with minimal runtime overhead. By mastering AOT, you can optimize startup, reduce resource usage, and build apps ready for modern cloud and edge environments." }, { "title": "What are High-Value Customers? How to Find Them Using SQL", "url": "/posts/what-are-high-value-customers-how-to-find-them-using-sql/", "categories": "SQL, Data Analysis", "tags": "sql, high-value customers, data queries, aggregate functions, business insights", "date": "2025-04-30 12:00:00 +0300", "snippet": "In today‚Äôs data-driven businesses, identifying high-value customers is critical for marketing, sales, and retention strategies. But how can we systematically identify these customers from raw trans...", "content": "In today‚Äôs data-driven businesses, identifying high-value customers is critical for marketing, sales, and retention strategies. But how can we systematically identify these customers from raw transaction data? In this article, we will explore how to use SQL queries to identify top-tier customers who generate the most revenue.Why High-Value Customers MatterHigh-value customers often: Generate the majority of a company‚Äôs revenue Show consistent repeat purchases Are more receptive to upsell and loyalty programsKnowing who they are allows businesses to: Offer targeted promotions Provide personalized support Allocate marketing resources efficientlySQL Scenario: Northwind DatabaseWe will use the Northwind sample database, focusing on orders from 2016. Our goal: find customers who placed orders totaling $15,000 or more in 2016.Step 1: Understand the TablesWe need three main tables: Customers ‚Üí customer details Orders ‚Üí order details, including date OrderDetails ‚Üí individual product prices and quantities per orderStep 2: Write the Base QueryFirst, pull all relevant order data:SELECT Customers.CustomerID, Customers.CompanyName, Orders.OrderID, SUM(OrderDetails.Quantity * OrderDetails.UnitPrice) AS TotalOrderAmountFROM CustomersJOIN Orders ON Orders.CustomerID = Customers.CustomerIDJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderIDWHERE OrderDate &gt;= '2016-01-01' AND OrderDate &lt; '2017-01-01'GROUP BY Customers.CustomerID, Customers.CompanyName, Orders.OrderIDHAVING SUM(OrderDetails.Quantity * OrderDetails.UnitPrice) &gt;= 10000ORDER BY TotalOrderAmount DESC;This query finds individual orders over $10,000.Step 3: Aggregate Per CustomerInstead of per order, sum all orders per customer:SELECT Customers.CustomerID, Customers.CompanyName, SUM(OrderDetails.Quantity * OrderDetails.UnitPrice) AS TotalOrderAmountFROM CustomersJOIN Orders ON Orders.CustomerID = Customers.CustomerIDJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderIDWHERE OrderDate &gt;= '2016-01-01' AND OrderDate &lt; '2017-01-01'GROUP BY Customers.CustomerID, Customers.CompanyNameHAVING SUM(OrderDetails.Quantity * OrderDetails.UnitPrice) &gt;= 15000ORDER BY TotalOrderAmount DESC;This identifies top customers by total 2016 spend.Step 4: Including DiscountsTo account for discounts, adjust the calculation:SELECT Customers.CustomerID, Customers.CompanyName, SUM(OrderDetails.Quantity * OrderDetails.UnitPrice * (1 - OrderDetails.Discount)) AS TotalOrderAmountWithDiscountFROM CustomersJOIN Orders ON Orders.CustomerID = Customers.CustomerIDJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderIDWHERE OrderDate &gt;= '2016-01-01' AND OrderDate &lt; '2017-01-01'GROUP BY Customers.CustomerID, Customers.CompanyNameHAVING SUM(OrderDetails.Quantity * OrderDetails.UnitPrice * (1 - OrderDetails.Discount)) &gt;= 15000ORDER BY TotalOrderAmountWithDiscount DESC;Now you are factoring in realized revenue after discounts.Best Practices Use indexes on date and customer fields for performance Consider excluding canceled or returned orders Combine with customer metadata for deeper segmentation (e.g., region, industry) Automate reporting for monthly or quarterly updatesFinal ThoughtsIdentifying high-value customers is a powerful way to focus business efforts where they matter most. With well-constructed SQL queries, you can extract these insights directly from your database and make data-driven decisions." }, { "title": "Understanding Dependency Injection in .NET", "url": "/posts/understanding-dependency-injection-in-dotnet/", "categories": "ASP.NET Core, Design Patterns, .NET", "tags": "dependency injection, dotnet, ioc, services, design patterns", "date": "2025-04-30 12:00:00 +0300", "snippet": "Dependency Injection (DI) is a fundamental design pattern in modern .NET development. It allows you to write loosely coupled, maintainable, and testable code by providing dependencies to classes fr...", "content": "Dependency Injection (DI) is a fundamental design pattern in modern .NET development. It allows you to write loosely coupled, maintainable, and testable code by providing dependencies to classes from an external source rather than having them create or manage those dependencies themselves.In this article, we‚Äôll explore what DI is, why it‚Äôs important, how it works in .NET, and walk through hands-on examples and best practices.What Is Dependency Injection?Dependency Injection is a technique where a class receives the services or objects it depends on (its dependencies) from an external system, instead of instantiating them directly.For example, rather than doing this:public class OrderService{ private readonly PaymentService _paymentService = new PaymentService();}You do this:public class OrderService{ private readonly PaymentService _paymentService; public OrderService(PaymentService paymentService) { _paymentService = paymentService; }}Now OrderService depends on an injected PaymentService.Why Use DI?‚úÖ Loose coupling ‚Äî classes are not tightly bound to specific implementations.‚úÖ Easier testing ‚Äî inject mock or stub services in unit tests.‚úÖ Better maintainability ‚Äî replace implementations without changing dependent code.‚úÖ Centralized configuration ‚Äî control lifetimes and setups in one place.DI in .NETASP.NET Core has built-in dependency injection support via the built-in IoC (Inversion of Control) container.You register services in Program.cs:builder.Services.AddTransient&lt;IMyService, MyService&gt;();And inject them where needed:public class MyController : ControllerBase{ private readonly IMyService _service; public MyController(IMyService service) { _service = service; }}Service Lifetimes Lifetime Description Transient New instance every time requested Scoped One instance per request (for web apps) Singleton Single instance shared for the lifetime of the app Example:builder.Services.AddSingleton&lt;ISingletonService, SingletonService&gt;();builder.Services.AddScoped&lt;IScopedService, ScopedService&gt;();builder.Services.AddTransient&lt;ITransientService, TransientService&gt;();Hands-On ExampleStep 1: Define an Interfacepublic interface IMessageService{ string GetMessage();}Step 2: Implement the Servicepublic class HelloWorldMessageService : IMessageService{ public string GetMessage() =&gt; \"Hello, Dependency Injection!\";}Step 3: Register and Injectbuilder.Services.AddScoped&lt;IMessageService, HelloWorldMessageService&gt;();In a controller or Razor Page:public class HomeController : Controller{ private readonly IMessageService _messageService; public HomeController(IMessageService messageService) { _messageService = messageService; } public IActionResult Index() { ViewBag.Message = _messageService.GetMessage(); return View(); }}Constructor Injection vs. Alternatives‚úÖ Constructor injection ‚Äî most common and recommended.‚úÖ Property injection ‚Äî for optional dependencies.‚úÖ Method injection ‚Äî pass dependencies via method parameters.Example of property injection:public IOptionalService OptionalService { get; set; }Testing with Dependency InjectionDI makes testing easier by allowing you to inject mocks.Example with Moq:var mock = new Mock&lt;IMessageService&gt;();mock.Setup(s =&gt; s.GetMessage()).Returns(\"Test Message\");var controller = new HomeController(mock.Object);Now you can test without touching the real implementation.Best Practices‚úÖ Always program against interfaces, not concrete classes.‚úÖ Keep services stateless unless they are singletons.‚úÖ Register services at the correct lifetime.‚úÖ Avoid service locator anti-pattern (i.e., avoid pulling services manually from IServiceProvider).‚úÖ Use DI even in non-ASP.NET Core apps by wiring up IServiceCollection manually.SummaryDependency Injection is a cornerstone of modern .NET application design, promoting loose coupling, testability, and maintainability. By mastering DI, you set the foundation for building scalable and robust applications that are easy to evolve and maintain over time." }, { "title": "What is SQL Window Function? How to Use It in Analysis", "url": "/posts/what-is-sql-window-function-how-to-use-it-in-analysis/", "categories": "SQL, Data Analysis", "tags": "sql, window functions, ranking, analytics, advanced queries", "date": "2025-04-29 12:00:00 +0300", "snippet": "SQL window functions (also called analytic functions) are powerful tools for performing calculations across rows that are related to the current row, without collapsing the result set like GROUP BY...", "content": "SQL window functions (also called analytic functions) are powerful tools for performing calculations across rows that are related to the current row, without collapsing the result set like GROUP BY. They are widely used in reporting, ranking, and trend analysis.Why Use Window Functions?Window functions let you: Calculate running totals or moving averages Rank rows within partitions Compare each row to overall aggregates (like average or max) Assign row numbers based on custom orderingThis enables advanced insights that are difficult or impossible with simple aggregate queries.Basic SyntaxSELECT column1, column2, SUM(amount) OVER (PARTITION BY category ORDER BY date) AS running_totalFROM sales;Key parts: OVER() ‚Üí defines the window PARTITION BY ‚Üí groups data within the window ORDER BY ‚Üí defines row order inside each partitionExample: Ranking Customers by SalesImagine you want to rank customers by their total purchase amount.SELECT CustomerID, CompanyName, SUM(Quantity * UnitPrice) AS TotalSales, RANK() OVER (ORDER BY SUM(Quantity * UnitPrice) DESC) AS SalesRankFROM CustomersJOIN Orders ON Orders.CustomerID = Customers.CustomerIDJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderIDGROUP BY CustomerID, CompanyName;This gives you: Total sales per customer Their rank compared to othersExample: Calculating Running TotalsYou can track how sales accumulate over time.SELECT OrderDate, SUM(Quantity * UnitPrice) OVER (ORDER BY OrderDate ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RunningTotalFROM OrdersJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID;Common Window Functions ROW_NUMBER() ‚Üí unique row sequence RANK() ‚Üí rank with gaps DENSE_RANK() ‚Üí rank without gaps LEAD() / LAG() ‚Üí look ahead or behind NTILE(n) ‚Üí divide rows into n equal partsBest Practices Use PARTITION BY carefully to group logically Watch performance on large datasets; indexes help Combine with CTEs (Common Table Expressions) for clearer structure Remember window functions do not filter rows; use WHERE or QUALIFYSQL window functions transform how you analyze and understand data, enabling richer, more detailed insights that go beyond basic aggregates." }, { "title": "What is SQL Query Optimization? How to Use It for Faster Databases", "url": "/posts/what-is-sql-query-optimization-how-to-use-it-for-faster-databases/", "categories": "SQL", "tags": "query optimization", "date": "2025-04-28 12:00:00 +0300", "snippet": "SQL query optimization is one of the most important topics in database performance tuning. When databases grow large, even well-written queries can become slow, especially under heavy user load. Op...", "content": "SQL query optimization is one of the most important topics in database performance tuning. When databases grow large, even well-written queries can become slow, especially under heavy user load. Optimizing SQL queries can dramatically improve application speed, reduce server costs, and provide a better user experience.In this article, we will explore what SQL query optimization is, why it matters, and how you can apply effective strategies to make your SQL queries run faster and more efficiently.Why SQL Query Optimization MattersDatabases are at the core of most applications. Slow SQL queries can cause: Long page load times Frustrated users High infrastructure costs due to resource wasteEfficient queries ensure: Faster data retrieval Lower CPU and memory usage Scalable systems that handle more usersCommon Causes of Slow SQL QueriesBefore you optimize, you need to understand why queries slow down. Common causes include: Missing indexes on frequently searched columns SELECT * instead of selecting only necessary columns Unnecessary joins or subqueries Non-sargable WHERE clauses (using functions on indexed columns) Retrieving too much data (large result sets)Essential Techniques for SQL Query Optimization1. Use Proper IndexingIndexes are like lookup tables that speed up data retrieval. Without them, databases perform full table scans.Example:CREATE INDEX idx_customer_email ON Customers(Email);With this index, queries filtering by email run significantly faster.2. Avoid SELECT *Instead of:SELECT * FROM Orders;use:SELECT OrderID, CustomerID, OrderDate FROM Orders;This reduces the amount of data transferred and processed.3. Use WHERE Clauses EfficientlyWrite sargable queries ‚Äî queries that can use indexes effectively.Bad:WHERE YEAR(OrderDate) = 2024;Better:WHERE OrderDate &gt;= '2024-01-01' AND OrderDate &lt; '2025-01-01';4. Optimize JoinsOnly join necessary tables and ensure join keys are indexed.Example:SELECT c.CustomerName, o.OrderIDFROM Customers cJOIN Orders o ON c.CustomerID = o.CustomerIDWHERE c.Country = 'USA';5. Limit Result SetsWhen you only need a few rows, use LIMIT or TOP.Example (SQL Server):SELECT TOP 10 * FROM Orders ORDER BY OrderDate DESC;Example (MySQL):SELECT * FROM Orders ORDER BY OrderDate DESC LIMIT 10;Advanced TechniquesUse Execution PlansMost database systems (SQL Server, PostgreSQL, MySQL) provide execution plans to show how queries are processed. Look for: Table scans (slow) Index seeks (fast) Expensive joins or sortsRewrite Subqueries as JoinsSometimes replacing a correlated subquery with a join improves performance.Example:SELECT c.CustomerNameFROM Customers cWHERE EXISTS ( SELECT 1 FROM Orders o WHERE o.CustomerID = c.CustomerID);can become:SELECT DISTINCT c.CustomerNameFROM Customers cJOIN Orders o ON c.CustomerID = o.CustomerID;Partition Large TablesFor huge tables, consider partitioning to improve performance on queries scanning only part of the data.Best Practices Regularly analyze slow queries with tools like EXPLAIN or SQL Server Profiler Monitor query performance over time Avoid unnecessary computations inside queries Use caching where possible for frequently accessed data Work with database administrators (DBAs) for large-scale optimizationsExample Case StudyA company noticed their product listing page was slow. Investigation revealed this query:SELECT * FROM Products WHERE Category = 'Electronics';The Category column had no index, and the table had 1 million rows. After adding an index:CREATE INDEX idx_products_category ON Products(Category);the query time dropped from 2.5 seconds to 0.05 seconds ‚Äî a 50x improvement.Final ThoughtsSQL query optimization is a critical part of building high-performance applications. By understanding indexing, efficient query design, execution plans, and advanced techniques, you can dramatically improve your database‚Äôs speed and reliability.Apply these practices to your projects, and you‚Äôll see faster pages, happier users, and reduced hardware costs." }, { "title": "Fetch - HTTP POST Request Examples", "url": "/posts/fetch_http_post_examples/", "categories": "JavaScript, Web Development", "tags": "fetch api, http post, javascript, frontend, api integration", "date": "2025-04-15 12:00:00 +0300", "snippet": "The Fetch API is a modern, promise-based approach to making HTTP requests in JavaScript. One of the most common tasks developers face is sending HTTP POST requests to APIs ‚Äî whether for submitting ...", "content": "The Fetch API is a modern, promise-based approach to making HTTP requests in JavaScript. One of the most common tasks developers face is sending HTTP POST requests to APIs ‚Äî whether for submitting forms, sending JSON data, or interacting with backend services.This guide provides practical examples for using Fetch to make POST requests, helping you confidently integrate APIs into your applications.What is the Fetch API?The Fetch API provides a simple interface for fetching resources over the network. Unlike the older XMLHttpRequest, it uses Promises, making the code cleaner and easier to work with.Basic POST Request ExampleHere‚Äôs how to send a simple POST request with JSON data:fetch('https://example.com/api/data', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name: 'John Doe', email: 'john@example.com' })}).then(response =&gt; response.json()).then(data =&gt; console.log('Success:', data)).catch(error =&gt; console.error('Error:', error));Breakdown: method: Specifies the HTTP method (POST). headers: Defines content type (usually application/json). body: Contains the request payload (JSON.stringify converts the object). .then(): Handles the response. .catch(): Catches any network or parsing errors.Posting Form DataSometimes you need to send data as form-encoded, like when submitting HTML forms:const formData = new URLSearchParams();formData.append('username', 'johndoe');formData.append('password', 'mypassword');fetch('https://example.com/login', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: formData.toString()}).then(response =&gt; response.json()).then(data =&gt; console.log('Logged in:', data)).catch(error =&gt; console.error('Error:', error));Handling HTTP Status CodesYou should always check if the response was successful:fetch('https://example.com/api', options) .then(response =&gt; { if (!response.ok) { throw new Error(`HTTP error! Status: ${response.status}`); } return response.json(); }) .then(data =&gt; console.log(data)) .catch(error =&gt; console.error('Request failed:', error));Sending Custom HeadersIf the API requires authentication (like a bearer token):fetch('https://example.com/api/secure', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer your-token-here' }, body: JSON.stringify({ message: 'Hello' })}).then(response =&gt; response.json()).then(data =&gt; console.log('Secure response:', data)).catch(error =&gt; console.error('Error:', error));Best Practices‚úÖ Always handle .catch() to avoid unhandled promise rejections.‚úÖ Check .ok or response.status before assuming success.‚úÖ Sanitize user inputs before sending them.‚úÖ Keep sensitive keys or tokens out of client-side code when possible.SummaryThe Fetch API makes it straightforward to send HTTP POST requests, whether you‚Äôre sending JSON, form data, or authenticated requests. Mastering it helps you build powerful integrations between your frontend and backend systems.For more advanced use cases (like file uploads or streaming responses), explore the full Fetch documentation." }, { "title": "What‚Äôs New in C# 12? Exploring the Latest Features", "url": "/posts/whats-new-in-csharp-12/", "categories": "C#, .NET, Language Features", "tags": "csharp 12, new features, dotnet, language updates, productivity", "date": "2025-01-10 12:00:00 +0300", "snippet": "C# 12, released alongside .NET 8, introduces several exciting new features that enhance developer productivity, improve code expressiveness, and simplify common patterns. Whether you‚Äôre building en...", "content": "C# 12, released alongside .NET 8, introduces several exciting new features that enhance developer productivity, improve code expressiveness, and simplify common patterns. Whether you‚Äôre building enterprise applications or working on smaller projects, these features can help you write cleaner, more maintainable code.In this article, we‚Äôll walk through the key highlights of C# 12, explain when and why to use them, and provide practical examples.1Ô∏è‚É£ Primary Constructors for Non-Record TypesPreviously, primary constructors were available only for record types. With C# 12, they now work on classes and structs.Example:public class Person(string name, int age){ public void Introduce() =&gt; Console.WriteLine($\"Hi, I'm {name}, {age} years old.\");}Why it matters:‚úÖ Less boilerplate code‚úÖ Cleaner constructor-based initialization‚úÖ Improves readability, especially for simple data holders2Ô∏è‚É£ Collection ExpressionsC# 12 introduces collection expressions (similar to array and collection literals) to simplify collection creation.Example:var numbers = [1, 2, 3, 4];var moreNumbers = [..numbers, 5, 6];Why it matters:‚úÖ Create arrays, lists, and spans using a uniform, concise syntax‚úÖ Use the spread operator (..) to include elements from other collections3Ô∏è‚É£ Default Lambda ParametersYou can now define default parameter values in lambda expressions.Example:Func&lt;int, int, int&gt; add = (x, y = 10) =&gt; x + y;Console.WriteLine(add(5)); // Outputs 15Console.WriteLine(add(5, 20)); // Outputs 25Why it matters:‚úÖ More flexible lambdas‚úÖ Closer parity with method declarations4Ô∏è‚É£ Using Aliases for Any TypeC# 12 expands using alias declarations to support any type, including tuples and array types.Example:using MyTuple = (int Id, string Name);MyTuple person = (1, \"Alice\");Why it matters:‚úÖ Makes complex types more readable‚úÖ Improves maintainability in large codebases5Ô∏è‚É£ Inline ArraysInline arrays let you define fixed-size arrays inside a struct, improving performance by avoiding heap allocations.Example:[InlineArray(10)]public struct SmallBuffer{ private int _element0;}Why it matters:‚úÖ Avoids allocations on the heap‚úÖ Useful in performance-critical scenarios like game development or low-level networkingAdditional Improvements nameof in attributes: Use nameof expressions inside attribute arguments. Interpolated string handlers: Further performance optimizations. Better params support: More flexible parameter lists.Best Practices‚úÖ Use primary constructors for simple, immutable objects.‚úÖ Apply collection expressions to reduce clutter when building lists or arrays.‚úÖ Adopt default lambda parameters carefully to maintain code clarity.‚úÖ Use type aliases to simplify complex declarations.‚úÖ Benchmark inline arrays before using them in performance-sensitive code.SummaryC# 12 introduces several enhancements that streamline daily coding tasks, improve performance, and reduce boilerplate. By learning and integrating these features, you can make your .NET applications cleaner, faster, and more maintainable.Make sure to update your SDK and compiler to start experimenting with these features in your projects!" }, { "title": "The Latest Trends in Software Development Technologies to Watch in 2025", "url": "/posts/latest_trends_software_development_2025/", "categories": "Software Developement", "tags": "software development", "date": "2025-01-09 08:33:00 +0300", "snippet": "In a rapidly advancing world, keeping up with current trends is crucial for software developers. As of 2025, we will explore the leading trends in the software world and the opportunities these tec...", "content": "In a rapidly advancing world, keeping up with current trends is crucial for software developers. As of 2025, we will explore the leading trends in the software world and the opportunities these technologies provide for developers.1. Artificial Intelligence and Machine LearningArtificial intelligence (AI) and machine learning (ML) remain at the core of software projects. Open-source AI models and cloud AI services make it easier for developers to integrate these technologies. Natural language processing technologies like ChatGPT are widely used in customer service and content creation. Why It Matters?AI can be used to create personalized applications.Efficiency in business processes can be increased. Tools:TensorFlowPyTorchOpenAI API2. Cloud-Native ArchitecturesCloud-native technologies make applications more flexible and scalable. Tools like Kubernetes and Docker have standardized microservices architectures in modern software projects. Why It Matters?Speeds up development and deployment processes.Reduces infrastructure costs. Tools:KubernetesHelmDockerEdge ComputingProcessing data on devices closer to the user instead of central servers reduces latency and integrates better with IoT devices. Edge computing has become indispensable for IoT projects. Why It Matters?Real-time data collection and processing from IoT devices.Reduces data privacy and latency issues. Tools:AWS IoT GreengrassAzure IoT EdgeGoogle Edge TPUBlockchain and Smart ContractsBlockchain technology is not limited to cryptocurrencies. Smart contracts provide transparent and automated process execution, widely used in logistics, finance, and law. Why It Matters?Secure due to its decentralized structure.Enables automated and paperless transactions. Tools:SolidityHyperledgerEthereumHuman-Computer Interaction (HCI)With the development of Metaverse and AR/VR technologies, interest in Human-Computer Interaction (HCI) is growing. Interfaces that combine real-world and digital experiences are becoming prominent in next-generation applications. Why It Matters?Completely transforms user experience.Offers new market opportunities. Tools:UnityUnreal EngineWebXRConclusionIn 2025, these trends are crucial for software developers to stand out in their projects and remain competitive. Working with the technologies mentioned above provides an excellent opportunity to enhance your career and create innovative projects." }, { "title": "A Comprehensive Guide to HTTP POST Requests in React Using Fetch", "url": "/posts/a-comprehensive-guide-to-http-post-requests-in-react-using-fetch/", "categories": "React, HTTP POST Fetch", "tags": "react, fetch, http post", "date": "2024-07-29 08:33:00 +0300", "snippet": "When working with React, one common task is to communicate with a server through HTTP requests. Fetch is a modern, promise-based API that makes this process straightforward. In this post, we‚Äôll exp...", "content": "When working with React, one common task is to communicate with a server through HTTP requests. Fetch is a modern, promise-based API that makes this process straightforward. In this post, we‚Äôll explore how to perform HTTP POST requests in React using Fetch, complete with practical examples.Introduction to Fetch APIThe Fetch API provides a simple interface for fetching resources. It‚Äôs a more powerful and flexible replacement for XMLHttpRequest`. The main features of Fetch are: Simple and clean API Supports promises Built-in support for handling various data formats (e.g., JSON) Browser compatibility (modern browsers)Setting Up a React ProjectBefore diving into the code, ensure you have a React project set up. If you don‚Äôt have one yet, you can create it using create-react-app:npx create-react-app react-fetch-postcd react-fetch-postnpm startBasic POST Request with FetchTo send a POST request using Fetch, you need to specify the method, headers, and body of the request. Here‚Äôs a basic example:import React, { useState } from 'react';const App = () =&gt; { const [data, setData] = useState({ name: '', age: '' }); const [response, setResponse] = useState(null); const handleChange = (e) =&gt; { const { name, value } = e.target; setData({ ...data, [name]: value, }); }; const handleSubmit = async (e) =&gt; { e.preventDefault(); try { const res = await fetch('https://jsonplaceholder.typicode.com/posts', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(data), }); const result = await res.json(); setResponse(result); } catch (error) { console.error('Error:', error); } }; return ( &lt;div&gt; &lt;h1&gt;POST Request with Fetch&lt;/h1&gt; &lt;form onSubmit={handleSubmit}&gt; &lt;input type=\"text\" name=\"name\" value={data.name} onChange={handleChange} placeholder=\"Name\" /&gt; &lt;input type=\"text\" name=\"age\" value={data.age} onChange={handleChange} placeholder=\"Age\" /&gt; &lt;button type=\"submit\"&gt;Submit&lt;/button&gt; &lt;/form&gt; {response &amp;&amp; ( &lt;div&gt; &lt;h2&gt;Response&lt;/h2&gt; &lt;pre&gt;{JSON.stringify(response, null, 2)}&lt;/pre&gt; &lt;/div&gt; )} &lt;/div&gt; );};export default App;Handling ResponsesIn the above example, after the POST request is sent, the response is handled by converting it to JSON and setting it in the component state. You can then render this response in your component.Error HandlingProper error handling is crucial for a robust application. Here‚Äôs how you can handle errors in the fetch request:const handleSubmit = async (e) =&gt; { e.preventDefault(); try { const res = await fetch('https://jsonplaceholder.typicode.com/posts', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(data), }); if (!res.ok) { throw new Error('Network response was not ok'); } const result = await res.json(); setResponse(result); } catch (error) { console.error('Error:', error); setResponse({ error: 'An error occurred. Please try again.' }); }};Advanced POST Request ExamplesSending Form DataIf you need to send form data (e.g., for file uploads), you can use the FormData API:const handleSubmit = async (e) =&gt; { e.preventDefault(); const formData = new FormData(); formData.append('name', data.name); formData.append('age', data.age); try { const res = await fetch('https://jsonplaceholder.typicode.com/posts', { method: 'POST', body: formData, }); if (!res.ok) { throw new Error('Network response was not ok'); } const result = await res.json(); setResponse(result); } catch (error) { console.error('Error:', error); setResponse({ error: 'An error occurred. Please try again.' }); }};Handling AuthenticationFor authenticated requests, include the authorization token in the headers:const handleSubmit = async (e) =&gt; { e.preventDefault(); try { const res = await fetch('https://jsonplaceholder.typicode.com/posts', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer YOUR_TOKEN_HERE', }, body: JSON.stringify(data), }); if (!res.ok) { throw new Error('Network response was not ok'); } const result = await res.json(); setResponse(result); } catch (error) { console.error('Error:', error); setResponse({ error: 'An error occurred. Please try again.' }); }};" }, { "title": "What is Rate Limit? How to use in .NET 8?", "url": "/posts/what-is-rate-limit-dotnet-8/", "categories": "ASP.NET CORE, Rate Limit", "tags": "rate limit, .NET 8", "date": "2024-03-04 08:33:00 +0300", "snippet": "Rate limiting restricts the number of requests a client can make to an API endpoint. By doing so, it prevents abuse, protects resources, and maintains system stability. There are various rate limit...", "content": "Rate limiting restricts the number of requests a client can make to an API endpoint. By doing so, it prevents abuse, protects resources, and maintains system stability. There are various rate limiting algorithms, but we‚Äôll focus on two common ones: Fixed Window and Sliding Window.Fixed Window Rate LimitingIn .NET 8, the Rate Limiter middleware provides a way to control the rate at which requests are processed by your application. One of the rate limiting algorithms available is the Fixed Window Limiter. Let‚Äôs dive into the details: This algorithm uses a fixed time window to limit requests. When the time window expires, a new window starts, and the request limit is reset. Here‚Äôs an example of how to configure it in your ASP.NET Core app:using Microsoft.AspNetCore.RateLimiting;using System.Threading.RateLimiting;var builder = WebApplication.CreateBuilder(args);builder.Services.AddRateLimiter(_ =&gt; _.AddFixedWindowLimiter(policyName: \"fixed\", options =&gt;{ options.PermitLimit = 4; // Maximum 4 requests per 12-second window options.Window = TimeSpan.FromSeconds(12); options.QueueProcessingOrder = QueueProcessingOrder.OldestFirst; options.QueueLimit = 2;}));builder.Services.AddControllers();builder.Services.AddEndpointsApiExplorer();builder.Services.AddSwaggerGen();var app = builder.Build();app.UseRateLimiter();if (app.Environment.IsDevelopment()){ app.UseSwagger(); app.UseSwaggerUI();}app.UseAuthorization();app.MapControllers().RequireRateLimiting(\"fixed\");app.Run();In this example: We add a rate limiting service using AddRateLimiter. The fixed window limiter is configured with a policy name of fixed. It allows a maximum of 4 requests per 12-second window. The queue processing order is set to oldest first, and the queue limit is 2.Sliding Window Rate LimitingIn .NET 8, the Rate Limiter middleware offers several algorithms to control the rate at which requests are processed by your application. One of these algorithms is the Sliding Window Limiter. Let‚Äôs explore its details: This algorithm is similar to the fixed window limiter but with a twist. Instead of resetting the request limit at the end of a fixed time window, the sliding window limiter slides the maximum allowed requests through defined segments. It provides more flexibility by allowing requests to be distributed across the entire time window. Here‚Äôs an example of how to configure it in your ASP.NET Core app:using Microsoft.AspNetCore.RateLimiting;using System.Threading.RateLimiting;var builder = WebApplication.CreateBuilder(args);builder.Services.AddRateLimiter(_ =&gt; _.AddSlidingWindowLimiter(policyName: \"sliding\", options =&gt;{ options.PermitLimit = 10; // Maximum 10 requests per sliding window options.Window = TimeSpan.FromMinutes(1); // 1-minute sliding window options.QueueProcessingOrder = QueueProcessingOrder.OldestFirst; options.QueueLimit = 5;}));builder.Services.AddControllers();builder.Services.AddEndpointsApiExplorer();builder.Services.AddSwaggerGen();var app = builder.Build();app.UseRateLimiter();if (app.Environment.IsDevelopment()){ app.UseSwagger(); app.UseSwaggerUI();}app.UseAuthorization();app.MapControllers().RequireRateLimiting(\"sliding\");app.Run();In this example: We add a rate limiting service using AddRateLimiter. The sliding window limiter is configured with a policy name of sliding. It allows a maximum of 10 requests per 1-minute sliding window. The queue processing order is set to oldest first, and the queue limit is 5." }, { "title": "Dependency Injection and Lifecycle in .NET 8", "url": "/posts/dependency-injection-and-lifecycle-in-dotnet-8/", "categories": "ASP.NET CORE, Dependency Injection", "tags": "dependency injection, .NET 8, service lifetime, inversion of control, DI Container", "date": "2024-02-07 08:33:00 +0300", "snippet": "Hello, in this article I will examine the Dependency Injection (DI) technique, which is a software design pattern that provides Inversion of Control (IoC) between classes and dependencies in .NET 8...", "content": "Hello, in this article I will examine the Dependency Injection (DI) technique, which is a software design pattern that provides Inversion of Control (IoC) between classes and dependencies in .NET 8. First, let‚Äôs examine what Inversion of Control (IoC) is.What is Inversion of Control (IoC)?IoC is a software design principle. This principle aims to make the code more flexible, manageable and easier to maintain by regulating the configuration and operation of a software application.With IoC, the management and dependencies of objects within the application are done by the framework. IoC application method Dependency Injection (DI) is the most important part of .NET 8..NET 8 offers many features for the Dependency Injection (DI) mechanism. Let‚Äôs examine these features by adding new classes.namespace DependencyExample{ public interface IMyService { void Run(); } public class MyService : IMyService { public void Run() { Console.WriteLine(\"MyService ......\"); } } public class OtherMyService : IMyService { public void Run() { Console.WriteLine(\"OtherMyService ......\"); } }}What is the difference between the GetRequiredService and GetService methods?The IServiceProvider interface has GetRequiredService and GetService methods. The most important difference between these two methods is that the GetRequriedService method throws an error when the service is not found, but the GetService method returns null value.//builder.Services.AddSingleton&lt;IMyService, MyService&gt;();What is the difference between the GetKeyedService and GetRequiredKeyedService methods?GetKeyedService and GetRequiredKeyedService are two methods added to the IServiceProvider interface to use the keyed service feature, which is a new feature that comes with .NET 8. These methods allow you to define and resolve services not only by service type, but also by a key. The key to be defined can be of string or enum type. However, we can also define any object as a key. Thanks to the key definitions, we can distinguish different services with the same service type according to their keys and get the service we want. The GetKeyedService method returns null value if the keyed service is not found. The GetRequiredKeyedService method gives an InvalidOperationException error if the keyed service is not found.builder.Services.AddKeyedSingleton&lt;IMyService, MyService&gt;(\"GETKEY\");//builder.Services.AddKeyedSingleton&lt;IMyService, OtherMyService&gt;(\"GETREQKEY\");What is Dependency Injection (DI)?Dependency injection (DI) is a software design pattern that is used to access configured services. This pattern delegates the creation and management of a class‚Äôs dependencies to an external entity, known as an IoC (Inversion of Control) container. This way, loose coupling is achieved between classes and the code becomes more modular, easy to maintain and testable.It uses an interface or a base class to abstract the dependency implementation.It registers the dependency in a service container. .NET 8 provides a service container named IServiceProvider. Services are usually added to the IServiceCollection at the start of the application.It injects the dependency into the constructor of the class that uses it. The framework takes the responsibility of creating and disposing of an instance of the dependency when it is no longer needed.Advantages of dependency injection Classes do not need to know how their dependencies are created or configured. Classes are not dependent on the concrete implementations of their dependencies, which increases testability and flexibility. Classes require minimal code changes to change or reuse their dependencies. Dependencies are managed in a single place throughout the application‚Äôs lifetime and are disposed of when needed.What are DI life cycles? Transient: It creates a new service instance for each request. This ensures that the service is different for each user or each operation. Transient services are registered with the AddTransient method. Scoped: It creates a new service instance for each scope. A scope is usually a web request or a unit of work. Scoped services share the same instance when they are requested repeatedly in the same scope. Scoped services are registered with the AddScoped method. Singleton: It creates a single service instance throughout the application and uses it everywhere. Singleton services are created when the application starts or on the first request. Singleton services are registered with the AddSingleton method.builder.Services.AddTransient&lt;TransientService&gt;();builder.Services.AddScoped&lt;ScopedService&gt;();builder.Services.AddSingleton&lt;SingletonService&gt;();using Microsoft.AspNetCore.Mvc;using Microsoft.Extensions.DependencyInjection;namespace DependencyExample.Controllers{ [ApiController] [Route(\"[controller]\")] public class WeatherForecastController : ControllerBase { private readonly IMyService _transientService; private readonly IMyService _scopedService; private readonly IMyService _singletonService; public WeatherForecastController(IServiceProvider serviceProvider) { _transientService = serviceProvider.GetRequiredService&lt;TransientService&gt;(); _scopedService = serviceProvider.GetRequiredService&lt;ScopedService&gt;(); _singletonService = serviceProvider.GetRequiredService&lt;SingletonService&gt;(); } [HttpGet] public ActionResult&lt;IEnumerable&lt;string&gt;&gt; Get() { // Servislerin ID'lerini d√∂nd√ºr return new string[] { $\"Transient: {_transientService.Id}\", $\"Scoped: {_scopedService.Id}\", $\"Singleton: {_singletonService.Id}\" }; } }}As we can see when we test it on Swagger, Transient service creates a new instance for each request. Therefore, it has a different ID value for each page refresh. Scoped service creates a new instance for each scope. A scope is usually a web request or a unit of work. Scoped services share the same ID value for the requests in the same scope. Therefore, it has the same ID value for the same page refresh. Singleton service creates a single instance throughout the application and uses it everywhere. Therefore, it has the same ID value for each page refresh.See you in the next article." }, { "title": "ASP.NET Core Http Security Header", "url": "/posts/asp-net-core-http-security-header/", "categories": "ASP.NET CORE", "tags": "asp.net core, web api, middleware, net 6.0", "date": "2024-01-09 13:33:00 +0300", "snippet": "Let‚Äôs examine how the Http Security Header structure is used on .NET Core in a sample ASP.NET Core project. First we will create a blank web project.dotnet new web -o httpsecurityheaderAfter creati...", "content": "Let‚Äôs examine how the Http Security Header structure is used on .NET Core in a sample ASP.NET Core project. First we will create a blank web project.dotnet new web -o httpsecurityheaderAfter creating the project, let‚Äôs examine the security headers.X-Frame-OptionsThe X-Frame-Options header option is used to call your web page, called Clickjacking, on another web page with the iframe method and prevent any action.DENY: It completely prevents the page from being called in an iframe.SAMEORIGIN: It prevents the page from being called in an iframe outside of its domain.ALLOW-FROM uri : Allows calling from a specific url in an iframe.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"X-Frame-Options\", \"DENY\"); await next();});Note: According to the information here, X-Frame-Options header information is created as SAMEORIGIN by default.To remove the X-Frame-Options header information, the AddAntiforgery method should be done as follows.builder.Services.AddAntiforgery(x =&gt;{ x.SuppressXFrameOptionsHeader = true;});Strict-Transport-SecurityIt is used to prevent man-in-the-middle (MITM) attacks and automatically convert HTTP requests made by the client to HTTPS. It is used with the UseHsts middleware structure in .NET Core projects.app.UseHsts();The use of HSTS is not recommended in development environments due to browser caching.We can use the AddHSTS method for HSTS configuration.builder.Services.AddHsts(x =&gt;{ x.Preload = true; x.IncludeSubDomains = true; x.MaxAge = TimeSpan.FromDays(60); x.ExcludedHosts.Add(\"example.com\"); x.ExcludedHosts.Add(\"www.example.com\");});Preload: The default value should be set to ‚Äútrue‚Äù in order to inform the browser that a secure connection will be established with the loading of the list of websites containing HSTS in the first connection of the website.IncludeSubDomains: Used to specify whether or not to be valid for subdomains.MaxAge: Sets how long the HSTS header is valid.ExcludedHosts: Addresses that will invalidate headers are added.UseHttpsRedirection middleware is used for mandatory redirection of all HTTP requests from clients to the HTTPS address. When using this middleware, attention should be paid to HTTPS configuration.app.UseHttpsRedirection();We can use AddHttpsRedirection method to configure HttpsRedirection.builder.Services.AddHttpsRedirection(x =&gt;{ x.HttpsPort = 7047; x.RedirectStatusCode = (int)HttpStatusCode.TemporaryRedirect;});X-Permitted-Cross-Domain-PoliciesIf you are using Flash on your website, you can prevent clients from making cross-site requests by using the X-Permission-Cross-Domain-Policies header.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"X-Permitted-Cross-Domain-Policies\",\"none\"); await next();});X-XSS-ProtectionThe X-XSS-Protection header causes browsers to stop loading the web page when they detect a cross-site scripting attack.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"X-Xss-Protection\", \"1; mode=block\"); await next();});X-Content-Type-OptionsIt is used to prevent browsers from determining the MIME type sent with the Content Type header in requests sent from the client.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"X-Content-Type-Options\", \"nosniff\"); await next();});Referrer-PolicyWhen a site accesses a different site, it sends its own address with a referrer. In some cases, the Referrer-Policy header is used when it is not desired to send the source address explicitly.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"Referrer-Policy\", \"no-referrer\"); await next();});Feature-PolicyThe app‚Äôs camera, microphone, usb etc. It is the title that we determine whether or not it will need such requirements.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"Permissions-Policy\", \"camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), usb=()\"); await next();});Content-Security-PolicyContent-Security-Policy is a security policy used to control data injection attacks that may occur due to a web page‚Äôs style and script files.app.Use(async (ctx, next) =&gt;{ ctx.Response.Headers.Add(\"Content-Security-Policy\", \"default-src 'self'\"); await next();});I have prepared a sample middleware containing all these headers.namespace httpsecurityheader;public class CustomSecurityHeader{ private readonly RequestDelegate _next; public CustomSecurityHeader(RequestDelegate next) { _next = next; } public async Task Invoke(HttpContext context) { context.Response.Headers.Add(\"X-Frame-Options\", \"DENY\"); context.Response.Headers.Add(\"X-Permitted-Cross-Domain-Policies\", \"none\"); context.Response.Headers.Add(\"X-Xss-Protection\", \"1; mode=block\"); context.Response.Headers.Add(\"X-Content-Type-Options\", \"nosniff\"); context.Response.Headers.Add(\"Referrer-Policy\", \"no-referrer\"); context.Response.Headers.Add(\"Permissions-Policy\", \"camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), usb=()\"); context.Response.Headers.Add(\"Content-Security-Policy\", \"default-src 'self'\"); await _next.Invoke(context); }}You can download the project here. Please let me know if there are typos in my post." }, { "title": "Adding Multiple Languages ‚Äã‚Äãwith ASP.NET Core MVC", "url": "/posts/adding-multiple-languages-with-asp-net-core-mvc/", "categories": "ASP.NET CORE", "tags": "asp.net core, web api, middleware, net 6.0", "date": "2024-01-09 13:33:00 +0300", "snippet": "Hello, in this article we will examine how we can add multiple language support to ASP.NET Core MVC application. First of all, since we will keep the language definitions in resource files, we will...", "content": "Hello, in this article we will examine how we can add multiple language support to ASP.NET Core MVC application. First of all, since we will keep the language definitions in resource files, we will create the Resources folder in the application‚Äôs directory. Then we will add two Resource files named SharedResource.tr-TR.resx and SharedResource.en-US.resx.Resources FileWe will create a class named SharedResource in the application directory.We were creating the Languages ‚Äã‚Äãclass, which we created in the application directory in previous versions, into the Resources folder.namespace MultiLanguage{ public class SharedResource { }}We will create the Utilities folder in the application directory and add the SharedViewLocalizer class.using System.Reflection;using Microsoft.Extensions.Localization;namespace MultiLanguage.Utilities{ public class SharedViewLocalizer { private readonly IStringLocalizer _localizer; public SharedViewLocalizer(IStringLocalizerFactory factory) { var type = typeof(SharedResource); var assemblyName = new AssemblyName(type.GetTypeInfo().Assembly.FullName); _localizer = factory.Create(\"SharedResource\", assemblyName.Name); } public LocalizedString this[string key] =&gt; _localizer[key]; public LocalizedString GetLocalizedString(string key) { return _localizer[key]; } }}We will add Localization settings to the ConfigureServices and Configure methods in the Startup.cs file.public void ConfigureServices(IServiceCollection services) { services.AddLocalization(opts =&gt; { opts.ResourcesPath = \"Resources\"; }); services.Configure(options =&gt; { var supportedCultures = new List() { new CultureInfo(\"tr-TR\"), new CultureInfo(\"en-US\"), }; options.DefaultRequestCulture = new RequestCulture(supportedCultures.First()); options.SupportedCultures = supportedCultures; options.SupportedUICultures = supportedCultures; }); services.AddSingleton(); }public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { var locOptions = app.ApplicationServices.GetService&gt;(); app.UseRequestLocalization(locOptions.Value); }After completing the service settings, we will create the ExtensionMethods folder and the HtmlHelperExtensionMethods extension class in the application directory in order to extend the IHtmlHelper that we will use in the Views.namespace MultiLanguage.ExtensionMethods{ public static class HtmlHelperExtensionMethods { public static string Translate(this IHtmlHelper helper, string key) { IServiceProvider services = helper.ViewContext.HttpContext.RequestServices; SharedViewLocalizer localizer = services.GetRequiredService(); string result = localizer[key]; return result; } }}Then, we add a list of CultureInfo values ‚Äã‚Äãthat we can use in the services settings as ViewData to the Index method in the HomeController class.public IActionResult Index() { var defaultCultures = new List() { new CultureInfo(\"tr-TR\"), new CultureInfo(\"en-US\"), }; CultureInfo[] cinfo = CultureInfo.GetCultures(CultureTypes.AllCultures); var cultureItems = cinfo.Where(x =&gt; defaultCultures.Contains(x)) .Select(c =&gt; new SelectListItem { Value = c.Name, Text = c.DisplayName }) .ToList(); ViewData[\"Cultures\"] = cultureItems; return View(); }We fill a section with the CultureInfo list we send with ViewData and add an Action to change the Cookie structure according to the selected Culture value. [HttpPost] public IActionResult SetLanguage(string culture, string returnUrl) { Response.Cookies.Append( CookieRequestCultureProvider.DefaultCookieName, CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(culture)), new CookieOptions { Expires = DateTimeOffset.UtcNow.AddYears(1) } ); return LocalRedirect(returnUrl); } Then we modify the Index.cshtml file.Index.cshtmlWe add LB_WELCOME name values ‚Äã‚Äãto the resource files. In this way, we can use any tag we add to the resource files like @Html.Translate(‚ÄúLB_WELCOME‚Äù).SharedResource.tr-TR.resxSharedResource.en-US.resxIndex PageYou can download the project here. Please let me know if there are typos in my post." }, { "title": "What is ASP.NET Core Middleware? How to use?", "url": "/posts/what-is-asp-net-core-middleware-how-to-use/", "categories": "ASP.NET CORE", "tags": "asp.net core, web api, middleware, net 6.0", "date": "2024-01-08 19:33:00 +0300", "snippet": "Hello, in this article we will examine the middleware structure in ASP.NET Core. Middleware is used to perform the operations between the request and response process and to guide the process when ...", "content": "Hello, in this article we will examine the middleware structure in ASP.NET Core. Middleware is used to perform the operations between the request and response process and to guide the process when the application runs.Request Delegate PipelineAs seen in the image above, the Middleware 1 next() method runs the next layer, Middleware 2. Middleware 2 completes its operations and Middleware 3 is executed with the next() method. When Middleware 3 completes its operations, since there is no other Middleware to run, it returns the result of the operation to Middleware 2 layer and Middleware 2 to Middleware 1 layer.When each middleware completes its own process, it calls the next layer with the next() method and waits for a response from the next layer without finishing its own process. This spiral structure is called a pipeline. The middleware should finish processing and send a request until the entire pipeline is complete.Middleware PipelineLet‚Äôs examine the Middleware issue by creating a sample ASP.NET Core Web API (.NET 6) project.dotnet new webapi -o SampleMWWhen we created the project, some services and middleware were added as standard in Program.cs. When we examine these codes, we can see the middleware that can be added to the runtime with the app variable added in the WebApplication type.app intellisenseusing SampleMW;var builder = WebApplication.CreateBuilder(args);// Add services to the container.builder.Services.AddControllers();// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbucklebuilder.Services.AddEndpointsApiExplorer();builder.Services.AddSwaggerGen();var app = builder.Build();// Configure the HTTP request pipeline.if (app.Environment.IsDevelopment()){ app.UseSwagger(); app.UseSwaggerUI();}app.UseHttpsRedirection();app.UseAuthorization();app.MapControllers();app.Run();This is how we can add middleware. We can also create our own middleware that can kick in at runtime. There are methods added so that we can run middleware that we can add in this way.UseMiddleware MethodLet‚Äôs create a class called CustomMiddleware. In this class, after the _next object of RequestDelegate type that we inject in the Constructor is triggered, the next middleware is called with the Invoke method when the related operations are completed.namespace SampleMW{ public class CustomMiddleware { private readonly RequestDelegate _next; public CustomMiddleware(RequestDelegate next) { _next = next; } public async Task Invoke(HttpContext context) { //logic await context.Response.WriteAsync(\"|CustomMiddleware|\"); await _next.Invoke(context); } }}app.UseMiddleware&lt;CustomMiddleware&gt;();Use MethodWhen the operations are completed, it calls the next middleware. When the processes of the next middleware are completed, the process continues.app.Use(async (context, next) =&gt;{ await context.Response.WriteAsync(\"|USE|\"); await next.Invoke(); await context.Response.WriteAsync(\"|USE-RETURN|\");});app.Use(async (context, next) =&gt;{ await context.Response.WriteAsync(\"|USE-NEXT|\"); await next.Invoke();});Use ResultRun MethodIt prevents the next intermediate layer from working. In this case, the pipeline will be terminated. This interruption is called a short circuit. Let‚Äôs add the Run method to the above code block and run it.app.Use(async (context, next) =&gt;{ await context.Response.WriteAsync(\"|USE|\"); await next.Invoke(); await context.Response.WriteAsync(\"|USE-RETURN|\");});app.Run(async c =&gt;{ c.Response.WriteAsync(\"|RUN|\");});app.Use(async (context, next) =&gt;{ await context.Response.WriteAsync(\"|USE-NEXT|\"); await next.Invoke();});Run ResultAs you can see, the return was made without running the Use method containing the Use-Next text.Map MethodWe use it when we want to run different middleware by filtering according to the path of the request from the client.app.Map(\"/weatherforecast\", builder =&gt;{ builder.Run(async x=&gt; await x.Response.WriteAsync(\"|RUN MAP - WEATHERFORECAST|\"));});app.Map(\"/home\", builder =&gt;{ builder.Use(async (context, next) =&gt; { await context.Response.WriteAsync(\"|USE MAP - HOME|\"); await next.Invoke(); await context.Response.WriteAsync(\"|USE MAP RETURN - HOME|\"); });});Get /weatherforecastGet /homeMapWhen MethodWith the MapWhen method, filtering can be done according to any feature of the request from the client.app.MapWhen(x =&gt; x.Request.Path.Equals(\"/home\") &amp;&amp; x.Request.Method.Equals(\"GET\"), builder =&gt;{ builder.Run(async x =&gt; await x.Response.WriteAsync(\"|RUN MAPWHEN - HOME|\"));}); app.MapWhen(x =&gt; x.Request.Path.Equals(\"/home\") &amp;&amp; x.Request.Method.Equals(\"GET\"), builder =&gt;{ builder.Run(async x =&gt; await x.Response.WriteAsync(\"|RUN MAPWHEN - HOME|\"));});app.MapWhen(x =&gt; x.Request.Path.Equals(\"/home\") &amp;&amp; x.Request.Method.Equals(\"GET\"), builder =&gt;{ builder.Run(async x =&gt; await x.Response.WriteAsync(\"|RUN MAPWHEN - HOME|\"));});Get /home" }, { "title": "Using API Key Authorization with Middleware and Attribute on ASP.NET Core Web API", "url": "/posts/using-api-key-authorization-with-middleware-and-attribute-on-asp-net-core-web-api/", "categories": "ASP.NET CORE", "tags": "asp.net core, web api, repository pattern, dbcontext, net 6.0, middleware", "date": "2024-01-08 19:33:00 +0300", "snippet": "Hello, in this article, we will API Key authorization on ASP.NET Core Web API with middleware and attribute. We will create an ASP.NET Core Web API project named ApiKeyAuthentication.Using Middlewa...", "content": "Hello, in this article, we will API Key authorization on ASP.NET Core Web API with middleware and attribute. We will create an ASP.NET Core Web API project named ApiKeyAuthentication.Using MiddlewareWe add a Middlewares folder to the project and add a class called ApiKeyMiddleware.namespace ApiKeyAuthentication.Middlewares{ public class ApiKeyMiddleware { private readonly RequestDelegate _requestDelegate; private const string ApiKey = \"X-API-KEY\"; public ApiKeyMiddleware(RequestDelegate requestDelegate) { _requestDelegate = requestDelegate; } public async Task Invoke(HttpContext context) { if (!context.Request.Headers.TryGetValue(ApiKey, out var apiKeyVal)) { context.Response.StatusCode = 401; await context.Response.WriteAsync(\"Api Key not found!\"); } var appSettings = context.RequestServices.GetRequiredService&lt;IConfiguration&gt;(); var apiKey = appSettings.GetValue&lt;string&gt;(ApiKey); if (!apiKey.Equals(apiKeyVal)) { context.Response.StatusCode = 401; await context.Response.WriteAsync(\"Unauthorized client\"); } await _requestDelegate(context); } }}ApiKeyMiddleware.csWhen we examine the code, we check the X-API-KEY in HttpContext Headers. If there is a value, we compare it with the X-API-KEY value in appsettings. If the value is true, we continue the process.using ApiKeyAuthentication.Middlewares;using Microsoft.OpenApi.Models;var builder = WebApplication.CreateBuilder(args);// Add services to the container.builder.Services.AddControllers();// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbucklebuilder.Services.AddEndpointsApiExplorer();builder.Services.AddSwaggerGen(x =&gt;{ x.AddSecurityDefinition(\"X-API-KEY\",new OpenApiSecurityScheme { Name = \"X-API-KEY\", Type = SecuritySchemeType.ApiKey, Scheme = \"ApiKeyScheme\", In = ParameterLocation.Header, Description = \"ApiKey must appear in header\" }); x.AddSecurityRequirement(new OpenApiSecurityRequirement { { new OpenApiSecurityScheme { Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = \"X-API-KEY\" }, In = ParameterLocation.Header }, new string[]{} } });});var app = builder.Build();// Configure the HTTP request pipeline.if (app.Environment.IsDevelopment()){ app.UseSwagger(); app.UseSwaggerUI();}//app.UseMiddleware&lt;ApiKeyMiddleware&gt;();app.UseHttpsRedirection();app.UseAuthorization();app.MapControllers();app.Run();Program.csHere we should pay attention to the swagger configuration. If we want to send api key with Swagger, we configure AddSecurityDefinition and AddSecurityRequirement in the AddSwaggerGen method.{ \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\", \"X-API-KEY\": \"QXBpS2V5TWlkZGxld2FyZQ==\"}appsettings.jsonUsing AtrributeWe create a folder named Attributes and create a class called ApiKey Attribute.using Microsoft.AspNetCore.Mvc.Filters;namespace ApiKeyAuthentication.Attributes{ [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)] public class ApiKeyAttribute : Attribute, IAsyncActionFilter { private const string ApiKey = \"X-API-KEY\"; public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next) { if (!context.HttpContext.Request.Headers.TryGetValue(ApiKey, out var apiKeyVal)) { context.HttpContext.Response.StatusCode = 401; await context.HttpContext.Response.WriteAsync(\"Api Key not found!\"); } var appSettings = context.HttpContext.RequestServices.GetRequiredService&lt;IConfiguration&gt;(); var apiKey = appSettings.GetValue&lt;string&gt;(ApiKey); if (!apiKey.Equals(apiKeyVal)) { context.HttpContext.Response.StatusCode = 401; await context.HttpContext.Response.WriteAsync(\"Unauthorized client\"); } } }}ApiKeyAttribute.csAs we did in the Middleware class, we continue the process after reaching the api key value in the HttpContext Header and verifying it.[AttributeUsage] is the part we should pay attention to here. With this attribute, we set in which parts of the class our class can be used.using ApiKeyAuthentication.Attributes;using Microsoft.AspNetCore.Mvc;namespace ApiKeyAuthentication.Controllers{ [ApiController] [Route(\"[controller]\")] [ApiKey] public class WeatherForecastController : ControllerBase { private static readonly string[] Summaries = new[] { \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\" }; private readonly ILogger&lt;WeatherForecastController&gt; _logger; public WeatherForecastController(ILogger&lt;WeatherForecastController&gt; logger) { _logger = logger; } [HttpGet(Name = \"GetWeatherForecast\")] public IEnumerable&lt;WeatherForecast&gt; Get() { return Enumerable.Range(1, 5).Select(index =&gt; new WeatherForecast { Date = DateTime.Now.AddDays(index), TemperatureC = Random.Shared.Next(-20, 55), Summary = Summaries[Random.Shared.Next(Summaries.Length)] }) .ToArray(); } }}WeatherForecastController.csTest PostmanTest PostmanTest PostmanTest PostmanTest PostmanTest PostmanYou can download the project here. Please let me know if there are typos in my post." }, { "title": "Using Multiple DbContext on .NET 6 Web API With Repository Pattern", "url": "/posts/using-multiple-dbcontext-on-net-6-web-api-with-repository-pattern/", "categories": "ASP.NET CORE", "tags": "asp.net core, web api, repository pattern, dbcontext, net 6.0", "date": "2024-01-07 19:33:00 +0300", "snippet": "Hello, I this article, I will show how to use of multiple DbContext in an ASP.NET Web API (.NET 6.0) project. We will connect to 2 different databases by changing the DbContext. Now let‚Äôs create AS...", "content": "Hello, I this article, I will show how to use of multiple DbContext in an ASP.NET Web API (.NET 6.0) project. We will connect to 2 different databases by changing the DbContext. Now let‚Äôs create ASP.NET Web API (.NET 6) project. Secondly, we will install the EntityFramework packages.Install-Package Microsoft.EntityFrameworkCore -Version 6.0.4Install-Package Microsoft.EntityFrameworkCore.SqlServer -Version 6.0.4Install-Package Microsoft.EntityFrameworkCore.Tools -Version 6.0.4We will create the DbContext classes when the package installation is complete. Create three classes are named DbOneContext, DbTwoContext and BaseContext to the Data folder.using Microsoft.EntityFrameworkCore;namespace MultipleDbContext.Data;public class BaseContext : DbContext{ public BaseContext(DbContextOptions options): base(options) { }}We will update DbOneContext and DbTwoContext concrete classes which inherits BaseContext.DbOneContext:using Microsoft.EntityFrameworkCore;namespace MultipleDbContext.Data;public class DbOneContext : BaseContext{ public DbOneContext(DbContextOptions&lt;DbOneContext&gt; options) : base(options) { }}DbTwoContext:using Microsoft.EntityFrameworkCore;namespace MultipleDbContext.Data;public class DbTwoContext : BaseContext{ public DbTwoContext(DbContextOptions&lt;DbTwoContext&gt; options) : base(options) { }}After creating the DbContext classes, we will add DbOneContext and DbTwoContext are connectionstrings to the appsettings.json file.{ \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\", \"ConnectionStrings\": { \"DbOneContext\": \"Data Source=.;Initial Catalog=DBONE;User ID=sa;Password=Pw123456\", \"DbTwoContext\": \"Data Source=.;Initial Catalog=DBTWO;User ID=sa;Password=Pw123456\" }}We will add DbContext classes info to Program.cs file.builder.Services.AddDbContext&lt;DbOneContext&gt;(options =&gt; options.UseSqlServer(builder.Configuration.GetConnectionString(\"DbOneContext\")));builder.Services.AddDbContext&lt;DbTwoContext&gt;(options =&gt; options.UseSqlServer(builder.Configuration.GetConnectionString(\"DbTwoContext\")));Create a Models named folder and add a Book class.namespace MultipleDbContext.Models{ public class Book { public int Id { get; set; } public string Name { get; set; } public string Anchor { get; set; } }}Then we will add the Book entity class in BaseContext.using Microsoft.EntityFrameworkCore;using MultipleDbContext.Models;namespace MultipleDbContext.Data;public class BaseContext : DbContext{ public BaseContext(DbContextOptions options): base(options) { } public DbSett&lt;Book&gt; Books { get; set; }}We will create a class called DbContextFactory in the Data folder. In this class we will return the BaseContext object with the contextName value inside an IDictionary. In this way, we will have made a development in accordance with SOLID principles.namespace MultipleDbContext.Data{ public class DbContextFactory { private readonly IDictionary&lt;string, BaseContext&gt; _context; public DbContextFactory(IDictionary&lt;string, BaseContext&gt; context) { _context = context; } public BaseContext GetContext(string contextName) { return _context[contextName]; } }}Now we can create the Repository structure. Create IBookRepository interface under the Repository folder.using MultipleDbContext.Models;namespace MultipleDbContext.Repository;public interface IBookRepository{ void Add(Book entity,string contextName); void Update(Book entity, string contextName); List&lt;Book&gt; Get(string contextName);}We will select DbContext with the ContextName parameter.using Microsoft.EntityFrameworkCore;using MultipleDbContext.Data;using MultipleDbContext.Models;namespace MultipleDbContext.Repository{ public class BookRepository : IBookRepository { DbContextFactory _contexts; public BookRepository(DbContextFactory contexts) { _contexts = contexts; } public void Add(Book entity, string contextName) { var context = _contexts.GetContext(contextName); var addedEntity = context.Attach(entity); addedEntity.State = EntityState.Added; context.SaveChanges(); } public void Update(Book entity, string contextName) { var context = _contexts.GetContext(contextName); var updatedEntity = context.Entry(entity); updatedEntity.State = EntityState.Modified; context.SaveChanges(); } public List&lt;Book&gt; Get(string contextName) { var context = _contexts.GetContext(contextName); return context.Books.ToList(); } }}In this class, we will move the DbContextFactory and DbContext objects into the Repository in the constructor. We can access the DbContext sent with the parameter. We will add the AutoFac IOC container to the project.Install-Package Autofac -Version 6.3.0Install-Package Autofac.Extensions.DependencyInjection -Version 7.2.0After downloading the package, we will immediately configure AutoFac in Program.cs.builder.Host.UseServiceProviderFactory(new AutofacServiceProviderFactory());builder.Host.ConfigureContainer&lt;ContainerBuilder&gt;(b =&gt; b.RegisterModule(new AutoFacModule()));We will add the AutoFacModule class.public class AutoFacModule : Module{ protected override void Load(ContainerBuilder builder) { builder.RegisterType&lt;DbOneContext&gt;().As&lt;BaseContext&gt;(); builder.RegisterType&lt;DbTwoContext&gt;().As&lt;BaseContext&gt;(); builder.Register(ctx =&gt; { var allContext = new Dictionary&lt;string, BaseContext&gt;(); allContext.Add(\"DbOneContext\", ctx.Resolve&lt;DbOneContext&gt;()); allContext.Add(\"DbTwoContext\", ctx.Resolve&lt;DbTwoContext&gt;()); return new DbContextFactory(allContext); }); builder.RegisterType&lt;BookRepository&gt;().As&lt;IBookRepository&gt;(); }}After AutoFac IOC configuration, we will add a Web API controller named BookController to the controllers folder.using Microsoft.AspNetCore.Http;using Microsoft.AspNetCore.Mvc;using MultipleDbContext.Models;using MultipleDbContext.Repository;namespace MultipleDbContext.Controllers{ [Route(\"api/[controller]\")] [ApiController] public class BookController : ControllerBase { private IBookRepository _bookRepository; public BookController(IBookRepository bookRepository) { _bookRepository = bookRepository; } [HttpGet] [Route(\"{contextName}\")] public List&lt;Book&gt; Get([FromRoute] string contextName) { var books = _bookRepository.Get(contextName); return books; } [HttpPost] [Route(\"{contextName}\")] public IActionResult Post([FromRoute] string contextName,[FromBody] Book book) { try { _bookRepository.Add(book,contextName); return Ok(); } catch (Exception e) { return BadRequest(e.Message); } } [HttpPut] [Route(\"{contextName}\")] public IActionResult Put([FromRoute] string contextName, [FromBody] Book book) { try { _bookRepository.Update(book, contextName); return Ok(); } catch (Exception e) { return BadRequest(e.Message); } } }}We select the dbContext with the contextName parameter. We will do CRUD operations with BookRepository. After creating the controller, we will create the DbOne and DbTwo databases with Migration. Since there are multiple DbContext files, it is necessary to specify which one to create in the migration process.DbOneContext ‚Äî Migration:Add-Migration -Context DbOneContextUpdate-Database -Context DbOneContextDbTwoContext ‚Äî Migration:Add-Migration -Context DbTwoContextUpdate-Database -Context DbTwoContextAfter the migration;After MigrationWe will do CRUD operations with Swagger. We will do Post and Get requests for DbOneContext.Test PostmanTest PostmanWe will perform CRUD operations on the DbTwo database with the DbTwoContext parameter.Test PostmanTest PostmanYou can download the project here. Please let me know if there are typos in my post." }, { "title": "JQuery Datatables K√ºt√ºphanesinin .NET Core ile Server Side Kullanƒ±mƒ±", "url": "/posts/jquery-datatables-kutuphanesinin-net-core-ile-server-side-kullanimi/", "categories": "ASP.NET CORE", "tags": "asp.net core, net 7.0, jquery datatables", "date": "2023-03-02 16:00:00 +0300", "snippet": "Web projelerinde en √ßok kullanƒ±lan Jquery veri tablo k√ºt√ºphanelerinden biri olan Datatables k√ºt√ºphanesinin .NET Core √ºzerinde sunucu taraflƒ± kullanƒ±mƒ±nƒ± inceleyeceƒüim. Datatables herhangi bir HTML ...", "content": "Web projelerinde en √ßok kullanƒ±lan Jquery veri tablo k√ºt√ºphanelerinden biri olan Datatables k√ºt√ºphanesinin .NET Core √ºzerinde sunucu taraflƒ± kullanƒ±mƒ±nƒ± inceleyeceƒüim. Datatables herhangi bir HTML tablosuna arama, sayfa ge√ßi≈üleri ve sƒ±ralama i≈ülemlerini i√ßeren geli≈ümi≈ü kontroller ekler. Bu kontroller sayesinde verilerin daha performanslƒ± kullanƒ±lmasƒ± saƒülanƒ±r. √ñncelikle a≈üaƒüƒ±daki gibi bir ASP.NET Core Web App (Model-View-Controller) projesi olu≈üturacaƒüƒ±z.Create MVCVeritabanƒ± i≈ülemlerini bu makalede yapmadan √∂rneƒüe ge√ßmek i√ßin EntityFrameworkCore.InMemory k√ºt√ºphanesini kullanacaƒüƒ±z.Nuget PackageEntityFramework.Core k√ºt√ºphanelerini ekledikten sonra ApplciationDbContext isminde bir sƒ±nƒ±f ekleyeceƒüiz.using JSDatatables.DataAccess.Entity;using Microsoft.EntityFrameworkCore;namespace JSDatatables.DataAccess.Context{ public class ApplicationDbContext : DbContext { public ApplicationDbContext(DbContextOptions options):base(options) { } public DbSet&lt;Product&gt; Products { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { base.OnModelCreating(modelBuilder); } }}Daha sonra Product isminde bir entity sƒ±nƒ±fƒ± ekleyeceƒüiz.namespace JSDatatables.DataAccess.Entity{ public class Product { public int Id { get; set; } public string Description { get; set; } public double Price { get; set; } }}EntityFramework ile ilgili son i≈ülem olarak Program.cs dosyasƒ±nda DbContext yapƒ±landƒ±rmasƒ±nƒ± tamamlayacaƒüƒ±z.builder.Services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt; options.UseInMemoryDatabase(\"memorydb\"));HomeController i√ßerisinde ApplicationDbContext sƒ±nƒ±fƒ±mƒ±zƒ± Constructor ile ekleyelim. public class HomeController : Controller { private readonly ILogger&lt;HomeController&gt; _logger; ApplicationDbContext context; public HomeController(ILogger&lt;HomeController&gt; logger, ApplicationDbContext context) { _logger = logger; this.context = context; } }Bu i≈ülemden sonra sahte bir veri elde etmek i√ßin for d√∂ng√ºs√º ile Product ekleme i≈ülemi yapacak olan bir metot olu≈üturup Index ismindeki Action da √ßaƒüƒ±racaƒüƒ±z. public IActionResult Index() { LoadTestData(); return View(); } void LoadTestData() { var number = new Random(); for (int i = 1; i &lt;= 200; i++) { context.Products.Add(new Product() { Description = $\"Product {Guid.NewGuid().ToString(\"N\")}\", Price = number.NextDouble(), }); } context.SaveChanges(); }Verileri elde edecek metotu yazdƒ±ktan sonra Index ismindeki ActionResult i√ßin aynƒ± isimle bir View ekleyeceƒüiz. Daha sonra myTable isminde bir table ekleyip (document).ready fonksiyonu ile Datatables k√ºt√ºphanesini sayfaya ekleme i≈ülemini yapacaƒüƒ±z. Burada processing: true, serverSide: true deƒüerlerine dikkat etmemiz gerekmektedir. Bu ≈üekilde sunucu taraflƒ± i≈ülemler i√ßin yapƒ±landƒ±rmamƒ±zƒ± tamamlayacaƒüƒ±z.@{ ViewData[\"Title\"] = \"Datatables\";}&lt;link href=\"//cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css\" rel=\"stylesheet\" /&gt;&lt;div class=\"container\"&gt; &lt;div class=\"table-responsive\"&gt; &lt;table id=\"myTable\" class=\"table table-bordered\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Id&lt;/th&gt; &lt;th&gt;Description\"&lt;/th&gt; &lt;th&gt;Price\"&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;/table&gt; &lt;/div&gt;&lt;/div&gt;@section Scripts{ &lt;script src=\"//cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js\"&gt;&lt;/script&gt; &lt;script&gt; $(document).ready(function () { $('#myTable').DataTable( { ajax: { url: \"Home/GetProducts\", type: \"POST\", }, processing: true, serverSide: true, filter: true, columns: [ { data: \"id\", name: \"Id\" }, { data: \"description\", name: \"Description\" }, { data: \"price\", name: \"Price\" }, ] } ); }); &lt;/script&gt;}Daha sonra Datatables i√ßin GetProducts isminde kayƒ±t listeleyecek ve JsonResult tipinde Post metotu olu≈üturacaƒüƒ±z.[HttpPost]public JsonResult GetProducts(){ var data = context.Set&lt;Product&gt;().AsQueryable(); var draw = Request.Form[\"draw\"].FirstOrDefault(); var length = Convert.ToInt32(Request.Form[\"length\"].FirstOrDefault()); var start = Convert.ToInt32(Request.Form[\"start\"].FirstOrDefault()); var orderColumnIndex = Request.Form[\"order[0][column]\"].FirstOrDefault(); var orderDir = Request.Form[\"order[0][dir]\"].FirstOrDefault(); var orderColumnName = Request.Form[$\"columns[{orderColumnIndex}][name]\"].FirstOrDefault(); var searchValue = Request.Form[\"search[value]\"].FirstOrDefault(); int recordTotal = data.Count(); int recordsFiltered = data.Count(); if (!string.IsNullOrEmpty(searchValue)) { data = data.Where(x =&gt; x.Description.ToLower().Contains(searchValue.ToLower())); } if (!string.IsNullOrEmpty(orderColumnName) &amp;&amp; !string.IsNullOrEmpty(orderDir)) { data = OrderByField(data, orderColumnName, orderDir == \"asc\"); } var products = data.Skip(start).Take(length).ToList(); var result = new { draw = draw, recordsTotal = recordTotal, recordsFiltered = recordsFiltered, data = products }; return Json(result);}GetProducts metotunu incelemeden √∂nce Request.Form ile aldƒ±ƒüƒ±mƒ±z deƒüerlerin ne anlama geldiƒüine bakalƒ±m.Projeyi √ßalƒ±≈ütƒ±rƒ±p GetProduct metotuna breakpoint eklediƒüimizde debuging sƒ±rasƒ±nda Request.Form i√ßeriƒüi resimlerde g√∂r√ºld√ºƒü√º gibi gelmektedir. Datatables d√∂k√ºmanƒ±nda yazƒ±ldƒ±ƒüƒ± √ºzere draw, recordsTotal, recordsFiltered, data alanlarƒ±nƒ± i√ßeren bir Json nesnesi beklemektedir. Not:Se√ßili olan sayfa numarasƒ±nƒ± almak i√ßin start/length i≈ülemini kullanabiliriz.IQueryable t√ºr√ºndeki entity √ºzerinde sƒ±ralama i≈ülemi yapmak i√ßin OrderByField fonksiyonunu yazacaƒüƒ±z.public IQueryable&lt;T&gt; OrderByField&lt;T&gt;(IQueryable&lt;T&gt; q, string SortField, bool Ascending){ var param = Expression.Parameter(typeof(T), \"p\"); var prop = Expression.Property(param, SortField); var exp = Expression.Lambda(prop, param); string method = Ascending ? \"OrderBy\" : \"OrderByDescending\"; Type[] types = new Type[] { q.ElementType, exp.Body.Type }; var mce = Expression.Call(typeof(Queryable), method, types, q.Expression, exp); return q.Provider.CreateQuery&lt;T&gt;(mce);}Uygulamayƒ± √ßalƒ±≈ütƒ±rdƒ±ƒüƒ±mƒ±zda Datatables ile verileri g√∂r√ºnt√ºleyebiliriz. √ñrnek projeyi buradan indirebilirsiniz.Referanslar :https://ronniediaz.com/2011/05/24/orderby-string-in-linq-c-net-dynamic-sorting-of-anonymous-types/https://www.c-sharpcorner.com/article/server-side-rendering-of-datatables-js-in-asp-net-core/" }, { "title": "ASP.NET Core Http Security Header", "url": "/posts/aspnet-core-http-security-header/", "categories": "ASP.NET CORE", "tags": "asp.net core, net 6.0", "date": "2022-06-15 19:33:00 +0300", "snippet": "Http Security Header yapƒ±sƒ±nƒ±n .NET Core √ºzerinde nasƒ±l kullanƒ±ldƒ±ƒüƒ±nƒ± √∂rnek bir ASP.NET Core projesinde inceleyelim. √ñncelikle bo≈ü bir web projesi olu≈üturuyorum.dotnet new web -o httpsecurityheade...", "content": "Http Security Header yapƒ±sƒ±nƒ±n .NET Core √ºzerinde nasƒ±l kullanƒ±ldƒ±ƒüƒ±nƒ± √∂rnek bir ASP.NET Core projesinde inceleyelim. √ñncelikle bo≈ü bir web projesi olu≈üturuyorum.dotnet new web -o httpsecurityheaderProjeyi olu≈üturdurduktan sonra ba≈ülƒ±k g√ºvenliklerini (security headers) inceleyelim.X-Frame-OptionsX-Frame-Options header se√ßeneƒüi Clickjacking adƒ± verilen web sayfanƒ±zƒ± iframe y√∂ntemiyle ba≈üka bir web sayfasƒ±nda √ßaƒüƒ±rƒ±p i≈ülem yapƒ±lmasƒ±nƒ± √∂nlemek i√ßin kullanƒ±lmaktadƒ±r. Kullanƒ±labilecek 3 ayarƒ± bulunmaktadƒ±r. DENY: Sayfanƒ±n bir iframe i√ßerisinde √ßaƒürƒ±lmasƒ±nƒ± tamamen engellemektedir. SAMEORIGIN: Sayfanƒ±n domaini dƒ±≈üƒ±nda bir iframe i√ßerisinde √ßaƒürƒ±lmasƒ±nƒ± engellemektedir. ALLOW-FROM uri: G√ºn√ºm√ºzdeki browserlarda artƒ±k √ßalƒ±≈ümayan ancak belirli bir url den iframe i√ßerisinde √ßaƒürƒ±lmasƒ±na izin vermektedir.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"X-Frame-Options\",\"DENY\"); await next();}); Buradaki bilgiye g√∂re varsayƒ±lan olarak X-Frame-Options header bilgisi SAMEORIGIN olarak olu≈üturuluyor.X-Frame-Options header bilgisini kaldƒ±rmak i√ßin a≈üaƒüƒ±daki gibi AddAntiforgery metodunda i≈ülem yapƒ±lmaldƒ±r.builder.Services.AddAntiforgery(x =&gt;{ x.SuppressXFrameOptionsHeader = true;});Strict-Transport-Securityƒ∞stemcinin yapmƒ±≈ü olduƒüu HTTP isteklerini man-in-the-middle (MITM) saldƒ±rƒ±larƒ±nƒ± engellemek i√ßin otomatik olarak HTTPS‚Äôe d√∂nd√ºrmek i√ßin kullanƒ±lƒ±r. .NET Core projelerinde UseHsts middleware yapƒ±sƒ± ile kullanƒ±lmaktadƒ±r.app.UseHsts(); HSTS kullanƒ±mƒ± tarayƒ±cƒ±larƒ±n √∂nbelleƒüe almalarƒ±ndan geli≈ütirme (development) ortamlarƒ±nda kullanƒ±lmasƒ± √∂nerilmemektedir.HSTS yapƒ±landƒ±rmasƒ± i√ßin AddHSTS metodunu kullanabiliriz.builder.Services.AddHsts(x =&gt;{ x.Preload = true; x.IncludeSubDomains = true; x.MaxAge = TimeSpan.FromDays(60); x.ExcludedHosts.Add(\"example.com\"); x.ExcludedHosts.Add(\"www.example.com\");}); Preload: Web sitenin ilk baƒülantƒ±sƒ±nda HSTS i√ßeren web sitelerinin bulunduƒüu listenin y√ºklenmesiyle birlikte g√ºvenli baƒülantƒ± kurulacaƒüƒ±nƒ± tarayƒ±cƒ±ya iletmek i√ßin varsayƒ±lan deƒüeri ‚Äútrue‚Äù yapƒ±lmalƒ±. IncludeSubDomains: Alt alan adlarƒ± i√ßin ge√ßerli olup/olmayacaƒüƒ±nƒ± belirtmek i√ßin kullanƒ±lƒ±r. MaxAge: HSTS √ºst bilgisinin ne kadar s√ºre ge√ßerli olacaƒüƒ±nƒ± ayarlar. ExcludedHosts: √úst bilgilerin ge√ßersiz olacak adresler eklenir.Ayrƒ±ca istemcilerden gelen t√ºm HTTP isteklerini HTTPS adresine zorunlu y√∂nlendirme i≈ülemi i√ßin UseHttpsRedirection middleware kullanƒ±lmaktadƒ±r. Bu middleware kullanƒ±ldƒ±ƒüƒ±nda HTTPS yapƒ±landƒ±rmasƒ± olmasƒ±na dikkat edilmelidir.app.UseHttpsRedirection();HttpsRedirection yapƒ±landƒ±rmasƒ± i√ßin AddHttpsRedirection metodunu kullanabiliriz.builder.Services.AddHttpsRedirection(x =&gt;{ x.HttpsPort = 7047; x.RedirectStatusCode = (int)HttpStatusCode.TemporaryRedirect;});X-Permitted-Cross-Domain-PoliciesBu ba≈ülƒ±k, Adobe √ºr√ºnlerinin web sayfasƒ±nƒ± sizinkinden farklƒ± bir etki alanƒ±ndan olu≈üturmasƒ±na izin verilip verilmediƒüini belirtmek i√ßin kullanƒ±labilir. √ñrnek olarak, web sitenizde Flash kullanƒ±yorsanƒ±z, X-Permission-Cross-Domain-Policies ba≈ülƒ±ƒüƒ±nƒ± kullanarak istemcilerin siteler arasƒ± istekte bulunmasƒ±nƒ± engelleyebilirsiniz.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"X-Permitted-Cross-Domain-Policies\",\"none\"); await next();});X-XSS-ProtectionX-XSS-Protection ba≈ülƒ±ƒüƒ±, g√ºn√ºm√ºz tarayƒ±cƒ±larƒ±nƒ±n bir siteler arasƒ± komut dosyasƒ± √ßalƒ±≈ütƒ±rma saldƒ±rƒ±sƒ± (XSS) algƒ±ladƒ±klarƒ±nda web sayfasƒ±nƒ± y√ºklemeyi durdurmasƒ±na neden olur.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"X-Xss-Protection\", \"1; mode=block\"); await next();});X-Content-Type-OptionsTarayƒ±cƒ±larƒ±n istemciden g√∂nderilen isteklerde Content Type ba≈ülƒ±ƒüƒ± ile g√∂nderilen MIME t√ºr√ºn√ºn kendisinin belirlemesini engellemek i√ßin kullanƒ±lƒ±r.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"X-Content-Type-Options\", \"nosniff\"); await next();});Referrer-PolicyBir sitenin farklƒ± bir siteye eri≈üim yaptƒ±ƒüƒ±nda kendi adresinide referrer ile g√∂nderir. Bazƒ± durumlarda kaynak adresin a√ßƒ±k ≈üekilde g√∂nderilmesi istenmediƒüinde Referrer-Policy ba≈ülƒ±ƒüƒ± kullanƒ±lƒ±r.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"Referrer-Policy\", \"no-referrer\"); await next();});Feature-PolicyUygulamanƒ±n kamera, mikrofon, usb vb. gibi gereksinimlere ihtiya√ß duyup/duymayacaƒüƒ±nƒ± belirlediƒüimiz ba≈ülƒ±ktƒ±r.app.Use(async (context, next) =&gt;{ context.Response.Headers.Add(\"Permissions-Policy\", \"camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), usb=()\"); await next();});Content-Security-PolicyContent-Security-Policy, bir web sayfasƒ±nƒ±n y√ºklemesine izin verilen kaynaklarƒ± kontrol etmek i√ßin kullanƒ±lan bir g√ºvenlik politikasƒ±dƒ±r. Bir HTTP yanƒ±tƒ±nda Content-Security-Policy ba≈ülƒ±ƒüƒ± aracƒ±lƒ±ƒüƒ±yla uygulanan ekstra bir g√ºvenlik katmanƒ±nƒ± temsil eder. Content-Security-Policy, siteler arasƒ± komut dosyasƒ± √ßalƒ±≈ütƒ±rma saldƒ±rƒ±larƒ± ve veri enjeksiyon saldƒ±rƒ±larƒ± gibi belirli saldƒ±rƒ± t√ºrlerini tespit etmek ve azaltmak i√ßin kullanƒ±lƒ±r. √ñzellikle style ve script dosyalarƒ±nda dolayƒ± olu≈üabilecek veri enjeksiyon saldƒ±rƒ±larƒ± i√ßin kullanƒ±labilir.app.Use(async (ctx, next) =&gt;{ ctx.Response.Headers.Add(\"Content-Security-Policy\", \"default-src 'self'\"); await next();});T√ºm bu ba≈ülƒ±klarƒ± i√ßeren √∂rnek bir middleware hazƒ±rladƒ±m.namespace httpsecurityheader;public class CustomSecurityHeader{ private readonly RequestDelegate _next; public CustomSecurityHeader(RequestDelegate next) { _next = next; } public async Task Invoke(HttpContext context) { context.Response.Headers.Add(\"X-Frame-Options\", \"DENY\"); context.Response.Headers.Add(\"X-Permitted-Cross-Domain-Policies\", \"none\"); context.Response.Headers.Add(\"X-Xss-Protection\", \"1; mode=block\"); context.Response.Headers.Add(\"X-Content-Type-Options\", \"nosniff\"); context.Response.Headers.Add(\"Referrer-Policy\", \"no-referrer\"); context.Response.Headers.Add(\"Permissions-Policy\", \"camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), usb=()\"); context.Response.Headers.Add(\"Content-Security-Policy\", \"default-src 'self'\"); await _next.Invoke(context); }}Bir sonraki makalede g√∂r√º≈ümek √ºzere. Proje dosyalarƒ±nƒ± buradan indirebilirsiniz." }, { "title": "ASP.NET Core Middleware Nedir? Nasƒ±l Kullanƒ±lƒ±r?", "url": "/posts/aspnet-core-middleware-nedir-nasil-kullanilir/", "categories": "ASP.NET CORE", "tags": "asp.net core, net 6.0, middleware", "date": "2022-06-05 19:33:00 +0300", "snippet": "Merhabalar, bu makalede ASP.NET Core‚Äôda ara katman (Middleware) yapƒ±sƒ±nƒ± inceleceƒüiz. ASP.NET Core‚Äôda ara katman (Middleware) yapƒ±sƒ±, uygulama √ßalƒ±≈ütƒ±ƒüƒ±nda bir istemciden (Client) gelen taleplerin ...", "content": "Merhabalar, bu makalede ASP.NET Core‚Äôda ara katman (Middleware) yapƒ±sƒ±nƒ± inceleceƒüiz. ASP.NET Core‚Äôda ara katman (Middleware) yapƒ±sƒ±, uygulama √ßalƒ±≈ütƒ±ƒüƒ±nda bir istemciden (Client) gelen taleplerin (Request) istemciye geri d√∂nd√ºr√ºlmesi (Response) s√ºrecindeki i≈ülemleri ger√ßekle≈ütirmek ve s√ºrece y√∂n vermek i√ßin kullanƒ±lmaktadƒ±r.Request Delegate PipelineYukarƒ±daki resimde g√∂r√ºld√ºƒü√º √ºzere, istemciden (Client) gelen bir istek √ºzerine (Request) Middleware 1 i≈ülemleri yapƒ±lmaktadƒ±r. Middleware 1 next() metodu bir sonraki katman olan Middleware 2 √ßalƒ±≈ütƒ±rmaktadƒ±r. Middleware 2 de i≈ülemlerini tamamlayƒ±p next() metodu ile Middleware 3 √ßalƒ±≈ütƒ±rƒ±lmaktadƒ±r. Middleware 3 i≈ülemlerini tamamladƒ±ƒüƒ±nda √ßalƒ±≈ütƒ±racak bir ba≈üka Middleware olmadƒ±ƒüƒ± i√ßin i≈ülem sonucunu Middleware 2 katmanƒ±na, Middleware 2 de Middleware 1 katmanƒ±na d√∂nd√ºrmektedir. Middleware 1 ara katmanƒ± da t√ºm gelen sonu√ßlara g√∂re istemciye istek sonucunu (Response) d√∂nd√ºrmektedir.Burada dikkat edilecek olan kƒ±sƒ±m her ara katman (Middleware) i≈ülemini tamamladƒ±ƒüƒ±nda next() metodu ile sonraki katmanƒ± √ßaƒüƒ±rƒ±rken kendi i≈ülemini bitirmeyip bir sonraki katmandan cevap beklemesidir. ƒ∞≈üte bu sarmal yapƒ±ya boru hattƒ± (Pipeline) denilmektedir. T√ºm pipeline tamamlanana kadar ara katmanlar i≈ülemlerini bitirip geriye bir istek (Response) d√∂nd√ºrmelidir. Bu nedenle kullanacaƒüƒ±mƒ±z yada m√ºdahale edeceƒüimiz ara katmanlarda √ßalƒ±≈üma sƒ±ralamasƒ±na dikkat etmeliyiz.Middleware PipelineMiddleware konusunu √∂rnek bir ASP.NET Core Web API (.NET 6) projesi olu≈üturarak inceleyelim.dotnet new webapi -o SampleMWProjeyi olu≈üturduƒüumuzda Program.cs i√ßerisinde bazƒ± servis ve ara katmanlar (Middleware) standart olarak eklenmi≈ütir. Bu kodlarƒ± incelediƒüimizde WebApplication tipinde eklenen app deƒüi≈ükeni ile √ßalƒ±≈üma zamanƒ±na eklenebilecek ara katmanlarƒ± g√∂rebiliriz.var builder = WebApplication.CreateBuilder(args);// Add services to the container.builder.Services.AddControllers();// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbucklebuilder.Services.AddEndpointsApiExplorer();builder.Services.AddSwaggerGen();var app = builder.Build();// Configure the HTTP request pipeline.if (app.Environment.IsDevelopment()){ app.UseSwagger(); app.UseSwaggerUI();}app.UseHttpsRedirection();app.UseAuthorization();app.MapControllers();app.Run();Hazƒ±r ara katmanlarƒ± bu ≈üekilde ekleyebiliriz. Ayrƒ±ca √ßalƒ±≈üma zamanƒ±nda devreye girebilecek kendi ara katmanlarƒ±mƒ±zƒ± da yazabiliriz. Bu ≈üekilde ekleyebileceƒüimiz ara katmanlarƒ± √ßalƒ±≈ütƒ±rabilmemiz i√ßin eklenmi≈ü metodlar bulunmaktadƒ±r.UseMiddleware Metodu√ñncelikle projede CustomMiddleware isminde bir sƒ±nƒ±f olu≈üturalƒ±m. Bu sƒ±nƒ±fta Constructor i√ßerisinde inject yaptƒ±ƒüƒ±mƒ±z RequestDelegate tipinde _next nesnesi tetiklendikten sonra ilgili i≈ülemler tamamlandƒ±ƒüƒ±nda Invoke metodu ile sƒ±radaki ara katman √ßaƒürƒ±lmaktadƒ±r.namespace SampleMW{ public class CustomMiddleware { private readonly RequestDelegate _next; public CustomMiddleware(RequestDelegate next) { _next = next; } public async Task Invoke(HttpContext context) { //logic await _next.Invoke(context); } }}Kendi yazdƒ±ƒüƒ±mƒ±z ara katmanƒ± UseMiddleware metodu ile kullanabiliriz.app.UseMiddleware&lt;CustomMiddleware&gt;();Use MetoduDevreye girdikten sonra i≈ülemleri tamamlandƒ±ƒüƒ±nda sƒ±radaki ara katmanƒ± √ßaƒüƒ±rmaktadƒ±r. Sƒ±radaki ara katmanƒ±n i≈ülemleri bittiƒüinde geriye d√∂n√ºp i≈üleme devam edebilmektedir.app.Use(async (context, next) =&gt;{ await context.Response.WriteAsync(\"|USE|\"); await next.Invoke(); await context.Response.WriteAsync(\"|USE-RETURN|\");});app.Use(async (context, next) =&gt;{ await context.Response.WriteAsync(\"|USE-NEXT|\"); await next.Invoke();});Use ResultRun MetoduKendisinden sonra gelen ara katmanƒ±n √ßalƒ±≈ümasƒ±nƒ± engellemektedir. Bu durumda pipeline sonlanmƒ±≈ü olacaktƒ±r. Bu ≈üekilde kesilme i≈ülemine kƒ±sa devre (Short Circuit) denilmektedir. Yukarƒ±daki kod bloƒüuna Run metodunu ekleyip √ßalƒ±≈ütƒ±ralƒ±m.app.Use(async (context, next) =&gt;{ await context.Response.WriteAsync(\"|USE|\"); await next.Invoke(); await context.Response.WriteAsync(\"|USE-RETURN|\");});app.Run(async c =&gt;{ c.Response.WriteAsync(\"|RUN|\");});app.Use(async (context, next) =&gt;{ await context.Response.WriteAsync(\"|USE-NEXT|\"); await next.Invoke();});Run ResultG√∂r√ºld√ºƒü√º gibi Use-Next yazƒ±sƒ±nƒ± i√ßeren Use metodu √ßalƒ±≈ütƒ±rƒ±lmadan geri d√∂n√º≈ü yapƒ±lmƒ±≈ü.Map Metoduƒ∞stemciden gelen isteƒüin (Request) path‚Äôe g√∂re bir filtreleme yaparak farklƒ± ara katmanlar √ßalƒ±≈ütƒ±rmak istediƒüimizde kullanƒ±rƒ±z.app.Map(\"/weatherforecast\", builder =&gt;{ builder.Run(async x=&gt; await x.Response.WriteAsync(\"|RUN MAP - WEATHERFORECAST|\"));});app.Map(\"/home\", builder =&gt;{ builder.Use(async (context, next) =&gt; { await context.Response.WriteAsync(\"|USE MAP - HOME|\"); await next.Invoke(); await context.Response.WriteAsync(\"|USE MAP RETURN - HOME|\"); });});Get /weatherforecastGet /homeMapWhen MetoduMap metodu istemciden gelen isteƒüin path‚Äôi ile bir y√∂nlendirme yapƒ±yorduk. MapWhen metoduyla ise istemciden gelen isteƒüin (Request) herhangi bir √∂zelliƒüine g√∂re filtreleme yapƒ±labilmektedir.app.MapWhen(x =&gt; x.Request.Path.Equals(\"/home\") &amp;&amp; x.Request.Method.Equals(\"GET\"), builder =&gt;{ builder.Run(async x =&gt; await x.Response.WriteAsync(\"|RUN MAPWHEN - HOME|\"));});Get /homeBir sonraki makalede g√∂r√º≈ümek √ºzere." }, { "title": "ASP.NET Core Web API √úzerinde Middleware ve Attribute ile API Key Yetkilendirmesi", "url": "/posts/aspnet-core-web-api-middleware-ve-atrribute-ile-apikey-yetkilendirmesi/", "categories": "ASP.NET CORE", "tags": "asp.net core, net 6.0, web api, api key", "date": "2022-04-23 19:33:00 +0300", "snippet": "Merhabalar, bu makalede ASP.NET Core Web API projesinde API Key yetkilendirmesini middleware ve attribute yapƒ±larƒ±yla inceleyeceƒüiz. ApiKeyAuthentication isminde bir ASP.NET Core Web API projesi ol...", "content": "Merhabalar, bu makalede ASP.NET Core Web API projesinde API Key yetkilendirmesini middleware ve attribute yapƒ±larƒ±yla inceleyeceƒüiz. ApiKeyAuthentication isminde bir ASP.NET Core Web API projesi olu≈üturacaƒüƒ±z.Middleware Kullanƒ±mƒ±Projeye Middlewares klas√∂r√º ekleyip i√ßerisinde ApiKeyMiddleware isminde bir sƒ±nƒ±f ekliyoruz.namespace ApiKeyAuthentication.Middlewares{ public class ApiKeyMiddleware { private readonly RequestDelegate _requestDelegate; private const string ApiKey = \"X-API-KEY\"; public ApiKeyMiddleware(RequestDelegate requestDelegate) { _requestDelegate = requestDelegate; } public async Task Invoke(HttpContext context) { if (!context.Request.Headers.TryGetValue(ApiKey, out var apiKeyVal)) { context.Response.StatusCode = 401; await context.Response.WriteAsync(\"Api Key not found!\"); } var appSettings = context.RequestServices.GetRequiredService&lt;IConfiguration&gt;(); var apiKey = appSettings.GetValue&lt;string&gt;(ApiKey); if (!apiKey.Equals(apiKeyVal)) { context.Response.StatusCode = 401; await context.Response.WriteAsync(\"Unauthorized client\"); } await _requestDelegate(context); } }}Kod bloƒüunu incelediƒüimzide HttContext Headers i√ßerisinde X-API-KEY deƒüerini kontrol ediyoruz. Deƒüer var ise appsettings i√ßerisinde X-API-KEY deƒüeriyle kar≈üƒ±la≈ütƒ±rƒ±yoruz. Eƒüer e≈üit bir deƒüere eri≈üirsek i≈ülemi devam ettiriyoruz. Proram.cs i√ßerisinde app.UseMiddleware&lt;ApiKeyMiddleware&gt;(); ≈üeklinde middleware kullanƒ±mƒ±nƒ± ger√ßekle≈ütiriyoruz.using ApiKeyAuthentication.Middlewares;using Microsoft.OpenApi.Models;var builder = WebApplication.CreateBuilder(args);// Add services to the container.builder.Services.AddControllers();// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbucklebuilder.Services.AddEndpointsApiExplorer();builder.Services.AddSwaggerGen(x =&gt;{ x.AddSecurityDefinition(\"X-API-KEY\",new OpenApiSecurityScheme { Name = \"X-API-KEY\", Type = SecuritySchemeType.ApiKey, Scheme = \"ApiKeyScheme\", In = ParameterLocation.Header, Description = \"ApiKey must appear in header\" }); x.AddSecurityRequirement(new OpenApiSecurityRequirement { { new OpenApiSecurityScheme { Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = \"X-API-KEY\" }, In = ParameterLocation.Header }, new string[]{} } });});var app = builder.Build();// Configure the HTTP request pipeline.if (app.Environment.IsDevelopment()){ app.UseSwagger(); app.UseSwaggerUI();}app.UseMiddleware&lt;ApiKeyMiddleware&gt;();app.UseHttpsRedirection();app.UseAuthorization();app.MapControllers();app.Run();Burada dikkat edilmesi gereken ikinci nokta swagger yapƒ±landƒ±rmasƒ±. Swagger ile api key g√∂nderimi yapmak istersek AddSwaggerGen metodunda AddSecurityDefinition ve AddSecurityRequirement yapƒ±landƒ±rmasƒ±nƒ± yapƒ±yoruz.appsettings.json{ \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\", \"X-API-KEY\": \"QXBpS2V5TWlkZGxld2FyZQ==\"}Atrribute Kullanƒ±mƒ±Attributes isimli klas√∂r olu≈üturup i√ßerisine ApiKeyAttribute isminde bir sƒ±nƒ±f ekliyoruz.using Microsoft.AspNetCore.Mvc.Filters;namespace ApiKeyAuthentication.Attributes{ [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)] public class ApiKeyAttribute : Attribute, IAsyncActionFilter { private const string ApiKey = \"X-API-KEY\"; public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next) { if (!context.HttpContext.Request.Headers.TryGetValue(ApiKey, out var apiKeyVal)) { context.HttpContext.Response.StatusCode = 401; await context.HttpContext.Response.WriteAsync(\"Api Key not found!\"); } var appSettings = context.HttpContext.RequestServices.GetRequiredService&lt;IConfiguration&gt;(); var apiKey = appSettings.GetValue&lt;string&gt;(ApiKey); if (!apiKey.Equals(apiKeyVal)) { context.HttpContext.Response.StatusCode = 401; await context.HttpContext.Response.WriteAsync(\"Unauthorized client\"); } } }}Middleware sƒ±nƒ±fƒ±nda yaptƒ±ƒüƒ±mƒ±z gibi Attribute ve IAsyncActionFilter sƒ±nƒ±f ve interfacelerden t√ºreyen ApiKeyAttribute isimli sƒ±nƒ±fta implement i≈ülemi ile OnActionExecutionAsync metodunda HttpContext Header i√ßerisinde apikey bilgisine eri≈üip i≈ülemi devam ettiriyoruz. [AttributeUsage] burada dikkat etmemiz gereken b√∂l√ºmd√ºr. Bu attribute ile sƒ±nƒ±fƒ±mƒ±zƒ±n clasƒ±n hangi b√∂l√ºmlerinde kullanƒ±labileceƒüini ayarlƒ±yoruz. ApiKeyAttribute yapƒ±landƒ±rmamƒ±zƒ± a≈üaƒüƒ±daki gibi kullanabiliriz.using ApiKeyAuthentication.Attributes;using Microsoft.AspNetCore.Mvc;namespace ApiKeyAuthentication.Controllers{ [ApiController] [Route(\"[controller]\")] [ApiKey] public class WeatherForecastController : ControllerBase { private static readonly string[] Summaries = new[] { \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\" }; private readonly ILogger&lt;WeatherForecastController&gt; _logger; public WeatherForecastController(ILogger&lt;WeatherForecastController&gt; logger) { _logger = logger; } [HttpGet(Name = \"GetWeatherForecast\")] public IEnumerable&lt;WeatherForecast&gt; Get() { return Enumerable.Range(1, 5).Select(index =&gt; new WeatherForecast { Date = DateTime.Now.AddDays(index), TemperatureC = Random.Shared.Next(-20, 55), Summary = Summaries[Random.Shared.Next(Summaries.Length)] }) .ToArray(); } }}401 ErrorAuthorizeSuccessProje dosyalarƒ±nƒ± buradan indirebilirsiniz. Bir sonraki makalede g√∂r√º≈ümek √ºzere." }, { "title": "Repository Pattern ƒ∞le .NET 6 Web API √úzerinde Multiple DbContext Kullanƒ±mƒ±", "url": "/posts/repository-pattern-ile-net-6-web-api-uzerinde-multiple-dbcontext-kullanimi/", "categories": "ASP.NET CORE", "tags": "asp.net core, net 6.0, web api, api key, repository pattern", "date": "2022-04-17 19:33:00 +0300", "snippet": "Merhabalar bu makalede bir Asp .Net Web API projesinde multiple DbContext kullanƒ±mƒ±na deƒüineceƒüim. Senaryoda 2 farklƒ± veritabanƒ±na Repository Pattern yardƒ±mƒ±yla DbContext deƒüi≈ütirerek baƒülantƒ± yapa...", "content": "Merhabalar bu makalede bir Asp .Net Web API projesinde multiple DbContext kullanƒ±mƒ±na deƒüineceƒüim. Senaryoda 2 farklƒ± veritabanƒ±na Repository Pattern yardƒ±mƒ±yla DbContext deƒüi≈ütirerek baƒülantƒ± yapacaƒüƒ±m. √ñncelikle bir Asp .Net Web API (6.0) projesi olu≈üturuyorum. ƒ∞lk i≈ü olarak EntityFrameWork paketlerini y√ºkl√ºyorum.Install-Package Microsoft.EntityFrameworkCore -Version 6.0.4Install-Package Microsoft.EntityFrameworkCore.SqlServer -Version 6.0.4Install-Package Microsoft.EntityFrameworkCore.Tools -Version 6.0.4Paket y√ºklemesi tamamlandƒ±ƒüƒ±nda DbContext sƒ±nƒ±flarƒ±nƒ± olu≈üturuyorum. Proje dizinine Data isminde klas√∂r ekliyorum. Data klas√∂r√ºne DbOneContext, DbTwoContext ve BaseContext isminde √º√ß class ekliyorum. BaseContext clasƒ±nƒ± DbContext sƒ±nƒ±fƒ±ndan t√ºretip constructor ile DbContextOptions parametresini alƒ±yorum.using Microsoft.EntityFrameworkCore;namespace MultipleDbContext.Data;public class BaseContext : DbContext{ public BaseContext(DbContextOptions options): base(options) { }}DbOneContext ve DbTwoContext sƒ±nƒ±flarƒ± BaseContext den t√ºretip a≈üaƒüƒ±daki ≈üekilde implemente ediyorum.using Microsoft.EntityFrameworkCore;namespace MultipleDbContext.Data;public class DbOneContext : BaseContext{ public DbOneContext(DbContextOptions&lt;DbOneContext&gt; options) : base(options) { }}using Microsoft.EntityFrameworkCore;namespace MultipleDbContext.Data;public class DbTwoContext : BaseContext{ public DbTwoContext(DbContextOptions&lt;DbTwoContext&gt; options) : base(options) { }}DbConext sƒ±nƒ±flarƒ±nƒ± olu≈üturduktan sonra appsettings.json dosyasƒ±na girip ConnectionString tanƒ±mlarƒ±nƒ± yapƒ±yorum.{ \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\", \"ConnectionStrings\": { \"DbOneContext\": \"Data Source=.;Initial Catalog=DBONE;User ID=sa;Password=Pw123456\", \"DbTwoContext\": \"Data Source=.;Initial Catalog=DBTWO;User ID=sa;Password=Pw123456\" }}Daha sonra Program.cs dosyasƒ±nƒ±n i√ßerisinde projeye contextleri tanƒ±tƒ±yorum.builder.Services.AddDbContext&lt;DbOneContext&gt;(options =&gt; options.UseSqlServer(builder.Configuration.GetConnectionString(\"DbOneContext\")));builder.Services.AddDbContext&lt;DbTwoContext&gt;(options =&gt; options.UseSqlServer(builder.Configuration.GetConnectionString(\"DbTwoContext\")));Projeye Models isminde bir klas√∂r ekliyorum. ƒ∞√ßerisine veritabanƒ± tablosunu olu≈üturacaƒüƒ±m entity i√ßin bir Book isminde class ekliyorum.namespace MultipleDbContext.Models{ public class Book { public int Id { get; set; } public string Name { get; set; } public string Anchor { get; set; } }}Daha sonra BaseContext i√ßerisinde DbSet ile Book entity sƒ±nƒ±fƒ±nƒ± tanƒ±tƒ±yorum.using Microsoft.EntityFrameworkCore;using MultipleDbContext.Models;namespace MultipleDbContext.Data;public class BaseContext : DbContext{ public BaseContext(DbContextOptions options): base(options) { } public DbSett&lt;Book&gt; Books { get; set; }}Data klas√∂r√ºne DbContextFactory isminde bir sƒ±nƒ±f olu≈üturuyorum. Bu sƒ±nƒ±fta bir IDictionary i√ßersinde contextName deƒüeri ile ilgili BaseContext nesnesini geri alƒ±yoruz.namespace MultipleDbContext.Data{ public class DbContextFactory { private readonly IDictionary&lt;string, BaseContext&gt; _context; public DbContextFactory(IDictionary&lt;string, BaseContext&gt; context) { _context = context; } public BaseContext GetContext(string contextName) { return _context[contextName]; } }}Artƒ±k Repository yapƒ±sƒ±nƒ± olu≈üturabilirim. √ñncelikle proejeye Repository isminde bir klas√∂r olu≈üturup i√ßerisine IBookReposiory adƒ±nda bir interface ve BookRepository adƒ±nda bir class ekliyorum.using MultipleDbContext.Models;namespace MultipleDbContext.Repository;public interface IBookRepository{ void Add(Book entity,string contextName); void Update(Book entity, string contextName); List&lt;Book&gt; Get(string contextName);}ContextName bilgisini parametre ile g√∂nderiyorum. Bu ≈üekilde DbContext ayrƒ±mƒ±nƒ± yapacaƒüƒ±m.using Microsoft.EntityFrameworkCore;using MultipleDbContext.Data;using MultipleDbContext.Models;namespace MultipleDbContext.Repository{ public class BookRepository : IBookRepository { DbContextFactory _contexts; public BookRepository(DbContextFactory contexts) { _contexts = contexts; } public void Add(Book entity, string contextName) { var context = _contexts.GetContext(contextName); var addedEntity = context.Attach(entity); addedEntity.State = EntityState.Added; context.SaveChanges(); } public void Update(Book entity, string contextName) { var context = _contexts.GetContext(contextName); var updatedEntity = context.Entry(entity); updatedEntity.State = EntityState.Modified; context.SaveChanges(); } public List&lt;Book&gt; Get(string contextName) { var context = _contexts.GetContext(contextName); return context.Books.ToList(); } }}Bu sƒ±nƒ±fta constructor i√ßerisinde DbContextFactory ile DbContext nesnelerini Repository i√ßerisine ta≈üƒ±yorum. Parametre ile g√∂nderilen DbContexti √ßalƒ±≈ütƒ±rƒ±yorum. Bu yapƒ±landƒ±rma i√ßin AutoFac IOC container‚Äôƒ±nƒ± projeye ekliyorum.Install-Package Autofac -Version 6.3.0Install-Package Autofac.Extensions.DependencyInjection -Version 7.2.0Paketi indirdikten sonra hemen Program.cs i√ßerisinde AutoFac yapƒ±landƒ±rmasƒ±nƒ± yapƒ±yorum.builder.Host.UseServiceProviderFactory(new AutofacServiceProviderFactory());builder.Host.ConfigureContainer&lt;ContainerBuilder&gt;(b =&gt; b.RegisterModule(new AutoFacModule()));Burada registerModule ile kendi olu≈üturduƒüum AutoFacModule clasƒ±nƒ± tanƒ±mlƒ±yorum.public class AutoFacModule : Module{ protected override void Load(ContainerBuilder builder) { builder.RegisterType&lt;DbOneContext&gt;().As&lt;BaseContext&gt;(); builder.RegisterType&lt;DbTwoContext&gt;().As&lt;BaseContext&gt;(); builder.Register(ctx =&gt; { var allContext = new Dictionary&lt;string, BaseContext&gt;(); allContext.Add(\"DbOneContext\", ctx.Resolve&lt;DbOneContext&gt;()); allContext.Add(\"DbTwoContext\", ctx.Resolve&lt;DbTwoContext&gt;()); return new DbContextFactory(allContext); }); builder.RegisterType&lt;BookRepository&gt;().As&lt;IBookRepository&gt;(); }}AutoFac IOC yapƒ±landƒ±rmasƒ± sonrasƒ±nda controllers klas√∂r√ºne BookController isminde bir web api controller ekliyorum.using Microsoft.AspNetCore.Http;using Microsoft.AspNetCore.Mvc;using MultipleDbContext.Models;using MultipleDbContext.Repository;namespace MultipleDbContext.Controllers{ [Route(\"api/[controller]\")] [ApiController] public class BookController : ControllerBase { private IBookRepository _bookRepository; public BookController(IBookRepository bookRepository) { _bookRepository = bookRepository; } [HttpGet] [Route(\"{contextName}\")] public List&lt;Book&gt; Get([FromRoute] string contextName) { var books = _bookRepository.Get(contextName); return books; } [HttpPost] [Route(\"{contextName}\")] public IActionResult Post([FromRoute] string contextName,[FromBody] Book book) { try { _bookRepository.Add(book,contextName); return Ok(); } catch (Exception e) { return BadRequest(e.Message); } } [HttpPut] [Route(\"{contextName}\")] public IActionResult Put([FromRoute] string contextName, [FromBody] Book book) { try { _bookRepository.Update(book, contextName); return Ok(); } catch (Exception e) { return BadRequest(e.Message); } } }}BookController‚Äôda g√∂r√ºld√ºƒü√º √ºzere contextName parametresi ile hangi dbContext‚Äôe baƒülanacaƒüƒ±mƒ± alƒ±yorum. Daha sonra BookRepository yardƒ±mƒ±yla CRUD i≈ülemlerini yapacaƒüƒ±m. Controller yapƒ±sƒ±nƒ± olu≈üturduktan sonra Migration yardƒ±mƒ±yla DbOne ve DbTwo veritabanlarƒ±nƒ± olu≈üturuyorum. Birden fazla DbContext dosyasƒ± olduƒüu i√ßin migration i≈ülemi yaparken hangisini olu≈üturacaƒüƒ±nƒ± belirtmek gerekiyor.Add-Migration -Context DbOneContextUpdate-Database -Context DbOneContextAdd-Migration -Context DbTwoContextUpdate-Database -Context DbTwoContextMigration i≈ülemleri sonrasƒ±nda a≈üaƒüƒ±daki gibi veritabanlarƒ±nƒ±n olu≈ümu≈ü olduƒüunu g√∂rebilirsiniz.Artƒ±k projeyi √ßalƒ±≈ütƒ±rƒ±p Swagger yardƒ±mƒ± ile CRUD i≈ülemlerini yapmaya ba≈ülƒ±yorum. DbOneContext i√ßin Post ve Get isteklerini yapƒ±yorum.DbOneContext-PostDbOneContext-GetDbOneContext parametresi ile DbOne veritabanƒ±na Post ve Get aksiyonlarƒ± ile CRUD i≈ülemleri yaptƒ±m. Aynƒ± ≈ûeklide DbTwoContext parametresi ile DbTwo veritabanƒ±na CRUD i≈ülemlerini yapƒ±yorum.DbTwoContext-PostDbTwoContext-GetVeritabanƒ± VerileriBu ≈üekilde birden fazla dbcontext yapƒ±sƒ±nƒ± nasƒ±l √ßalƒ±≈ütƒ±rabileceƒüimiz ile ilgili bir √∂rnek ger√ßekle≈ütirdik. Proje dosyalarƒ±nƒ± buradan indirebilirsiniz. Bir sonraki makalede g√∂r√º≈ümek √ºzere." }, { "title": "ASP.NET Core Distributed Redis Cache Kullanƒ±mƒ±", "url": "/posts/aspnet-core-redis-cache-kullanimi/", "categories": "ASP.NET CORE, REDIS", "tags": "asp.net core, net 6.0, web api, api key, redis, cache", "date": "2022-04-17 19:33:00 +0300", "snippet": "Merhabalar bu makalede ASP.NET Core projesinde Redis ile distributed cache yapƒ±sƒ±nƒ± inceleyeceƒüiz. √ñncelikle Redis hakkƒ±nda bilgi sahibi olmak isterseniz Redis Nedir? Ne ƒ∞≈üe Yarar? Nerelerde Kullan...", "content": "Merhabalar bu makalede ASP.NET Core projesinde Redis ile distributed cache yapƒ±sƒ±nƒ± inceleyeceƒüiz. √ñncelikle Redis hakkƒ±nda bilgi sahibi olmak isterseniz Redis Nedir? Ne ƒ∞≈üe Yarar? Nerelerde Kullanƒ±lƒ±r? konusunu incelediƒüim makalemi okuyabilirsiniz. √ñncelikle bir netcorerediscache isminde ASP.NET Core Web API projesi olu≈üturuyorum. Projeye Microsoft.Extensions.Caching.StackExchangeRedis paketini ekliyorum.dotnet add package Microsoft.Extensions.Caching.StackExchangeRedisStackExchangeRedis eklendikten sonra Program.cs i√ßerisinde AddStackExchangeRedisCache metodunu ekliyorum. builder.Services.AddStackExchangeRedisCache(options =&gt; { options.ConfigurationOptions = new ConfigurationOptions { EndPoints = { \"localhost:6379\" }, Password = \"msuzen123!\", }; });Projeyi olu≈üturduƒüumda standart olu≈üan WeatherForecastController‚Äôda cache i≈ülemlerini yapƒ±yorum. List&lt;string&gt; dataList = new List&lt;string&gt;(); string serializedCacheData; var cacheKey = \"summaries\"; var cacheData = _distributedCache.Get(cacheKey); if (cacheData != null) { serializedCacheData = Encoding.UTF8.GetString(cacheData); dataList = JsonSerializer.Deserialize&lt;List&lt;string&gt;&gt;(serializedCacheData); }_distributedCache.Get(cacheKey) ile ‚Äúsummaries‚Äù anahtarƒ±ndaki cache deƒüerini alƒ±yorum. Eƒüer deƒüer null deƒüil ise deƒüer string listesine deserialize yaparak set ediyorum. Eƒüer null ise a≈üaƒüƒ±daki kod bloƒüu ile bu sefer veritabanƒ±ndan yada √∂rnekteki gibi sabit listeyi byte[] tipinde serialize yaparak cache ekleme i≈ülemi yapƒ±yorum. else { dataList = Summaries.ToList(); serializedCacheData = JsonSerializer.Serialize(dataList); cacheData = Encoding.UTF8.GetBytes(serializedCacheData); _distributedCache.Set(cacheKey,cacheData,new DistributedCacheEntryOptions() { AbsoluteExpiration = DateTime.Now.AddMinutes(10), SlidingExpiration = TimeSpan.FromMinutes(2), }); } return dataList;Burada DistributedCacheEntryOptions parametrelerinden iki tanesine deƒüineceƒüim. AbsoluteExpiration: Verilen s√ºre sonunda cachedeki verinin expire olmasƒ±nƒ± saƒülar. SlidingExpiration: Veri expire olmadan istendiƒüinde istek sonrasƒ±nda expire s√ºresine verilen s√ºre eklenir.T√ºm controller kod bloƒüu a≈üaƒüƒ±daki gibidir.using System.Text;using System.Text.Json;using Microsoft.AspNetCore.Mvc;using Microsoft.Extensions.Caching.Distributed;namespace netcorerediscache.Controllers{ [ApiController] [Route(\"[controller]\")] public class WeatherForecastController : ControllerBase { private IDistributedCache _distributedCache; private static readonly string[] Summaries = new[] { \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\" }; public WeatherForecastController(IDistributedCache distributedCache) { _distributedCache = distributedCache; } [HttpGet(Name = \"GetWeatherForecast\")] public List&lt;string&gt; Get() { List&lt;string&gt; dataList = new List&lt;string&gt;(); string serializedCacheData; var cacheKey = \"summaries\"; var cacheData = _distributedCache.Get(cacheKey); if (cacheData != null) { serializedCacheData = Encoding.UTF8.GetString(cacheData); dataList = JsonSerializer.Deserialize&lt;List&lt;string&gt;&gt;(serializedCacheData); } else { dataList = Summaries.ToList(); serializedCacheData = JsonSerializer.Serialize(dataList); cacheData = Encoding.UTF8.GetBytes(serializedCacheData); _distributedCache.Set(cacheKey,cacheData,new DistributedCacheEntryOptions() { AbsoluteExpiration = DateTime.Now.AddMinutes(10), SlidingExpiration = TimeSpan.FromMinutes(2), }); } return dataList; } }} Projeyi √ßalƒ±≈ütƒ±rƒ±p swagger yardƒ±mƒ±yla test ettiƒüimde ilk istekte cache bo≈ü olduƒüu i√ßin cache ekleyip statik veriyi geri d√∂nd√ºr√ºyor. ƒ∞kinci istekte cache verisini geri d√∂nd√ºr√ºyor. Bir sonraki makalede g√∂r√º≈ümek √ºzere.Kaynaklarhttps://codewithmukesh.com/blog/redis-caching-in-aspnet-core/https://www.c-sharpcorner.com/article/distributed-redis-caching-in-asp-net-core/" }, { "title": "Redis Nedir? Ne ƒ∞≈üe Yarar? Nasƒ±l Kullanƒ±lƒ±r?", "url": "/posts/redis-nedir-ne-ise-yarar-nasil-kullanilir/", "categories": "REDIS", "tags": "redis, cache", "date": "2022-04-08 19:33:00 +0300", "snippet": "Uygulamalarƒ±mƒ±zda verileri servislerden yada veri tabanlarƒ±ndan listeleyip kullanƒ±cƒ±lara g√∂stermekteyiz. Veri yoƒüunluƒüu nedeniyle performans sorunlarƒ± ya≈üamamak i√ßin verilerde deƒüi≈üiklik olmadƒ±ƒüƒ±nd...", "content": "Uygulamalarƒ±mƒ±zda verileri servislerden yada veri tabanlarƒ±ndan listeleyip kullanƒ±cƒ±lara g√∂stermekteyiz. Veri yoƒüunluƒüu nedeniyle performans sorunlarƒ± ya≈üamamak i√ßin verilerde deƒüi≈üiklik olmadƒ±ƒüƒ±nda, veri kopyasƒ±nƒ± sunucu (RAM) √ºzerinde tutarak istek geldiƒüinde veritabanƒ±na gitmeden RAM √ºzerinden okuyup g√∂sterilmesi i≈ülemlerine In Memory Cache denilmektedir. Bu cache i≈ülemlerini anahtar-deƒüer (key-value) NoSQL veritabanlarƒ± sayesinde yapabiliyoruz.Redis (Remote Dictionary Service) Nedir?Redis caching, message broker, session y√∂netimi amacƒ±yla kullanƒ±lan C ile yazƒ±lmƒ±≈ü key-value yapƒ±sƒ±nda tasarlanmƒ±≈ü bir NoSQL veritabanƒ±dƒ±r. Redis, verileri RAM √ºzerinde saklamasƒ±nƒ±n yanƒ± sƒ±ra isteƒüimize g√∂re verileri belirli zaman aralƒ±klarƒ±yla disk‚Äôe kaydedebiliriz. Bu ≈üekilde veri tutarlƒ±lƒ±ƒüƒ±nƒ± saƒülayabiliriz.Redis Ne ƒ∞≈üe Yarar?Redis caching, message broker, session y√∂netimi amacƒ±yla kullanƒ±lmaktadƒ±r.CachingVeritabanƒ± sorgularƒ±nƒ± √∂n belleƒüe (RAM) alarak performans saƒülayabiliriz. Redis ile istenen veriler mili saniyler s√ºresinde geri d√∂nd√ºr√ºlebilir. Bu nedenle sƒ±klƒ±kla caching i≈ülemlerinde Redis kullanƒ±lmaktadƒ±r.Session StoreUygulamalarƒ±mƒ±zda Redis ile kimlik bilgilerini, kullanƒ±cƒ± bilgilerini, vb. gibi session verilerini y√ºksek hƒ±zlarda okuyabilmenize olanak saƒülar.Message BrokerRedis 2.0‚Äôdan s√ºr√ºm√ºnden itibaren Pub/Sub i≈ülevini destekleyen komutlara sahiptir.Redis Nasƒ±l Kullanƒ±lƒ±r?Redis paketlerinin kurulu olduƒüu dizinde \"redis-cli.exe\" uygulamasƒ±nƒ± √ßalƒ±≈ütƒ±rƒ±yorum. Redis i√ßin bir ≈üifre belirlediƒüimizde baƒülantƒ± i√ßin ‚Äúauth‚Äù komutunu kullanmalƒ±yƒ±z.127.0.0.1:6379&gt; set userName Murat(error) NOAUTH Authentication required.≈ûifre g√∂nderilmeden herhangi bir komut √ßalƒ±≈ütƒ±rƒ±ldƒ±ƒüƒ±nda yukarƒ±daki gibi baƒülantƒ± hatasƒ± ile kar≈üƒ±la≈üƒ±rƒ±z.127.0.0.1:6379&gt; auth password123! OK127.0.0.1:6379&gt; set fullName MuratOK≈ûifreyi auth komutu ile set ettiƒüimizde ‚ÄúuserName‚Äù anahtarƒ±na ‚ÄúMurat‚Äù deƒüerini kayƒ±t edebiliyoruz. Veriler &lt;key,value&gt; ≈üeklinde string olarak tutulmaktadƒ±r.127.0.0.1:6379&gt; set fullName \"Murat\"OK127.0.0.1:6379&gt; get fullName\"Murat\"Set komutuyla deƒüer atamasƒ± yapƒ±lƒ±yor, Get komutuyla g√∂nderilen anahtar bilgisinin deƒüeri alƒ±nƒ±yor. Append komutu ile string bir deƒüerin sonuna string veri ekleme i≈ülemi yapƒ±lmaktadƒ±r.127.0.0.1:6379&gt; append fullName \" Suzen\"(integer) 11127.0.0.1:6379&gt; get fullName\"Murat Suzen\"Keys * komutu ile b√ºt√ºn anahtarlarƒ±n (key) listelenmesini saƒülayabiliriz.127.0.0.1:6379&gt; keys *1) \"fullName\"Del komutu ile verilen anahtar bilgisi silinir.127.0.0.1:6379&gt; del fullName(integer) 1127.0.0.1:6379&gt; get fullName(nil)Flushall komutu ile t√ºm veriler silinir.127.0.0.1:6379&gt; flushallOKExists komutu ile g√∂nderilen anahtarƒ±n (key) olup olmadƒ±ƒüƒ±nƒ± kontrol edebiliriz127.0.0.1:6379&gt; set key1 \"Merhaba\"OK127.0.0.1:6379&gt; exists key1(integer) 1127.0.0.1:6379&gt; exists key2(integer) 0Diƒüer Redis komutlarƒ±na buradan ula≈üabilirsiniz. Ayrƒ±ca verileri g√∂r√ºnt√ºleyip y√∂netebileceƒüiniz Another Redis Desktop Manager uygulamasƒ±nƒ± buradan indirebilirsiniz." }, { "title": ".NET Core ile Repository Pattern Kullanƒ±mƒ±", "url": "/posts/net-core-ile-repository-pattern-kullanimi/", "categories": "ASP.NET CORE", "tags": "asp.net core, web api", "date": "2021-11-26 19:33:00 +0300", "snippet": "Uygulama geli≈ütirirken kullanƒ±cƒ±dan veri alƒ±r yada kullanƒ±cƒ±ya veriler listeleriz. Bu verileri alƒ±rken yada listelerken herhangi bir veritabanƒ±ndan (ekleme,silme,g√ºncelleme,listeleme) CRUD i≈ülemler...", "content": "Uygulama geli≈ütirirken kullanƒ±cƒ±dan veri alƒ±r yada kullanƒ±cƒ±ya veriler listeleriz. Bu verileri alƒ±rken yada listelerken herhangi bir veritabanƒ±ndan (ekleme,silme,g√ºncelleme,listeleme) CRUD i≈ülemleri yapƒ±yoruz. Bu makalede .NET Core ile veritabanƒ± i≈ülemlerinde Repository Pattern yakla≈üƒ±mƒ±nƒ± anlatmaya √ßalƒ±≈üacaƒüƒ±m.Repository Pattern Nedir?Veritabanƒ± i≈ülemleri i√ßin yazdƒ±ƒüƒ±mƒ±z kod bloklarƒ±nƒ±n tekrar kullanƒ±mƒ±nƒ± saƒülayan bir yakla≈üƒ±mdƒ±r. Veritabanƒ± i≈ülemleri i√ßin s√ºrekli farklƒ± kodlar yazmaktansa, Repsitory Pattern yakla≈üƒ±mƒ± ile tekrar kullanabileceƒüimiz kod bloklarƒ± sayesinde karma≈üƒ±klƒ±ktan kurtulup y√∂netilebilir bir yapƒ± olu≈üturabiliriz. √ñrnek bir proje olu≈üturup yakla≈üƒ±mƒ± inceleyelim.dotnet new slnYeni bir solution olu≈üturduktan sonra Core, Entities, DataAccess,Business katmanlarƒ±nƒ± ve WebAPI projesini olu≈üturacaƒüƒ±m.dotnet new classlib -o reppat.Coredotnet new classlib -o reppat.Entitiesdotnet new classlib -o reppat.DataAccessdotnet new classlib -o reppat.Businessdotnet new webapp -o reppat.WebAPICore Katmanƒ±T√ºm katmanlarda kullanƒ±labilecek Extensions, Interfaces, Aspects vb yapƒ±larƒ± i√ßermektedir.Entities Katmanƒ±Veri modellerinin (Entity,Dtos vb) i√ßerdiƒüi katmandƒ±r.DataAccess Katmanƒ±Veri saƒülayƒ±cƒ±larƒ± ile (SQL, MongoDb vb.) baƒülantƒ± kurabileceƒüimiz katmandƒ±r.Business Katmanƒ±Veri katmanƒ± ve proje aray√ºz√º arasƒ±ndaki k√∂pr√º olan i≈ü katmanƒ±dƒ±r.Projeyi ve katmanlarƒ± Solution‚Äôa ekleyelim.dotnet sln add reppat.WebAPI/reppat.WebAPI.csprojdotnet sln add reppat.Core/reppat.Core.csprojdotnet sln add reppat.Entities/reppat.Entities.csprojdotnet sln add reppat.DataAccess/reppat.DataAccess.csprojdotnet sln add reppat.Business/reppat.Business.csprojProje ve katmanlarƒ±n referanslarƒ±nƒ± ekleyelim.dotnet add reppat.Entities/reppat.Entities.csproj reference reppat.Core/reppat.Core.csprojdotnet add reppat.DataAccess/reppat.DataAccess.csproj reference reppat.Core/reppat.Core.csprojdotnet add reppat.DataAccess/reppat.DataAccess.csproj reference reppat.Entities/reppat.Entities.csprojdotnet add reppat.Business/reppat.Business.csproj reference reppat.DataAccess/reppat.DataAccess.csprojdotnet add reppat.WebAPI/reppat.WebAPI.csproj reference reppat.Core/reppat.Core.csprojdotnet add reppat.WebAPI/reppat.WebAPI.csproj reference reppat.Entities/reppat.Entities.csprojdotnet add reppat.WebAPI/reppat.WebAPI.csproj reference reppat.Business/reppat.Business.csprojReferans eklemeleri tamamlandƒ±ktan sonra a≈üaƒüƒ±daki gibi bir klas√∂r ve ili≈üki yapƒ±sƒ± olacaktƒ±r.Reppat SolutionProje sƒ±nƒ±flarƒ±mƒ±zƒ± olu≈üturduƒüumuza g√∂re √∂ncelikle Core katmanƒ± ile ba≈ülayalƒ±m. Entities klas√∂r√º ve i√ßerisine IEntity.cs isminde interface ekliyorum. IEntity sƒ±nƒ±fƒ±nƒ±n amacƒ± birazdan geli≈ütirmesini yapacaƒüƒ±mƒ±z Repository Pattern prensibi i√ßin veri sƒ±nƒ±flarƒ±nƒ± filtrelemektir.namespace reppat.Core.Entities{ public interface IEntity { }}IEntity interface‚Äôinin eklenmesinden sonra yine Core katmanƒ±na DataAccess klas√∂r√º ve i√ßerisine IBaseEntityRepository isminde bir interface ekliyorum. Bu interface Repository Pattern yapƒ±sƒ±nƒ±n temelini olu≈üturmaktadƒ±r.using reppat.Core.Entities;using System;using System.Collections.Generic;using System.Linq;using System.Linq.Expressions;using System.Text;using System.Threading.Tasks;namespace reppat.Core.DataAccess{ public interface IBaseEntityRepository&lt;T&gt; where T : class, IEntity, new() { T Get(Expression&lt;Func&lt;T, bool&gt;&gt; filter); List&lt;T&gt; GetList(Expression&lt;Func&lt;T, bool&gt;&gt; filter = null); T Add(T entity); T Update(T entity); void Delete(T entity); void AddRange(List&lt;T&gt; entities); }}Yukarƒ±daki kod bloƒüunu inceleyelim. IBaseEntityRepository‚Äôden t√ºreyebilecek (implement edilebilecek) sƒ±nƒ±flar i√ßin bir where ko≈üulu bulunmaktadƒ±r. Bu where ko≈üulu g√∂r√ºld√ºƒü√º gibi T objesinin bir class ve new() yani instance alƒ±nabilecek bir sƒ±nƒ±f olmasƒ± gerekmektedir. Ayrƒ±ca daha √∂nceki kod bloƒüunda tanƒ±mladƒ±ƒüƒ±mƒ±z IEntity interface‚Äôinden t√ºreyen sƒ±nƒ±flarƒ± i√ßermesi gerekmektedir. Bu ≈üekilde bir sƒ±nƒ±fƒ±n filtrelenmesi saƒülamaktadƒ±r. Metodlarƒ± incelediƒüimizde bir Expression filtresi g√∂r√ºyoruz. Bu filteler ile veritabanƒ±ndan t√ºm veri getirilmeden √∂nce bir filtre g√∂nderilerek sadece istenilen bilgilerin listelenmesi saƒülanmaktadƒ±r.Veritabanƒ± i≈ülemlerini genellikle ORM (Entity Framework, Hibernate vb.) ara√ßlarƒ± ile yapƒ±yoruz. Kullandƒ±ƒüƒ±mƒ±z ORM aracƒ±na g√∂re Core katmanƒ±nda klas√∂r olu≈üturuyorum. Ben EntityFramework isminde bir klas√∂r olu≈üturup i√ßerisine EfBaseEntityRepository isminde bir sƒ±nƒ±f ekliyorum. EfBaseEntityRepository sƒ±nƒ±fƒ±nƒ± IBaseEntityRepository interface‚Äôden t√ºretiyoruz. Core katmanƒ±na nuget paket y√∂netimi ile Microsoft.EntityFrameworkCore paketini ekliyorum.Install-Package Microsoft.EntityFrameworkCore -Version 6.0.0using Microsoft.EntityFrameworkCore;using reppat.Core.Entities;using System;using System.Collections.Generic;using System.Linq;using System.Linq.Expressions;using System.Text;using System.Threading.Tasks;namespace reppat.Core.DataAccess.EntityFramework{ public class EfBaseEntityRepository&lt;TEntity, TContext&gt; : IBaseEntityRepository&lt;TEntity&gt; where TEntity : class, IEntity, new() where TContext : DbContext, new() { public TEntity Add(TEntity entity) { throw new NotImplementedException(); } public void AddRange(List&lt;TEntity&gt; entities) { throw new NotImplementedException(); } public void Delete(TEntity entity) { throw new NotImplementedException(); } public TEntity Get(Expression&lt;Func&lt;TEntity, bool&gt;&gt; filter) { throw new NotImplementedException(); } public List&lt;TEntity&gt; GetList(Expression&lt;Func&lt;TEntity, bool&gt;&gt; filter = null) { throw new NotImplementedException(); } public TEntity Update(TEntity entity) { throw new NotImplementedException(); } }}Yukarƒ±daki kod bloƒüunu inceleyelim. G√∂r√ºd√ºƒü√º gibi TEntity ve TContext isimlerinde iki parametre alan bir sƒ±nƒ±f olu≈üturduk. TEntity parametresi IEntity interface‚Äôinden t√ºretilen ve instance alƒ±nabilecek sƒ±nƒ±f tipinde olacaƒüƒ±nƒ± where ko≈üulu ile anlayabiliyoruz. TContext isimli parametresinin instance alƒ±nabilen ve Entity Framework ORM aracƒ±nƒ±n veritabanƒ± i≈ülemlerini yapƒ±landƒ±rabildiƒüimiz DbContext tipinde olacaƒüƒ±nƒ± g√∂r√ºyoruz. Parametreleri inceledeƒüimize g√∂re metodlarƒ± geli≈ütirme i≈ülemine ge√ßebiliriz.public TEntity Get(Expression&lt;Func&lt;TEntity, bool&gt;&gt; filter) { using (var context = new TContext()) { return context.Set&lt;TEntity&gt;().SingleOrDefault(filter); } }Parametre olarak g√∂nderilen TEntity, sƒ±nƒ±fƒ±n where ko≈üulundan ge√ßtiƒüine g√∂re artƒ±k bu sƒ±nƒ±fn bir DbContext i√ßerisindeki DbSet ile tanƒ±mlanan entity olduƒüunu biliyoruz. B√∂ylece using bloƒüunda context isminde aldƒ±ƒüƒ±m instance ile, DbContext‚Äôin Set metoduna TEntity‚Äôi tanƒ±tƒ±p SingleOrDefault yada FirstOrDefault metodlarƒ± ile parametreden gelen Expression filtresini veriyorum. Get metodu g√∂nderdiƒüimiz filtreye uygun olarak kayƒ±tlarƒ±mƒ±zƒ± geri d√∂nd√ºrecektir.public List&lt;TEntity&gt; GetList(Expression&lt;Func&lt;TEntity, bool&gt;&gt; filter = null) { using (var context = new TContext()) { return filter == null ? context.Set&lt;TEntity&gt;().ToList() : context.Set&lt;TEntity&gt;().Where(filter).ToList(); } }Get metodunda olduƒüu gibi GetList metodunda da aynƒ± i≈ülemleri yapƒ±yorum. Burada farklƒ± olarak filter parametresi eƒüer g√∂nderilmezse ve null ise ToList() metodu ile t√ºm listeyi geri d√∂nd√ºr√ºyorum.public TEntity Add(TEntity entity) { using (var context = new TContext()) { var addedEntity = context.Entry(entity); addedEntity.State = EntityState.Added; context.SaveChanges(); } return entity; }Add metodunda yaptƒ±ƒüƒ±m i≈ülem parametre olarak g√∂nderilen TEntity tipindeki entity objesini Context‚Äôin Entry metodu ile DbContext‚Äôe eklenmesini saƒülƒ±yorum ve State = EntityState.Added tanƒ±mƒ± ile yeni kayƒ±t ekleneceƒüini iletiyorum. Daha sonra context.SaveChanges(); metodu ile kayƒ±t i≈ülemini tamamlamƒ±≈ü oluyoruz.public TEntity Update(TEntity entity) { using (var context = new TContext()) { var updatedEntity = context.Entry(entity); updatedEntity.State = EntityState.Modified; context.SaveChanges(); } return entity; }Update metodunda Add i≈ülemlerinin aynƒ±sƒ±nƒ± yapƒ±yorum. Fakat buradaki farklƒ± olan kƒ±sƒ±m g√∂r√ºld√ºƒü√º √ºzere State = EntityState.Modified tanƒ±mƒ±. Bu tanƒ±m ile DbContext‚Äôe g√∂nderilen objenin yani veritabanƒ± tablosunun g√ºncelleneceƒüini iletiyorum. Burada kƒ±sa bir bilgiyle Entry ve Attach farkƒ±na deƒüinmek istiyorum. Attach metodu ile g√∂nderilen veritabanƒ± tablo objesinin sadece deƒüi≈üen alanlarƒ±n g√ºncellenmesi saƒülanƒ±r. Ancak Entry metodu tam tersine g√∂nderilen objenin t√ºm alanlarƒ±nƒ± g√ºncelleme i≈ülemi isteƒüidir. SaveChanges() ile i≈ülem yapƒ±lmƒ±≈ü olur. Siz uygulamanƒ±zƒ±n performans yapƒ±landƒ±rmasƒ±na g√∂re farklƒ± tercih edebilirsiniz.public void Delete(TEntity entity) { using (var context = new TContext()) { var deletedEntity = context.Entry(entity); deletedEntity.State = EntityState.Deleted; context.SaveChanges(); } }Delete metodunda g√∂nderilen entity State = EntityState.Deleted tanƒ±mƒ± ile silinecek olarak i≈üaretlenip SaveChanges() metodu ile silme i≈ülemi tamamlanƒ±yor.public void AddRange(List&lt;TEntity&gt; entities) { using (var context = new TContext()) { using (var transaction = context.Database.BeginTransaction()) { try { foreach (TEntity entity in entities) { var addedEntity = context.Entry(entity); addedEntity.State = EntityState.Added; } context.SaveChanges(); } catch (Exception e) { transaction.Rollback(); throw e.GetBaseException(); } transaction.Commit(); } } }AddRange metodunu √ºzerinde √ßalƒ±≈ütƒ±ƒüƒ±m bir projede ihtiya√ß dahilinde kullandƒ±ƒüƒ±m i√ßin sizlerle payla≈ümak istedim. Bu kod bloƒüu ile birden fazla TEntity parametresinin bir transaction bloƒüu a√ßarak ekleme i≈üemini yapƒ±yorum. Herhangi bir adƒ±mda hata ile kar≈üƒ±la≈üdƒ±ƒüƒ±nda transaction.Rollback() metodu ile yapƒ±lan t√ºm i≈ülemler geri alƒ±nmaktadƒ±r. Yazdƒ±ƒüƒ±mƒ±z EfBaseEntityRepository sƒ±nƒ±fƒ± sayesinde Repository Pattern altyapƒ±sƒ±nƒ± belli √∂l√ß√ºde geli≈ütirmi≈ü olduk.DataAccess katmanƒ±nda veritabanƒ± i≈ülemlerini yapmak i√ßin geli≈ütirmeye devam edelim. Interface ve bu interface‚Äôlerden t√ºreyecek service sƒ±nƒ±flarƒ± i√ßin DataAccess katmanƒ±na Abstract ve Concrete isimli iki klas√∂r olu≈üturuyorum. Concrete klas√∂r√ºn√ºn i√ßerisine kullandƒ±ƒüƒ±m ORM EntityFramework olduƒüu i√ßin EntityFramework isimli bir klas√∂r olu≈üturup onunda i√ßerisine Context isimli bir klas√∂r ekliyorum. Context klas√∂r√ºne reppatContext isminde bir sƒ±nƒ±f ekliyorum. Bu sƒ±nƒ±fƒ± DbContext‚Äôten t√ºretip ilgili configuration ayarlarƒ±nƒ± ekliyorum.Install-Package Microsoft.EntityFrameworkCore.SqlServer -Version 6.0.0Install-Package Microsoft.EntityFrameworkCore -Version 6.0.0Microsoft.EntityFrameworkCore ve Microsoft.EntityFrameworkCore.SqlServer paketlerinin kurulumunu yapƒ±yorum. OnConfiguring metodunu override yapƒ±p veritabanƒ± baƒülantƒ±sƒ±nƒ± ekliyorum.using Microsoft.EntityFrameworkCore;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace reppat.DataAccess.Concrete.EntityFramework.Contexts{ public class ReppatContext : DbContext { public ReppatContext() { } protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { optionsBuilder.UseSqlServer(\"Data Source=.;Initial Catalog=REPPAT;User ID=sa;Password=Pw123456\"); } }}Baƒülantƒ± ayarlarƒ±nƒ± eklediƒüimize g√∂re Entities katmanƒ±nda tablo yapƒ±larƒ±nƒ± i√ßeren sƒ±nƒ±flarƒ± olu≈üturabiriz. Ben bir tablo ile √∂rnek yapmak istiyorum. Bu nedenle Entities katmanƒ±na Concrete isminde bir klas√∂r olu≈üturup Personal isimli bir sƒ±nƒ±f ekliyorum. Bu √∂rnek projenin personel kart bilgilerini i√ßeren bir sƒ±nƒ±f olacak.using reppat.Core.Entities;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace reppat.Entities.Concrete{ public class Personal : IEntity { public int PersonalId { get; set; } public string FirstName { get; set; } public string LastName { get; set; } }}Personal sƒ±nƒ±fƒ±nƒ± DbSet ile ReppatContext i√ßerisine tanƒ±mlƒ±yorum.public DbSet&lt;Personal&gt; Personals { get; set; }Migration ile veritabanƒ± ve personal tablosunu olu≈üturalƒ±m. Migration olu≈üturmadan √∂nce eklememiz gereken bir paket bulunmaktadƒ±r. DataAccess katmanƒ±na Microsoft.EntityFrameworkCore.Tool paketini ve WebAPI projemize Microsoft.EntityFrameworkCore.Design paketini ekliyorum.Install-Package Microsoft.EntityFrameworkCore.Tools -Version 6.0.0Install-Package Microsoft.EntityFrameworkCore.Design -Version 6.0.0Add-Migration initialYukarƒ±daki kod ile initial isminde bir migration sƒ±nƒ±fƒ± olu≈üturuluyor. Update-Database komutu ile veritabanƒ± ve Personals tablosunu olu≈üturuyorum.Reppat DBDataAccess katmanƒ±nda Abstract klas√∂r√ºnde IPersonalDal isminde interface ekliyorum. IBaseEntityRepository interface‚Äôinden t√ºretip parametre olarak istediƒüimiz IEntity tipindeki Personal sƒ±nƒ±fƒ±nƒ± veriyorum.using reppat.Core.DataAccess;using reppat.Entities.Concrete;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace reppat.DataAccess.Abstract{ public interface IPersonalDal : IBaseEntityRepository&lt;Personal&gt; { }}Daha sonra Concrete klas√∂r√ºne EfPersonalDal isminde bir sƒ±nƒ±f ekliyorum. EfBaseEntityRepository sƒ±nƒ±fƒ±ndan t√ºretip IEntity tipinde ve DbContext tipinde iki parametre istediƒüim i√ßin Personal ve ReppatContext sƒ±nƒ±flarƒ±nƒ± g√∂nderiyorum. Aynƒ± zamanda IPersonalDal interface‚Äôinden t√ºreyeceƒüini de belirityorum. Bu ≈üekilde IPersonalDal interface‚Äôinin t√ºretildiƒüi interface IBaseEntityRepository ve EfPersonalDal sƒ±nƒ±fƒ±nƒ±n t√ºrediƒüi interface IPersonalDal sayesinde IBaseEntityRepository olmaktadƒ±r. EfBaseEntityRepository referansƒ± ile IBaseEntityRepository impelementini kullanacaƒüƒ±nƒ± belirtmi≈ü oluyorum. ƒ∞≈üte bu ≈üekilde bir kez yazdƒ±ƒüƒ±mƒ±z EfBaseEntityRepository implementasyonu ile olu≈üturduƒüumuz sƒ±nƒ±flarda tekrar tekrar kullanabiliyoruz.using reppat.Core.DataAccess.EntityFramework;using reppat.DataAccess.Abstract;using reppat.DataAccess.Concrete.EntityFramework.Contexts;using reppat.Entities.Concrete;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace reppat.DataAccess.Concrete.EntityFramework{ public class EfPersonalDal : EfBaseEntityRepository&lt;Personal,ReppatContext&gt;,IPersonalDal { }}DataAccess katmanƒ±nda veri sƒ±nƒ±flarƒ±nƒ± olu≈üturduƒüumuza g√∂re artƒ±k i≈ü katmanƒ±nƒ± geli≈ütirmeye ge√ßebiliriz. Business katmanƒ±nda Abstract ve Concrete klas√∂rlerini ekliyorum. Abstract klas√∂r√ºne IPersonalService isminde bir interface ekliyorum.using reppat.Entities.Concrete;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace reppat.Business.Abstract{ public interface IPersonalService { Personal Get(int personalId); List&lt;Personal&gt; GetList(); Personal Add(Personal personal); Personal Update(Personal personal); }}IPersonalService interface‚Äôini ekledikten sonra Concrete klas√∂r√ºne PersonalManager sƒ±nƒ±fƒ±nƒ± ekliyorum.using reppat.Business.Abstract;using reppat.DataAccess.Abstract;using reppat.Entities.Concrete;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace reppat.Business.Concrete{ public class PersonalManager : IPersonalService { IPersonalDal _personalDal; public PersonalManager(IPersonalDal personalDal) { _personalDal = personalDal; } public Personal Add(Personal personal) { return _personalDal.Add(personal); } public Personal Get(int personalId) { return _personalDal.Get(x=&gt;x.PersonalId == personalId); } public List&lt;Personal&gt; GetList() { return _personalDal.GetList(); } public Personal Update(Personal personal) { return _personalDal.Update(personal); } }}Yukarƒ±daki kod bloƒüunda g√∂r√ºld√ºƒü√º √ºzere IPersonalDal interface‚Äôi constructor ile parametre olarak alƒ±yorum. Ancak _personalDal‚Äôƒ±n instanceini almadƒ±ƒüƒ±mƒ±z i√ßin bu ≈üekilde bir projede kullandƒ±ƒüƒ±mƒ±zda hata alacaƒüƒ±z. Bunun i√ßin Dependency Injection ile IPersonalDal istediƒüimizde EfPersonalDal sƒ±nƒ±fƒ±nƒ± kullanƒ±lmasƒ±nƒ± saƒülayacaƒüƒ±z. WebAPI projemizi geli≈ütirmeye ba≈ülayalƒ±m.WebAPI projemizde Controller klas√∂r√ºne PersonalController isminde bir API Controller ekliyorum ve i√ßeriƒüini a≈üaƒüƒ±daki gibi geli≈ütiriyorum.using Microsoft.AspNetCore.Http;using Microsoft.AspNetCore.Mvc;using reppat.Business.Abstract;using reppat.Entities.Concrete;namespace reppat.WebAPI.Controllers{ [Route(\"[controller]\")] [ApiController] public class PersonalController : ControllerBase { IPersonalService _personalService; public PersonalController(IPersonalService personalService) { _personalService = personalService; } [HttpPost] public ActionResult Add(Personal personal) { if (personal == null) throw new ArgumentNullException(nameof(personal)); try { _personalService.Add(personal); return Ok(); } catch (Exception exp) { return BadRequest(exp.Message); } } [HttpPut] public ActionResult Update(Personal personal) { if (personal == null) throw new ArgumentNullException(nameof(personal)); try { _personalService.Update(personal); return Ok(); } catch (Exception exp) { return BadRequest(exp.Message); } } [HttpGet(\"Get/{personalId}\")] public Personal Get(int personalId) { return _personalService.Get(personalId); } [HttpGet] public List&lt;Personal&gt; GetList() { return _personalService.GetList(); } }}Bu ≈üekilde projeyi √ßalƒ±≈ütƒ±rƒ±p Swagger yardƒ±mƒ±yla test yaptƒ±ƒüƒ±mƒ±zda a≈üaƒüƒ±daki hatayƒ± alƒ±yorum.Reppat API ERRORBu hatayƒ± daha √∂nce belirttiƒüim gibi Dependency Injection ayarlarƒ±nƒ± yapmadƒ±ƒüƒ±m i√ßin alƒ±yorum. Program.cs i√ßerisinde builder ile Singleton tanƒ±mƒ±nƒ± yapƒ±yorum.builder.Services.AddSingleton&lt;IPersonalDal, EfPersonalDal&gt;();builder.Services.AddSingleton&lt;IPersonalService, PersonalManager&gt;();Tanƒ±mlamalarƒ± yaptƒ±ktan sonra projeyi √ßalƒ±≈ütƒ±rƒ±p bir personel ekleme i≈ülemini yapƒ±yorum ve sƒ±kƒ±ntƒ±sƒ±z bir ≈üekilde sonu√ß alƒ±yorum. Repository Pattern konusunu .NET Core ile incelemi≈ü olduk. Makale biraz uzun olduƒüu i√ßin umarƒ±m sƒ±kƒ±lmamƒ±≈üsƒ±nƒ±zdƒ±r. Uygulamayƒ± buradan indirebilirsiniz. Bir sonraki makalede g√∂r√º≈ümek √ºzere." }, { "title": "ƒ∞nternet Nedir? Ne ƒ∞≈üe Yarar? ƒ∞nternet Nasƒ±l √áalƒ±≈üƒ±r?", "url": "/posts/internet-nasil-calisir-internet-agi-nedir/", "categories": "DNS", "tags": "dns, tcp", "date": "2021-10-27 19:33:00 +0300", "snippet": "K√ºresel bir aƒü olan internete baƒülƒ± her bir bilgisayarƒ±n 0-255 arasƒ±nda xxx.xxx.xxx.xxx ≈üeklinde benzersiz bir aƒü kimliƒüine sahip olmasƒ± gerekmektedir. Bu benzersiz kimliƒüe IP (Internet Protocol) d...", "content": "K√ºresel bir aƒü olan internete baƒülƒ± her bir bilgisayarƒ±n 0-255 arasƒ±nda xxx.xxx.xxx.xxx ≈üeklinde benzersiz bir aƒü kimliƒüine sahip olmasƒ± gerekmektedir. Bu benzersiz kimliƒüe IP (Internet Protocol) denilmektedir. IP ile bilgisayarlar internette birbirini tanƒ±yabilmektedir. Internet Servis Saƒülayƒ±cƒ±lar (ISS) aracƒ±lƒ±ƒüƒ± ile internete baƒülanabilmekteyiz. ƒ∞nternet Servis Saƒülayƒ±cƒ±lar, internete uydu baƒülantƒ±sƒ± ya da kablolar √ºzerinden baƒülanƒ±r. ƒ∞nternetteki her bilgisayar yada internet eri≈üimi olan cihazƒ±n yukarƒ±da bassettiƒüimiz gibi benzersiz bir IP (Internet Protocol) numarasƒ± bulunmaktadƒ±r. Bu IP adresleri sayesinde internet √ºzerinde bilgisayarlarƒ±n birbirini bulmasƒ± saƒülanƒ±yor. DNS (Domain Name Service): Bu benzersiz IP numaralarƒ±nƒ± kolay ≈üekilde adreslememize imkan saƒülayan DNS (Domain Name System) protokol√º ile bir IP adresini www.google.com gibi domaine y√∂nlendirebiliriz. Bu ≈üekilde internetten bu domaine giri≈ü yaptƒ±ƒüƒ±mƒ±zda DNS protokol√º ilgili IP adresine y√∂nlenecektir. Ula≈ümak istediƒüiniz bir IP yada domain adresinin ula≈üƒ±labilir olup olmadƒ±ƒüƒ±nƒ± test etmek i√ßin √ßok kullanƒ±≈ülƒ± bir program bunmaktadƒ±r. Windows yada Unix i≈ületim sistemlerinde komut istemi uygulamasƒ± ile internet √ºzerindeki IP yada domain adresine ping atabilirsiniz. Girilen adrese ping isteƒüi g√∂nderdiƒüimizde cevap gelene kadar ge√ßen s√ºreyi bize geri d√∂nd√ºrmektedir. √ñrnek; ping 8.8.8.8 TCP (Transmission Control Protocol) : K√ºresel internet aƒüƒ±nda bilgisayarlarƒ±n yada internet eri≈üimi olan cihazlarƒ±n birbirleri arasƒ±nda ileti≈üimi paketler ≈üeklinde saƒülamaktadƒ±r. ƒ∞ki cihaz arasƒ±ndaki kimlik doƒürulamasƒ±nƒ± ve veri boyutu ne olursa olsun aƒü √ºzerinden g√∂nderilen verilerin b√ºt√ºnl√ºƒü√ºn√º bozmadan iletimini yapmaktadƒ±r.G√ºn√ºm√ºzde bir√ßok TCP protokol√º kullanƒ±lmaktadƒ±r. HTTP web eri≈üim protokol√º, POP3 eposta alƒ±m protokl√º,SMTP eposta g√∂nderim protokol√º, SSH uzaktan oturum a√ßma uygulamasƒ± en bilinen G√ºvenli Kabuk aƒü g√ºvenlik protokol√º, FTP internet √ºzerinde dosya transferi saƒülayan protokol.ƒ∞ki bilgisayar arasƒ±nda bir mesaj g√∂nderim √∂rneƒüini inceleyelim. A-PC (1.2.3.4) ve B-PC (9.8.7.6) isminde ve IP adresinde iki bilgisayarƒ±mƒ±zƒ±n internet ile ‚ÄúMerhaba D√ºnya‚Äù mesajƒ±nƒ± birbirine iletimi a≈üaƒüƒ±daki ≈üekilde olmaktadƒ±r. A-PC ‚ÄúMerhaba D√ºnya‚Äù mesajƒ±nƒ± B-PC bilgisiayarƒ±na g√∂nderdiƒüinde en √ºst katmandaki protokol yƒ±ƒüƒ±nƒ±ndan mesaj i≈ülenmeye ba≈ülar G√∂nderilecek mesaj boyutu b√ºy√ºk ise mesajƒ±n ge√ßtiƒüi her yƒ±ƒüƒ±n katmanƒ± mesajƒ± k√º√ß√ºk paketler haline getirebilir. Bunun yapƒ±lmasƒ±ndaki ama√ß y√∂netilebilir daha k√º√ß√ºk paketlerin olu≈üturulmak istenmesidir. Paketler Application Katmanƒ±ndan ge√ßer ve TCP katmanƒ±na devam eder. Her pakete bir baƒülantƒ± noktasƒ± numarasƒ± atanƒ±r. TCP katmanƒ±ndan ge√ßtikten sonra, paketler IP katmanƒ±na ilerler. Burasƒ±, her paketin hedef adresini aldƒ±ƒüƒ± yerdir, (9.8.7.6) Mesaj paketlerimizin bir baƒülantƒ± noktasƒ± numarasƒ± ve bir IP adresi olduƒüu i√ßin, ƒ∞nternet √ºzerinden g√∂nderilmeye hazƒ±rdƒ±r. Hardware katmanƒ±, mesajƒ±mƒ±zƒ±n alfabetik metnini i√ßeren paketleri elektronik sinyallere d√∂n√º≈üt√ºr√ºp telefon hattƒ± √ºzerinden iletmeye ba≈ülar. Telefon hattƒ±nƒ±n diƒüer ucunda ISS‚Äônizin ƒ∞nternet‚Äôe doƒürudan baƒülantƒ±sƒ± vardƒ±r. Y√∂nlendiriciler her paketteki hedef adresini inceler ve nereye g√∂nderileceƒüini belirler. Paketler (9.8.7.6) bilgisayarƒ±na ula≈üƒ±r. Burada paketler, hedef bilgisayarƒ±n TCP / IP yƒ±ƒüƒ±nƒ±nƒ±n altƒ±ndan ba≈ülar. Paketler yƒ±ƒüƒ±n i√ßinde yukarƒ± doƒüru ilerlerken (Hardware =&gt; IP =&gt; TCP = Application), g√∂nderen bilgisayarƒ±n yƒ±ƒüƒ±nƒ±nƒ±n eklediƒüi t√ºm y√∂nlendirme verileri paketlerden √ßƒ±karƒ±lƒ±r. Veriler yƒ±ƒüƒ±nƒ±n en √ºst√ºne ula≈ütƒ±ƒüƒ±nda (Application), paketler ‚ÄúMerhaba D√ºnya‚Äù adlƒ± orijinal formlarƒ±na yeniden birle≈ütirilir.Bir sonraki makalede g√∂r√º≈ümek √ºzere." }, { "title": "Docker √ºzerinde SQL Server ile .Net Core Web API CRUD ƒ∞≈ülemleri", "url": "/posts/docker-sql-server-ile-net-core-api-crud-islemleri/", "categories": "ASP.NET CORE", "tags": "asp.net core, web api, crud, docker", "date": "2021-10-01 19:33:00 +0300", "snippet": "Hepimiz i√ßin sƒ±kƒ±ntƒ±lƒ± ve yƒ±kƒ±cƒ± ge√ßen bir yƒ±lƒ±n ardƒ±ndan yeni yƒ±la yeni bir makale ile ba≈ülamak istedim. 2021 yƒ±lƒ±nƒ±n herkes i√ßin sevdikleriyle saƒülƒ±klƒ±, mutlu ve huzurlu bir yƒ±l olmasƒ±nƒ± dilerim....", "content": "Hepimiz i√ßin sƒ±kƒ±ntƒ±lƒ± ve yƒ±kƒ±cƒ± ge√ßen bir yƒ±lƒ±n ardƒ±ndan yeni yƒ±la yeni bir makale ile ba≈ülamak istedim. 2021 yƒ±lƒ±nƒ±n herkes i√ßin sevdikleriyle saƒülƒ±klƒ±, mutlu ve huzurlu bir yƒ±l olmasƒ±nƒ± dilerim. Docker d√ºnyasƒ±yla ilgilenmekte ge√ß kaldƒ±ƒüƒ±mƒ±n farkƒ±nda olarak hƒ±zlƒ±ca bir giri≈ü yapmak istedim. Docker √ºzerinde MS SQL Server kurulumunu ve .Net Core Web API ile CRUD i≈ülemlerini yapmayƒ± planlƒ±yorum. Docker kurulumunu buradan indirip tamamlƒ±yorum. Daha sonra terminali a√ßƒ±p docker pull microsoft/mssql-server-linux kodu ile mssql imajƒ±nƒ± indiriyorum.Docker MSSQL Imageƒ∞maj dosyasƒ± indirildikten sonra docker container yapƒ±sƒ±nƒ± a≈üaƒüƒ±daki kod bloƒüu ile ayaƒüa kaldƒ±rƒ±yorum. Bu ≈üekilde MS SQL Server kurulumunu tamamlamƒ±≈ü olacaƒüƒ±m.docker run -d --name sqlserver -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=r00t.R00T' -p 1433:1433 microsoft/mssql-server-linuxDocker container yapƒ±sƒ±nƒ±n √ßalƒ±≈üƒ±p √ßalƒ±≈ümadƒ±ƒüƒ±nƒ± docker desktop √ºzerinden inceleyebiliriz.Docker MSSQL Server ContainerKurmu≈ü olduƒüumuz SQL Server‚Äôa baƒülanmamƒ±z i√ßin ben Azure Data Studio uygulamasƒ±nƒ± indirip kuruyorum. Bu uygulamayƒ± da buradan indirebilirsiniz. Studio uygulamasƒ±nƒ±n da kurulumunu tamamladƒ±ktan sonra dotnet new webapi -o docker-web-api komutuyla yeni bir .Net Core Web API uygulamasƒ± olu≈üturuyorum.dotnet new web apiUygulamayƒ± olu≈üturduƒüumuzda Swagger konfig√ºrasyon yapƒ±sƒ± hazƒ±r halde gelmektedir. Bu arada 5.0.100 .Net versiyonunu kullanmaktayƒ±m.web api startupEntityFramework 5.0 paketlerini dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 5.0.1 ve dotnet add package Microsoft.EntityFrameworkCore.Design komutlarƒ±yla projeye ekliyorum. Daha sonra bir Entity klas√∂r√º olu≈üturup tablolarƒ± i√ßeren Entity sƒ±nƒ±flarƒ±nƒ± olu≈üturacaƒüƒ±m. Post tablosunu olu≈üturmak i√ßin sƒ±nƒ±fƒ± hazƒ±rlƒ±yorum.using System.Collections.Generic;public class Post{ public int Id { get; set; } public string Name { get; set; } }DbContext sƒ±nƒ±fƒ±nƒ± BlogContext adƒ±yla olu≈üturup veritabanƒ± baƒülantƒ±sƒ±nƒ± ve sƒ±nƒ±fƒ± DbSet ile tanƒ±mlƒ±yorum.using Microsoft.EntityFrameworkCore;public class BlogContext : DbContext{ protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { optionsBuilder.UseSqlServer(\"Server=localhost;Database=myBlog;User Id=sa;Password=r00t.R00T;\"); base.OnConfiguring(optionsBuilder); } public DbSet Posts{get;set;}}Tablolarƒ±n olu≈üturulmasƒ± i√ßin migration yapmamƒ±z gerekiyor. Migration i≈ülemlerini yapmak i√ßin dotnet tool install --global dotnet-ef kod bloƒüunu kullanarak .NET Core CLI aracƒ±nƒ± kuruyorum. Migration yapƒ±sƒ±nƒ± olu≈üturmak i√ßin dotnet ef migrations add InitialCreate kod bloƒüunu √ßalƒ±≈ütƒ±rdƒ±ƒüƒ±mda a≈üaƒüƒ±daki gibi migration dosyalarƒ± olu≈üturuluyor.migrationVeritabanƒ± ve tablolarƒ±n olu≈üturulmasƒ± i√ßin dotnet ef database update komutunu √ßalƒ±≈ütƒ±rƒ±yorum. Ba≈üarƒ±yla sonu√ßlandƒ±ktan sonra a≈üaƒüƒ±daki gibi veritabanƒ±na ula≈üƒ±yorum.Projede controller klas√∂r√ºnde Post adƒ±nda bir controller olu≈üturuyorum. GET-POST-PUT-DELETE metodlarƒ±nƒ± hazƒ±rlƒ±yorum.using System.Collections.Generic;using System.Linq;using Microsoft.AspNetCore.Mvc;using Microsoft.EntityFrameworkCore;namespace docker_web_api.Controllers{ [ApiController] [Route(\"post\")] public class PostController : ControllerBase { [HttpGet] public IEnumerable Get(){ using (var context = new BlogContext()) { var postList = context.Posts.ToList(); return postList; } } [HttpPost] public IActionResult Post([FromBody] Post entity){ using (var context = new BlogContext()) { var addedEntity = context.Entry(entity); addedEntity.State = EntityState.Added; context.SaveChanges(); return Ok(entity); } } [HttpPut] public IActionResult Put([FromBody] Post entity){ using(var context = new BlogContext()){ var updatedEntity = context.Entry(entity); updatedEntity.State = EntityState.Modified; context.SaveChanges(); return Ok(entity); } } [HttpDelete] public IActionResult Delete(int Id){ using(var context = new BlogContext()){ var findEntity = context.Posts.FirstOrDefault(x=&gt;x.Id == Id); var deletedEntity = context.Entry(findEntity); deletedEntity.State = EntityState.Deleted; context.SaveChanges(); return Ok(); } } }}Projeyi √ßalƒ±≈ütƒ±rƒ±p https://localhost:5001/swagger/index.html/ adresinden swagger yardƒ±mƒ±yla veri i≈ülemlerini test edebilirsiniz. Projeyi buradan indirebilirsiniz. Bir sonraki makalede g√∂r√º≈ümek √ºzere." }, { "title": "ASP.NET Core MVC ile √áoklu Dil Se√ßeneƒüi Ekleme", "url": "/posts/aspnet-core-mvc-ile-coklu-dil-secenegi/", "categories": "ASP.NET CORE MVC", "tags": "asp.net core, mvc", "date": "2021-09-20 19:33:00 +0300", "snippet": "Merhabalar bu makalede ASP.NET Core MVC uygulamasƒ±na nasƒ±l √ßoklu dil desteƒüi ekleyebileceƒüimizi inceleyeceƒüim. √ñncelikle destekleyeceƒüimiz dil tanƒ±mlarƒ±nƒ± resource dosyalarƒ±nda tutacaƒüƒ±m i√ßin uygul...", "content": "Merhabalar bu makalede ASP.NET Core MVC uygulamasƒ±na nasƒ±l √ßoklu dil desteƒüi ekleyebileceƒüimizi inceleyeceƒüim. √ñncelikle destekleyeceƒüimiz dil tanƒ±mlarƒ±nƒ± resource dosyalarƒ±nda tutacaƒüƒ±m i√ßin uygulamanƒ±n dizinine Resources klas√∂r√ºn√º olu≈üturuyorum. Daha sonra i√ßerisine SharedResource.tr-TR.resx ve SharedResource.en-US.resx isminde iki Resource dosyasƒ± ekliyorum. Burada dikkat etmeniz gereken yer Languages. ifadesinden sonra Culture isimleri olmalƒ±. Farklƒ± dilleri de bu ≈üekilde ekleyerek √ßoƒüaltabilirsiniz.Resource FilesUygulama dizinine SharedResource isminde bir sƒ±nƒ±f olu≈üturuyorum. √ñnceki versiyonlarda uygulama dizinine olu≈üturduƒüumuz Languages sƒ±nƒ±fƒ±nƒ± Resources klas√∂r√ºne olu≈üturuyorduk.namespace MultiLanguage{ public class SharedResource { }}Uygulama dizinine Utilities klas√∂r√º olu≈üturup IStringLocalizer yapƒ±sƒ±nƒ± ayaƒüa kaldƒ±racak SharedViewLocalizer sƒ±nƒ±fƒ±nƒ± geli≈ütirelim.using System.Reflection;using Microsoft.Extensions.Localization;namespace MultiLanguage.Utilities{ public class SharedViewLocalizer { private readonly IStringLocalizer _localizer; public SharedViewLocalizer(IStringLocalizerFactory factory) { var type = typeof(SharedResource); var assemblyName = new AssemblyName(type.GetTypeInfo().Assembly.FullName); _localizer = factory.Create(\"SharedResource\", assemblyName.Name); } public LocalizedString this[string key] =&gt; _localizer[key]; public LocalizedString GetLocalizedString(string key) { return _localizer[key]; } }}Startup.cs dosyasƒ±nda ConfigureServices ve Configure metodlarƒ±na Localization ayarlarƒ±nƒ± ekliyorum.public void ConfigureServices(IServiceCollection services) { services.AddLocalization(opts =&gt; { opts.ResourcesPath = \"Resources\"; }); services.Configure(options =&gt; { var supportedCultures = new List() { new CultureInfo(\"tr-TR\"), new CultureInfo(\"en-US\"), }; options.DefaultRequestCulture = new RequestCulture(supportedCultures.First()); options.SupportedCultures = supportedCultures; options.SupportedUICultures = supportedCultures; }); services.AddSingleton(); }public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { var locOptions = app.ApplicationServices.GetService&gt;(); app.UseRequestLocalization(locOptions.Value); }Servis ayarlarƒ±nƒ± tamamladƒ±ktan sonra View lerde kullanacaƒüƒ±m IHtmlHelper geni≈ületmesini yapabilmek i√ßin uygulama dizinine ExtensionMethods klas√∂r√º ve HtmlHelperExtensionMethods geni≈ületme sƒ±nƒ±fƒ±nƒ± olu≈üturuyorum.namespace MultiLanguage.ExtensionMethods{ public static class HtmlHelperExtensionMethods { public static string Translate(this IHtmlHelper helper, string key) { IServiceProvider services = helper.ViewContext.HttpContext.RequestServices; SharedViewLocalizer localizer = services.GetRequiredService(); string result = localizer[key]; return result; } }}Daha sonra HomeController sƒ±nƒ±fƒ±nda Index metoduna services ayarlarƒ±nda tanƒ±mladƒ±ƒüƒ±m kullanabileceƒüim CultureInfo deƒüerlerinden olu≈üan bir listeyi ViewData olarak set ediyorum.public IActionResult Index() { var defaultCultures = new List() { new CultureInfo(\"tr-TR\"), new CultureInfo(\"en-US\"), }; CultureInfo[] cinfo = CultureInfo.GetCultures(CultureTypes.AllCultures); var cultureItems = cinfo.Where(x =&gt; defaultCultures.Contains(x)) .Select(c =&gt; new SelectListItem { Value = c.Name, Text = c.DisplayName }) .ToList(); ViewData[\"Cultures\"] = cultureItems; return View(); }ViewData ile g√∂nderdiƒüim CultureInfo listesi ile bir section doldurup se√ßili Culture deƒüerine g√∂re Cookie yapƒ±sƒ±nƒ± deƒüi≈ütireceƒüim bir Action ekliyorum[HttpPost]public IActionResult SetLanguage(string culture, string returnUrl){ Response.Cookies.Append( CookieRequestCultureProvider.DefaultCookieName, CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(culture)), new CookieOptions { Expires = DateTimeOffset.UtcNow.AddYears(1) } ); return LocalRedirect(returnUrl);}Daha sonra Index.cshtml dosyasƒ±nƒ± a≈üaƒüƒ±daki deƒüi≈üikliƒüi yapƒ±yorum.IndexResource dosyalarƒ±na LB_WELCOME name value deƒüerlerini ekliyorum. Bu ≈üekilde @Html.Translate(‚ÄúLB_WELCOME‚Äù) gibi resource dosyalarƒ±na eklediƒüimiz her etiketi kullanabiliriz.TR-ResourceEN-ResourceIndex-PageProjeyi buradan indirebilirsiniz. Bir sonraki makalede g√∂r√º≈ümek √ºzere.Kaynaklar :https://docs.microsoft.com/tr-tr/aspnet/core/fundamentals/localization?view=aspnetcore-5.0/https://medium.com/@flouss/asp-net-core-localization-one-resx-to-rule-them-all-de5c07692fa4/" }, { "title": "ASP.NET Core Web API - Swagger Kullanƒ±mƒ±", "url": "/posts/asp-net-core-web-api-swagger-kullanimi/", "categories": "ASP.NET CORE", "tags": "asp.net core, web api", "date": "2021-04-01 19:33:00 +0300", "snippet": "Web API projeleri geli≈ütirdiƒüimizde API uygulamalarƒ±mƒ±zƒ±n nasƒ±l kullanƒ±lacaƒüƒ±nƒ± anlatacaƒüƒ±mƒ±z dok√ºmantasyonlara ihtiyacƒ±mƒ±z bulunmaktadƒ±r. Bu dok√ºmantasyonlar, API projelerimizin ne i≈üe yaradƒ±ƒüƒ±nƒ±,...", "content": "Web API projeleri geli≈ütirdiƒüimizde API uygulamalarƒ±mƒ±zƒ±n nasƒ±l kullanƒ±lacaƒüƒ±nƒ± anlatacaƒüƒ±mƒ±z dok√ºmantasyonlara ihtiyacƒ±mƒ±z bulunmaktadƒ±r. Bu dok√ºmantasyonlar, API projelerimizin ne i≈üe yaradƒ±ƒüƒ±nƒ±, hangi parametreler ile hangi formatlarda veri g√∂nderip alabileceƒüinin bilgilerini i√ßermektedir. Bu dok√ºmantasyonlarƒ±n yazƒ±lmasƒ± ve g√ºncel tutulmasƒ± i≈ülemleri zordur. Bu nedenle Web API projesinin geli≈ütirme a≈üamasƒ±nda otomatik olarak olu≈üturulmasƒ± gerekmektedir. Bu noktada kullanabileceƒüimiz API dok√ºmantasyon yazƒ±lƒ±mƒ± olan Swagger‚Äôi ASP.NET Core 3.1 Web API uygulamasƒ±nda nasƒ±l kullanabileceƒüimizi inceleyelim. Bir √∂nceki ASP.NET Core 3.1 Web API ‚Äì Basic Authentication Kullanƒ±mƒ± konulu makaleyi inceleyebilirsiniz.ASP.NET Core 3.1 Web API ‚Äì Swagger √ñrnek Projeyi Yapƒ±sƒ±√ñrnek olarak yapacaƒüƒ±m API projesinin i√ßeriƒüini ≈üu ≈üekilde olu≈üturacaƒüƒ±m: /item/get : Ba≈üarƒ±lƒ± bir i≈ülem ger√ßekle≈üirse 200 Ok durum bilgisinde t√ºm √ºr√ºnlerin listesi getirilecek, hatalƒ± bir i≈ülemde 400 BadRequest sonucu d√∂nd√ºr√ºlecektir. /item/get/id : Ba≈üarƒ±lƒ± bir i≈ülem ger√ßekle≈üirse 200 Ok durum bilgisinde, √ºr√ºnler listesinden g√∂nderdiƒüimiz id bilgisine g√∂re 1 √ºr√ºn getirilecektir. Hatalƒ± bir i≈ülemde 400 BadRequest sonucu d√∂nd√ºr√ºlecektir. /item/post : Yeni bir √ºr√ºn kaydƒ± olu≈üturulacaktƒ±r. Ba≈üarƒ±lƒ± bir i≈ülem ger√ßekle≈üirse 200 Ok, hatalƒ± bir i≈ülemde 400 BadRequest sonucu d√∂nd√ºr√ºlecektir. /item/put : Sistemde kayƒ±tlƒ± olan bir √ºr√ºn bilgisinin g√ºncellemesi yapƒ±lacaktƒ±r. Ba≈üarƒ±lƒ± bir i≈ülem ger√ßekle≈üirse 200 Ok, hatalƒ± bir i≈ülemde 400 BadRequest sonucu d√∂nd√ºr√ºlecektir. /item/delete : Sistemde kayƒ±tlƒ± olan bir √ºr√ºn kaydƒ±nƒ±n silinme i≈ülemi yapƒ±lacaktƒ±r. Ba≈üarƒ±lƒ± bir i≈ülem ger√ßekle≈üirse 200 Ok, hatalƒ± bir i≈ülemde 400 BadRequest sonucu d√∂nd√ºr√ºlecektir. Uygulama dosyalarƒ±nƒ± aspnetcore-3-1-web-api-swagger Github adresinde bulabilirsiniz.ASP.NET Core 3.1 Web API ‚Äì Swagger √ñrnek Projeyi √áalƒ±≈ütƒ±rmak ƒ∞√ßin GereksinimlerASP.NET Core uygulamalarƒ±nƒ± yerel olarak geli≈ütirmek ve √ßalƒ±≈ütƒ±rmak i√ßin a≈üaƒüƒ±dakileri indirip y√ºkleyin: Visual Studio Code adresinden Windows, Mac ve Linux i≈ületim sistemlerinde √ßalƒ±≈üabilen Microsoft tarafƒ±ndan geli≈ütirilip a√ßƒ±k kaynak olarak sunulan kod edit√∂r√ºn√º indiriniz. C# extension adresinden yada VS Code i√ßersinideki eklentiler b√∂l√ºm√ºnden .NET Core uygulamalarƒ± geli≈ütirirken kolaylƒ±klar getiren eklentiyi indiriniz. .NET Core SDK adresinden .NET Core 3.1 runtime SDK dosyasƒ±nƒ± indirip kurmalƒ±sƒ±nƒ±z.ASP.NET Core 3.1 Web API ‚Äì Swagger √ñrnek Projesi Nasƒ±l √áalƒ±≈ütƒ±rƒ±lƒ±r? Proje dosyalarƒ±nƒ± aspnetcore-3-1-web-api-swagger Github adresinden indirebilir yada klonlayabilirsiniz. WebApi.csproj proje dosyasƒ±nƒ±n bulunduƒüu klas√∂rde bir terminal ile yada VS Code terminalinde dotnet run komutunu √ßalƒ±≈ütƒ±rƒ±n. Uygulama √ßalƒ±≈ütƒ±ƒüƒ±nda http://localhost:4000/ adresinden istek g√∂nderebilirsiniz.ASP.NET Core 3.1 Web API ‚Äì Swagger Projesini Olu≈üturmaProje olu≈üturmak i√ßin dotnet new webapi komutunu kullanƒ±yoruz.ASP.NET Core Web API ‚Äì Item Entity Path: /Entities/Item.cs√úr√ºn bilgilerini ta≈üƒ±dƒ±ƒüƒ±mƒ±z item sƒ±nƒ±fƒ±nƒ± olu≈üturuyorum. Entity yapƒ±larƒ± uygulamanƒ±n farklƒ± b√∂l√ºmlerinde veri iletimi i√ßin kullanƒ±lƒ±r. Ayrƒ±ca controller yardƒ±mƒ±yla http yanƒ±tlarƒ±nƒ± d√∂nd√ºrmek i√ßinde kullanƒ±labilmektedir. Entities sƒ±nƒ±flarƒ± Entityframework ile Code First yakla≈üƒ±mƒ±nda veritabanƒ± tablolarƒ±nƒ± olu≈üturmak i√ßin kullandƒ±ƒüƒ±mƒ±z sƒ±nƒ±flarƒ±dƒ±r. Not: Entities yapƒ±larƒ±nda kƒ±sƒ±tlƒ± veri d√∂nd√ºrmek istendiƒüinde Models klas√∂r√ºnde ihtiyaca y√∂nelik sƒ±nƒ±flar kullanƒ±lmalƒ±dƒ±r.namespace WebApi.Entities{ public class Item { public int Id { get; set; } public string Code { get; set; } public string Name { get; set; } public string Image { get; set; } }}ASP.NET Core Web API Program Path:/Program.csProgram sƒ±nƒ±fƒ±, uygulamayƒ± ba≈ülatmak i√ßin kullanƒ±lan bir console uygulama dosyasƒ±dƒ±r. IHostBuilder ile Web API uygulamasƒ±nƒ±n √ßalƒ±≈ümasƒ±na ihtiyacƒ± olan web sunucusunu yapƒ±landƒ±rƒ±r ve ba≈ülatƒ±r. ASP.NET Core uygulamasƒ±nƒ± ≈üablondan olu≈üturduƒüumuzda varsayƒ±lan olarak gelmektedir. Builder alt √∂zelliƒüinde Web API uygulamasƒ±nƒ±n hangi adres ve portta ba≈ülatƒ±lacaƒüƒ±nƒ± UseUrls ile deƒüi≈ütiriyorum.namespace WebApi{ public class Program { public static void Main(string[] args) { CreateHostBuilder(args).Build().Run(); } public static IHostBuilder CreateHostBuilder(string[] args) =&gt; Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder =&gt; { webBuilder.UseStartup&lt;Startup&gt;().UseUrls(\"http://localhost:4000\"); }); }}Projeye Swagger Paketlerinin EklenmesiTerminalde dotnet add package Swashbuckle.AspNetCore satƒ±rƒ±nƒ± ekleyip √ßalƒ±≈ütƒ±rƒ±yoruz yada farklƒ± paket y√∂netimleri i√ßin buradan indirme i≈ülemini yapƒ±nƒ±z. Bu ≈üekilde Swagger paketlerini projemize eklemi≈ü olmaktayƒ±z. Not: Swashbuckle.AspnetCore 5.0 versiyonuyla beraber OpenAPI 3‚Äô√º desteklenmeye ba≈ülamƒ±≈ütƒ±r.ASP.NET Core Web API Startup Path:/Startup.csStartup ‚Äã‚Äãsƒ±nƒ±fƒ±, uygulamanƒ±n t√ºm isteklerin nasƒ±l i≈üleneceƒüini yapƒ±landƒ±rdƒ±ƒüƒ±mƒ±z sƒ±nƒ±ftƒ±r.namespace WebApi{ public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddControllers(); services.AddSwaggerGen(s =&gt; { s.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo {Title = \"Web API\", Version = \"v1\"}); }); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseHttpsRedirection(); app.UseRouting(); app.UseSwagger(); app.UseSwaggerUI(s =&gt; { s.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Swagger\"); }); app.UseAuthorization(); app.UseEndpoints(endpoints =&gt; { endpoints.MapControllers(); }); } }}ASP.NET Core Web API ‚Äì ItemController Path:/Controllers/ItemController.csusing System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.AspNetCore.Mvc;using Microsoft.Extensions.Logging;using WebApi.Entities;namespace WebApi.Controllers{ [ApiController] [Route(\"[controller]\")] public class ItemController : ControllerBase { private static readonly Item[] Items = new Item[] { new Item {Id = 1, Code = \"X001\", Name = \"Computer\", Image = \"/img/computer.jpg\"}, new Item {Id = 2, Code = \"X002\", Name = \"Telephone\", Image = \"/img/telephone.jpg\"}, new Item {Id = 3, Code = \"X003\", Name = \"Watch\", Image = \"/img/watch.jpg\"}, }; [HttpGet(\"Get\")] public IEnumerable&lt;Item&gt; Get() { return Items.ToList(); } [HttpGet(\"Get/{id:int}\")] public Item Get(int id) { return Items.FirstOrDefault(x =&gt; x.Id == id); } [HttpPost] public IActionResult Post([FromBody] Item item) { try { return Ok(\"Success!\"); } catch (System.Exception exp) { return BadRequest(exp.Message); } } [HttpPut] public IActionResult Put([FromBody] Item item) { try { return Ok(\"Success!\"); } catch (System.Exception exp) { return BadRequest(exp.Message); } } [HttpDelete] public IActionResult Delete(int id) { try { return Ok(\"Success!\"); } catch (System.Exception exp) { return BadRequest(exp.Message); } } }}ASP.NET Core Web API ‚Äì WebApi.csproj Path:/WebApi.csproj&lt;Project Sdk=\"Microsoft.NET.Sdk.Web\"&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netcoreapp3.1&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"5.4.1\" /&gt; &lt;/ItemGroup&gt;&lt;/Project&gt;ASP.NET Core Web API ‚Äì Swagger Sonu√ßTerminalde dotnet run watch komutunu √ßalƒ±≈ütƒ±rƒ±p projemizi &lt;localhost:4000/swagger/&gt; adresine gidiyoruz.Bir sonraki makalede g√∂r√º≈ümek √ºzere." }, { "title": "PostSharp Nedir? Nasƒ±l Kullanƒ±lƒ±r?", "url": "/posts/postsharp-nedir-nasil-kullanilir/", "categories": "ASP.NET CORE", "tags": "asp.net core, postsharp", "date": "2021-02-01 19:33:00 +0300", "snippet": "Merhabalar, sizlere bu makalede benimde projelerimde kullandƒ±ƒüƒ±m PostSharp Framework i√ßerisindeki Aspect yapƒ±sƒ±nƒ± √∂rneklerle anlatmaya √ßalƒ±≈üacaƒüƒ±m. Bu yapƒ± sayesinde bir metot yada sƒ±nƒ±fa attribute...", "content": "Merhabalar, sizlere bu makalede benimde projelerimde kullandƒ±ƒüƒ±m PostSharp Framework i√ßerisindeki Aspect yapƒ±sƒ±nƒ± √∂rneklerle anlatmaya √ßalƒ±≈üacaƒüƒ±m. Bu yapƒ± sayesinde bir metot yada sƒ±nƒ±fa attribute ekleyerek i≈ülem a≈üamalarƒ±nda yada alƒ±nabilecek hata durumlarƒ±nda farklƒ± aksiyonlar alabiliriz. Ben kendi projemde Logging ve Authorization yapƒ±larƒ± i√ßin kullanƒ±yorum.PostSharp KurulumuNuget √ºzerinden a≈üaƒüƒ±daki kod bloƒüu ile kurulumu yapƒ±yorum.Install-Package PostSharp -Version 6.7.10Paket kurulumundan sonra Visual Studio eklentisini kurmalƒ±yƒ±z. Buradaki adresten eklentiyi indirip kurulumunu yaptƒ±ƒüƒ±mƒ±zda lisans bilgilerini girmem gerekiyor. PostSharp √ºcretli bir k√ºt√ºphanedir. Ancak 1000 satƒ±rlƒ±k kod limiti ile yada √∂ƒürenci, √∂ƒüretmen, freelancer, MVP gibi ayrƒ±calƒ±klƒ± olarak √ºcretsiz kullanabilirsiniz.OnMethodBoundaryAspectAttribute olarak tanƒ±mladƒ±ƒüƒ±mƒ±z bir metodun i≈ülem adƒ±mlarƒ±nƒ± takip edebileceƒüimiz sƒ±nƒ±ftƒ±r. A≈üaƒüƒ±da g√∂r√ºld√ºƒü√º gibi OnEntry, OnSuccess, OnExit, OnException override metodlarƒ± ile istediƒüimiz metodun √∂zelliklerine eri≈üebilmekteyiz.[PSerializable]public class LoggingAspect : OnMethodBoundaryAspect{ public override void OnEntry(MethodExecutionArgs args) { Console.WriteLine(\"{0} : OnEntry\", args.Method.Name); } public override void OnSuccess(MethodExecutionArgs args) { Console.WriteLine(\"{0} OnSuccess\", args.Method.Name); } public override void OnExit(MethodExecutionArgs args) { Console.WriteLine(\"{0} OnExit\", args.Method.Name); } public override void OnException(MethodExecutionArgs args) { Console.WriteLine(\"{0} OnException\", args.Method.Name); } public override void OnResume(MethodExecutionArgs args) { Console.WriteLine(\"{0} OnResume\", args.Method.Name); }}class Program{ [LoggingAspect] static void Main(string[] args) { Console.WriteLine(\"Hello World!\"); }}Yukarƒ±daki OnMethodBoundaryAspect sƒ±nƒ±fƒ±na ili≈ükin kendi projelerimde kullanmƒ±≈ü olduƒüum SecuredOperation √∂rneƒüini inceleyelim. Not: Kullanmƒ±≈ü olduƒüum versiyon : v4.2.17.0[Serializable]public class SecuredOperation : OnMethodBoundaryAspect{ public string Roles { get; set; } public override void OnEntry(MethodExecutionArgs args) { string[] roles = Roles.Split(','); bool isAuthorized = false; for (int i = 0; i &lt; roles.Length; i++) { if (System.Threading.Thread.CurrentPrincipal.IsInRole(roles[i])) { isAuthorized = true; } } if (!isAuthorized) { throw new SecurityException(\"You aren't authorized!\"); } }}UserManager sƒ±nƒ±ƒ±nda a≈üaƒüƒ±daki gibi tanƒ±mlamƒ±≈ü olduƒüum sƒ±nƒ±flardaki metodlara OnEntry ile girip CurrentPrincipal i√ßerisinde belirli rollerin tanƒ±mlƒ± olup olmadƒ±ƒüƒ±nƒ± kontrol ediyorum.public class UserManager : IUserService{ private readonly IUserDal _userDal; [SecuredOperation(Roles = \"Admin,User\")] public List&lt;User&gt; GetAll() { var users = _mapper.Map&lt;List&lt;User&gt;&gt;(_userDal.GetAll()); return users; }}Metod bazƒ±nda yapƒ±ldƒ±ƒüƒ± gibi ayrƒ±ca sƒ±nƒ±fƒ±n geneli i√ßin de tanƒ±mlama yapƒ±labilir.[SecuredOperation(Roles = \"Admin,User\")]public class UserManager : IUserService{ private readonly IUserDal _userDal; public List&lt;User&gt; GetAll() { var users = _mapper.Map&lt;List&lt;User&gt;&gt;(_userDal.GetAll()); return users; }}Principal tanƒ±mlamasƒ±nƒ± a≈üaƒüƒ±daki ≈üekilde yapabiliriz.IPrincipal principal = new GenericPrincipal(new GenericIdentity(\"Admin\"), new string[] { \"Admin\" }); Thread.CurrentPrincipal = principal;Bir sonraki makalede g√∂r√º≈ümek √ºzere." }, { "title": "ASP.NET Core Web API - Basic Authentication Kullanƒ±mƒ±", "url": "/posts/asp-net-core-web-api-basic-authentication-kullanimi/", "categories": "ASP.NET CORE", "tags": "asp.net core, web api, basic authentication", "date": "2021-01-15 19:33:00 +0300", "snippet": "Merhabalar bu makalede .Net Core 3.1 versiyonu ile bir Web API √∂rnek projede Basic kimlik doƒürulama yapƒ±sƒ±nƒ± inceleyeceƒüim. Bir √∂nceki ASP.NET Core 3.1 Web API ‚Äì JWT Authentication Kullanƒ±mƒ± makale...", "content": "Merhabalar bu makalede .Net Core 3.1 versiyonu ile bir Web API √∂rnek projede Basic kimlik doƒürulama yapƒ±sƒ±nƒ± inceleyeceƒüim. Bir √∂nceki ASP.NET Core 3.1 Web API ‚Äì JWT Authentication Kullanƒ±mƒ± makalesini inceleyebilirsiniz. Uygulama dosyalarƒ±nƒ± aspnetcore-3-1-web-api-basic Github adresinde bulabilirsiniz.ASP.NET Core Web API ‚Äì User EntityKullanƒ±cƒ± bilgilerini ta≈üƒ±dƒ±ƒüƒ±mƒ±z user sƒ±nƒ±fƒ±nƒ± olu≈üturuyorum. Entity yapƒ±larƒ± uygulamanƒ±n farklƒ± b√∂l√ºmlerinde veri iletimi i√ßin kullanƒ±lƒ±r. Ayrƒ±ca controller yardƒ±mƒ±yla http yanƒ±tlarƒ±nƒ± d√∂nd√ºrmek i√ßinde kullanƒ±labilmektedir. Bu sƒ±nƒ±fƒ± veritabanƒ±ndaki User tablosu olarak d√º≈ü√ºnebilirsiniz. Entities sƒ±nfƒ±larƒ± Entityframework ile Code First yakla≈üƒ±mƒ±nda veritabanƒ± tablolarƒ±nƒ± olu≈üturmak i√ßin kullandƒ±ƒüƒ±mƒ±z sƒ±nƒ±flarƒ±dƒ±r. Not: Entities yapƒ±larƒ±nda kƒ±sƒ±tlƒ± veri d√∂nd√ºrmek istendiƒüinde Models klas√∂r√ºnde ihtiyaca y√∂nelik sƒ±nƒ±flar kullanƒ±lmalƒ±dƒ±r.namespace WebApi.Entities{ public class User { public int Id { get; set; } public string UserName { get; set; } public string Password { get; set; } public string FirstName { get; set; } public string LastName { get; set; } }}ASP.NET Core Web API ‚Äì Item Entity√úr√ºn bilgilerini tuttuƒüumuz Item sƒ±nƒ±fƒ±nƒ± veritabanƒ±nda Item tablosu olarak d√º≈ü√ºnebilirsiniz.namespace WebApi.Entities{ public class Item { public int Id { get; set; } public string Code { get; set; } public string Name { get; set; } public float Price { get; set; } public int Amount { get; set; } }}ASP.NET Core Web API ‚Äì AuthModelAuthModel token bilgisi almak i√ßin istemcinin g√∂ndermi≈ü olduƒüu istekte User sƒ±nƒ±fƒ±nƒ±n sadece username ve password bilgisini parametre olarak g√∂ndermesi i√ßin kƒ±sƒ±tlƒ± bir sƒ±nƒ±ftƒ±r.public class AuthModel{ public string UserName { get; set; } public string Password { get; set; }}ASP.NET Core Web API ‚Äì StartupStartup ‚Äã‚Äãsƒ±nƒ±fƒ±, uygulamanƒ±n t√ºm isteklerin nasƒ±l i≈üleneceƒüini yapƒ±landƒ±rdƒ±ƒüƒ±mƒ±z sƒ±nƒ±ftƒ±r.public void ConfigureServices(IServiceCollection services){ services.AddControllers(); services.AddAuthentication(\"BasicAuthentication\") .AddScheme&lt;AuthenticationSchemeOptions, BasicAuthHandler&gt;(\"BasicAuthentication\", null); services.AddScoped&lt;IUserService, UserService&gt;();}public void Configure(IApplicationBuilder app, IWebHostEnvironment env){ app.UseAuthentication(); app.UseAuthorization();}ASP.NET Core Web API ‚Äì UserServiceUserService sƒ±nƒ±fƒ±nda IUserService interface dosyasƒ±ndan implement ettikten sonra statik olarak bir User listesi dolduruyorum. Bu User verisi ile Authenticate metodunda UserName ve Password kontrol√º ile user nesnesi geriye d√∂nd√ºr√ºyorum.public interface IUserService { User Authenticate(string userName, string password); List&lt;User&gt; GetAll(); }public class UserService : IUserService{ private List&lt;User&gt; _users = new List&lt;User&gt; {new User {Id = 1, FirstName = \"Murat\", LastName = \"Suzen\", UserName = \"murat\", Password = \"1234\"}}; public User Authenticate(string userName, string password) { var user = _users.FirstOrDefault(x =&gt; x.UserName == userName &amp;&amp; x.Password == password); return user; } public List&lt;User&gt; GetAll() { return _users; }}ASP.NET Core Web API ‚Äì ItemServiceItemService sƒ±nƒ±fƒ±nƒ±d IItemService interface dosyasƒ±ndan implemente ediyorum. Bu sƒ±nƒ±fta √ºr√ºnler listesini geri d√∂nd√ºreceƒüimiz metodu yazalƒ±m.namespace WebApi.Services{ public interface IItemService { List&lt;Item&gt; GetAll(); } public class ItemService : IItemService { private List&lt;Item&gt; _items = new List&lt;Item&gt; { new Item {Id = 1, Code = \"0001\", Name = \"Notebook\", Amount = 22, Price = 6300}, new Item {Id = 2, Code = \"0002\", Name = \"Keyboard\", Amount = 15, Price = 230}, new Item {Id = 3, Code = \"0003\", Name = \"Mouse\", Amount = 9, Price = 150}, }; public List&lt;Item&gt; GetAll() { return _items.ToList(); } }}ASP.NET Core Web API ‚Äì ItemControllerItemController sƒ±nƒ±fƒ± [Authorize] attribute ile yetkilendirildiƒüi i√ßin UserName ve Password g√∂nderilerek i≈ülem yapƒ±labilir.namespace WebApi.Controllers{ [Authorize] [Route(\"[controller]\")] [ApiController] public class ItemController : ControllerBase { private IItemService _itemService; public ItemController(IItemService itemService) { _itemService = itemService; } [HttpGet] public ActionResult GetAll() { var users = _itemService.GetAll(); return Ok(users); } }}ASP.NET Core Web API ‚Äì UserControllerNot: T√ºm controller sƒ±nƒ±fƒ±nƒ±n [Authorize] attribute ile yetkilendirilmesi yanlƒ±zca [AllowAnonymous] attribute i√ßeren metotlarƒ± kapsamamaktadƒ±r. √á√ºnk√º [AllowAnonymous] attribute i√ßeren metotlar [Authorize] attribute yapƒ±sƒ±nƒ± ezmektedir.[Authorize][Route(\"[controller]\")][ApiController]public class UserController : ControllerBase{ private IUserService _userService; public UserController(IUserService userService) { _userService = userService; } [AllowAnonymous] [HttpPost(\"auth\")] public ActionResult Authenticate([FromBody] AuthModel authModel) { var user = _userService.Authenticate(authModel.UserName, authModel.Password); if (user == null) return BadRequest(new {message = \"Kullanƒ±cƒ± adƒ± yada ≈üifre yanlƒ±≈ü\"}); return Ok(user); } [HttpGet] public ActionResult GetAll() { var users = _userService.GetAll(); return Ok(users); }}ASP.NET Core Web API ‚Äì BasicAuthHandlerOlu≈üturmu≈ü olduƒüumuz BasicAuthHandler sƒ±nƒ±fƒ± ile AuthenticationSchemeOptions √∂zelliƒüini kullanarak HandleAuthenticate yapƒ±sƒ± ile kimlik doƒürulama i≈ülemlerini yapacaƒüƒ±z. A≈üaƒüƒ±daki kod bloƒüunda g√∂rebileceƒüiniz √ºzere Request.Headers i√ßerisinde Authorization keyini yakalamaya √ßalƒ±≈üƒ±p deƒüerini AuthenticationHeaderValue.Parse metodu ile parametre deƒüerine ula≈üƒ±yorum. Kullanƒ±cƒ± adƒ± ve ≈üifreyi ‚Äú:‚Äù karakteri ile birle≈ütirdiƒüim i√ßin √∂rn:(murat:1234) split ile ayrƒ±≈ütƒ±rp kullanƒ±cƒ± adƒ± ve ≈üifreyi alƒ±yorum. Kullanƒ±cƒ± bilgileri ile bir claim olu≈üturup AuthenticationTicket ile yeni bir Ticket olu≈üturuyorum ve AuthenticateResult.Success(ticket) ile d√∂nd√ºr√ºyorum.public class BasicAuthHandler : AuthenticationHandler&lt;AuthenticationSchemeOptions&gt;{ private readonly IUserService _userService; public BasicAuthHandler(IOptionsMonitor&lt;AuthenticationSchemeOptions&gt; options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock, IUserService userService) : base(options, logger, encoder, clock) { _userService = userService; } protected override async Task&lt;AuthenticateResult&gt; HandleAuthenticateAsync() { User user = null; StringValues values; if (!Request.Headers.TryGetValue(\"Authorization\", out values)) { return AuthenticateResult.Fail(\"Authorization Header Bulunmamaktadƒ±r\"); } try { var authHeader = AuthenticationHeaderValue.Parse(values.First()); var tokenBytes = Convert.FromBase64String(authHeader.Parameter); var tokenSplit = Encoding.UTF8.GetString(tokenBytes).Split(new[] {':'}, 2); var username = tokenSplit[0]; var password = tokenSplit[1]; user = _userService.Authenticate(username, password); } catch { return AuthenticateResult.Fail(\"Ge√ßersiz Authorization Header\"); } if (user == null) return AuthenticateResult.Fail(\"Kullanƒ±cƒ± adƒ± yada ≈üifre ge√ßersiz\"); var claims = new[] {new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()), new Claim(ClaimTypes.Name, user.UserName),}; var identity = new ClaimsIdentity(claims, Scheme.Name); var principal = new ClaimsPrincipal(identity); var ticket = new AuthenticationTicket(principal, Scheme.Name); return AuthenticateResult.Success(ticket); }}Kaynak :https://jasonwatmore.com/post/2019/10/21/aspnet-core-3-basic-authentication-tutorial-with-example-api/https://codeburst.io/adding-basic-authentication-to-an-asp-net-core-web-api-project-5439c4cf78ee?gi=f08f27a55a69/" }, { "title": "ASP.NET Core Web API - JWT Authentication Kullanƒ±mƒ±", "url": "/posts/asp-net-core-web-api-jwt-authentication-kullanimi/", "categories": "ASP.NET CORE", "tags": "asp.net core, web api, jwt authentication", "date": "2021-01-10 19:33:00 +0300", "snippet": "Merhabalar bu makalede .Net Core 3.1 versiyonu ile bir Web API √∂rnek projede JWT (JSON Web Token) kimlik doƒürulama yapƒ±sƒ±nƒ± inceleyeceƒüim. Daha √∂nceki Web API makalelerine buradan ula≈üabilirsiniz. ...", "content": "Merhabalar bu makalede .Net Core 3.1 versiyonu ile bir Web API √∂rnek projede JWT (JSON Web Token) kimlik doƒürulama yapƒ±sƒ±nƒ± inceleyeceƒüim. Daha √∂nceki Web API makalelerine buradan ula≈üabilirsiniz. Uygulama dosyalarƒ±nƒ± aspnetcore-3-1-web-api-jwt Github adresinde bulabilirsiniz.ASP.NET Core Web API ‚Äì User EntityKullanƒ±cƒ± bilgilerini ta≈üƒ±dƒ±ƒüƒ±mƒ±z user sƒ±nƒ±fƒ±nƒ± olu≈üturuyorum. Entity yapƒ±larƒ± uygulamanƒ±n farklƒ± b√∂l√ºmlerinde veri iletimi i√ßin kullanƒ±lƒ±r. Ayrƒ±ca controller yardƒ±mƒ±yla http yanƒ±tlarƒ±nƒ± d√∂nd√ºrmek i√ßinde kullanƒ±labilmektedir. Bu sƒ±nƒ±fƒ± veritabanƒ±ndaki User tablosu olarak d√º≈ü√ºnebilirsiniz. Entities sƒ±nfƒ±larƒ± Entityframework ile Code First yakla≈üƒ±mƒ±nda veritabanƒ± tablolarƒ±nƒ± olu≈üturmak i√ßin kullandƒ±ƒüƒ±mƒ±z sƒ±nƒ±flarƒ±dƒ±r. Not: Entities yapƒ±larƒ±nda kƒ±sƒ±tlƒ± veri d√∂nd√ºrmek istendiƒüinde Models klas√∂r√ºnde ihtiyaca y√∂nelik sƒ±nƒ±flar kullanƒ±lmalƒ±dƒ±r.namespace WebApi.Entities{ public class User { public int Id { get; set; } public string UserName { get; set; } public string Password { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public string Token { get; set; } }}ASP.NET Core Web API ‚Äì Item Entity√úr√ºn bilgilerini tuttuƒüumuz Item sƒ±nƒ±fƒ±nƒ± veritabanƒ±nda Item tablosu olarak d√º≈ü√ºnebilirsiniz.namespace WebApi.Entities{ public class Item { public int Id { get; set; } public string Code { get; set; } public string Name { get; set; } public float Price { get; set; } public int Amount { get; set; } }}ASP.NET Core Web API ‚Äì AuthModelAuthModel token bilgisi almak i√ßin istemcinin g√∂ndermi≈ü olduƒüu istekte User sƒ±nƒ±fƒ±nƒ±n sadece username ve password bilgisini parametre olarak g√∂ndermesi i√ßin kƒ±sƒ±tlƒ± bir sƒ±nƒ±ftƒ±r.public class AuthModel{ public string UserName { get; set; } public string Password { get; set; }}ASP.NET Core Web API ‚Äì StartupStartup ‚Äã‚Äãsƒ±nƒ±fƒ±, uygulamanƒ±n t√ºm isteklerin nasƒ±l i≈üleneceƒüini yapƒ±landƒ±rdƒ±ƒüƒ±mƒ±z sƒ±nƒ±ftƒ±r.public void ConfigureServices(IServiceCollection services){ services.AddControllers(); var appSettingSection = Configuration.GetSection(\"AppSettings\"); services.Configure&lt;AppSettings&gt;(appSettingSection); var appSettings = appSettingSection.Get&lt;AppSettings&gt;(); var key = Encoding.ASCII.GetBytes(appSettings.Secret); services.AddAuthentication(x =&gt; { x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme; x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme; }).AddJwtBearer(x =&gt; { x.RequireHttpsMetadata = false; x.SaveToken = true; x.TokenValidationParameters = new TokenValidationParameters() { ValidateIssuerSigningKey = true, IssuerSigningKey = new SymmetricSecurityKey(key), ValidateIssuer = false, ValidateAudience = false }; }); services.AddScoped&lt;IUserService, UserService&gt;(); services.AddScoped&lt;IItemService, ItemService&gt;();}public void Configure(IApplicationBuilder app, IWebHostEnvironment env){ app.UseAuthentication(); app.UseAuthorization();}ASP.NET Core Web API ‚Äì UserServiceUserService sƒ±nƒ±fƒ±nda IUserService interface dosyasƒ±ndan implement ettikten sonra statik olarak bir User listesi dolduruyorum. Bu User verisi ile Authenticate metodunda UserName ve Password kontrol√º ile user nesnesi geriye d√∂nd√ºr√ºyorum.namespace WebApi.Services{ public interface IUserService { User Authenticate(string userName, string password); List&lt;User&gt; GetAll(); } public class UserService : IUserService { readonly AppSettings _appSettings; private List&lt;User&gt; _users = new List&lt;User&gt; {new User {Id = 1, FirstName = \"Murat\", LastName = \"Suzen\", UserName = \"murat\", Password = \"1234\"}}; public UserService(IOptions&lt;AppSettings&gt; appSettings) { _appSettings = appSettings.Value; } public User Authenticate(string userName, string password) { var user = _users.FirstOrDefault(x =&gt; x.UserName == userName &amp;&amp; x.Password == password); if (user == null) return null; var tokenHandler = new JwtSecurityTokenHandler(); var key = Encoding.UTF8.GetBytes(_appSettings.Secret); var tokenDescriptor = new SecurityTokenDescriptor { Subject = new ClaimsIdentity(new Claim[] {new Claim(ClaimTypes.Name, user.Id.ToString())}), Expires = DateTime.UtcNow.AddDays(7), SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature) }; var token = tokenHandler.CreateToken(tokenDescriptor); user.Token = tokenHandler.WriteToken(token); user.Password = null; return user; } public List&lt;User&gt; GetAll() { return _users; } }}ASP.NET Core Web API ‚Äì ItemServiceItemService sƒ±nƒ±fƒ±nƒ±d IItemService interface dosyasƒ±ndan implemente ediyorum. Bu sƒ±nƒ±fta √ºr√ºnler listesini geri d√∂nd√ºreceƒüimiz metodu yazalƒ±m.namespace WebApi.Services{ public interface IItemService { List&lt;Item&gt; GetAll(); } public class ItemService : IItemService { private List&lt;Item&gt; _items = new List&lt;Item&gt; { new Item {Id = 1, Code = \"0001\", Name = \"Notebook\", Amount = 22, Price = 6300}, new Item {Id = 2, Code = \"0002\", Name = \"Keyboard\", Amount = 15, Price = 230}, new Item {Id = 3, Code = \"0003\", Name = \"Mouse\", Amount = 9, Price = 150}, }; public List&lt;Item&gt; GetAll() { return _items.ToList(); } }}##ASP.NET Core Web API ‚Äì ItemControllerItemController sƒ±nƒ±fƒ± [Authorize] attribute ile yetkilendirildiƒüi i√ßin UserName ve Password g√∂nderilerek i≈ülem yapƒ±labilir.namespace WebApi.Controllers{ [Authorize] [Route(\"[controller]\")] [ApiController] public class ItemController : ControllerBase { private IItemService _itemService; public ItemController(IItemService itemService) { _itemService = itemService; } [HttpGet] public ActionResult GetAll() { var users = _itemService.GetAll(); return Ok(users); } }}ASP.NET Core Web API ‚Äì UserControllerNot: T√ºm controller sƒ±nƒ±fƒ±nƒ±n [Authorize] attribute ile yetkilendirilmesi yanlƒ±zca [AllowAnonymous] attribute i√ßeren metotlarƒ± kapsamamaktadƒ±r. √á√ºnk√º [AllowAnonymous] attribute i√ßeren metotlar [Authorize] attribute yapƒ±sƒ±nƒ± ezmektedir.[Authorize][Route(\"[controller]\")][ApiController]public class UserController : ControllerBase{ private IUserService _userService; public UserController(IUserService userService) { _userService = userService; } [AllowAnonymous] [HttpPost(\"auth\")] public ActionResult Authenticate([FromBody] AuthModel authModel) { var user = _userService.Authenticate(authModel.UserName, authModel.Password); if (user == null) return BadRequest(new {message = \"Kullanƒ±cƒ± adƒ± yada ≈üifre yanlƒ±≈ü\"}); return Ok(user); } [HttpGet] public ActionResult GetAll() { var users = _userService.GetAll(); return Ok(users); }}ASP.NET Core Web API ‚Äì AppSettingspublic class AppSettings{ public string Secret { get; set; }}ASP.NET Core Web API ‚Äì appsettings.json \"AppSettings\": { \"Secret\": \"BU ALANA IMZA ICIN BIR ANAHTAR BILGISI GIRMEMIZ GEREKMEKTEDIR\"}Postman ile Kullanƒ±mƒ±Proje i√ßeren dosyalarƒ± indirdiƒüimizde aspnetcore-3-1-web-api-jwt\\WebApi klas√∂r√ºndeki WebApi.sln projesini a√ßƒ±p √ßalƒ±≈ütƒ±rƒ±yoruz.JWT Project FolderPostman ile √∂ncelikle user servisine username ve password g√∂nderip bir post i≈ülemi yapƒ±yoruz. Bu ≈üekilde token bilgisini elde etmi≈ü oluyoruz.JWT Post AuthDaha sonra elde ettiƒüimiz token bilgisi ile user servisine get i≈ülemi yapƒ±yoruz ve user listelerine eri≈üebiliyoruz.JWT Get User" }, { "title": "Web API ve Angular 8 ile Blob Veri Tipi Kullanƒ±mƒ±", "url": "/posts/web-api-ve-angular-ile-blob-kullanimi/", "categories": "ANGULAR", "tags": "asp.net core, web api, angular, blob", "date": "2021-01-10 19:33:00 +0300", "snippet": "Yaptƒ±ƒüƒ±m bir Angular projesinde Web API ile FTP server dan dosya indirme i≈ülem yapmam gerekiyordu. Haliyle blob veri tipleriyle ilgilenmem gerekti. FTP den dosyalarƒ± indirme i≈ülemi √ßok zamanƒ±mƒ± alm...", "content": "Yaptƒ±ƒüƒ±m bir Angular projesinde Web API ile FTP server dan dosya indirme i≈ülem yapmam gerekiyordu. Haliyle blob veri tipleriyle ilgilenmem gerekti. FTP den dosyalarƒ± indirme i≈ülemi √ßok zamanƒ±mƒ± almadƒ± fakat √∂ng√∂remediƒüim bir MIME type tanƒ±mƒ± epey uƒüra≈ütƒ±rdƒ±. T√ºm tarayƒ±cƒ±lardan indirme i≈ülemini yapabilirken CriOS (IOS Chrome) tarayƒ±cƒ±sƒ±nda indirme i≈ülemi ba≈üarƒ±sƒ±z oluyordu. Web API den her dosya formatƒ±na application/octet-stream MediaTypeHeaderValue tipini g√∂nderiyordum. CriOS hari√ß t√ºm tarayƒ±cƒ±lar g√∂nderilen byte[] tipini olmasƒ± gereken dosya formatƒ±na √ßevirip indiriyordu. √á√∂zmem gereken CriOS tarayƒ±cƒ±sƒ± olduƒüu i√ßin bu konuya y√∂neldim. Ara≈ütƒ±rmalar sonucunda Apple‚Äôƒ±n mobil Chrome tarayƒ±cƒ±sƒ±nda bir blob tipinde bir dosya indirme i≈ülemini yeni sekmede a√ßƒ±larak yapƒ±lmasƒ± gerektiƒüini √∂ƒürendim.Bu arada Angular i√ßin Angular File Saver paketini kullanƒ±yordum. MediaTypeHeaderValue tipini application/octet-stream olarak sabit g√∂nderdiƒüimden Angular File Saver CriOS tarayƒ±cƒ±sƒ±nda hata veriyordu. Bende sorunun paket ile alakalƒ± olabileceƒüi d√º≈ü√ºncesiyle dosya indirme i≈ülemini bir a elementi olu≈üturup click eventi ile indirme i≈ülemi yapƒ±yorum. Siz MediaTypeHeaderValue tipini g√ºncelleyerek Angular File Saver kullanabilirsiniz.this.httpClient .get(url, { headers: headers, responseType: \"blob\" }) .subscribe((data) =&gt; { const file = new Blob([data], { type: data.type }); const fileURL = (window.URL || window[\"webkitURL\"]).createObjectURL(file); const downloadLink = document.createElement(\"a\"); downloadLink.href = fileURL; downloadLink.download = fileName; downloadLink.target = \"_blank\"; document.body.appendChild(downloadLink); downloadLink.click(); document.body.removeChild(downloadLink); });Wep API tararfƒ±ndaki kod bloƒüunda MIME tipini indirilecek dosya formatƒ±na g√∂re g√∂nderdiƒüimde sorun √ß√∂z√ºld√º.[HttpGet][Route(\"FileDownload/{id:int}\")] public HttpResponseMessage FileDownload(int id) { var ftpUser = _ftpSettingsService.Get().FirstOrDefault(); var fileInfo = _ftpFilesService.GetById(id); string fileAddr = $ \"{ftpUser.Address}{fileInfo.FilePath}\"; WebClient request = new WebClient(); request.Credentials = new NetworkCredential(ftpUser.UserName, ftpUser.Password); byte[] newFileData = request.DownloadData(fileAddr); MemoryStream memoryStream = new MemoryStream(newFileData); string newFileName = fileInfo.NewFileName; string content = MimeExtensions.GetMimeType(fileInfo.FileType); HttpResponseMessage httpResponseMessage = Request.CreateResponse(HttpStatusCode.OK); httpResponseMessage.Content = new StreamContent(memoryStream); httpResponseMessage.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue(\"attachment\"); httpResponseMessage.Content.Headers.ContentDisposition.FileName = newFileName; httpResponseMessage.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(content); return httpResponseMessage;}" }, { "title": "Asp.NET Core Web API - Hangfire Kullanƒ±mƒ±", "url": "/posts/hangfire-nedir-nasil-kullanilir/", "categories": "ASP.NET CORE", "tags": "asp.net core, web api, hangfire", "date": "2020-10-10 19:33:00 +0300", "snippet": "Hangfire Nedir?Hangfire, uygulamalarƒ±mƒ±zda arka planda √ßalƒ±≈ütƒ±rmak istediƒüimiz i≈üleri ( background jobs) y√∂netebildiƒüimiz a√ßƒ±k kaynaklƒ± bir k√ºt√ºphanedir. Peki neden b√∂yle bir k√ºt√ºphaneye gereksinim...", "content": "Hangfire Nedir?Hangfire, uygulamalarƒ±mƒ±zda arka planda √ßalƒ±≈ütƒ±rmak istediƒüimiz i≈üleri ( background jobs) y√∂netebildiƒüimiz a√ßƒ±k kaynaklƒ± bir k√ºt√ºphanedir. Peki neden b√∂yle bir k√ºt√ºphaneye gereksinim duyuyoruz. Bunu bir √∂rnek ile a√ßƒ±klayayƒ±m. √ñrnek olarak bir tedarik firmasƒ±nda √ºr√ºnlerinizin fiyatlarƒ±nƒ±n yeni ayda deƒüi≈ütiƒüini d√º≈ü√ºnelim. Bu deƒüi≈üikliƒüi sizden √ºr√ºn tedarik eden y√ºzlerce m√º≈üterinize mail g√∂ndererek bildirmeniz gerekiyor. Mail g√∂nderim ekranƒ±nda t√ºm m√º≈üterilerinizi se√ßip mail g√∂ndermeyi ba≈ülattƒ±ƒüƒ±nƒ±zda bu y√ºzlerce mail g√∂nderim i≈üleminin bitmesini beklemek zorunda kalacaksƒ±nƒ±z. ƒ∞≈üte bu ve buna benzer bir i≈ü par√ßacƒ±ƒüƒ±nƒ±n tek bir thread √ºzerinde yapmak yerine Hangfire ile farklƒ± threat larda ve istediƒüimiz zamanlarda g√∂nderimini saƒülayabiliriz.ASP.NET Core uygulamalarƒ±nƒ± yerel olarak geli≈ütirmek ve √ßalƒ±≈ütƒ±rmak i√ßin a≈üaƒüƒ±dakileri indirip y√ºkleyin: Visual Studio Code adresinden Windows, Mac ve Linux i≈ületim sistemlerinde √ßalƒ±≈üabilen Microsoft tarafƒ±ndan geli≈ütirilip a√ßƒ±k kaynak olarak sunulan kod edit√∂r√ºn√º indiriniz. C# extension adresinden yada VS Code i√ßersinideki eklentiler b√∂l√ºm√ºnden .NET Core uygulamalarƒ± geli≈ütirirken kolaylƒ±klar getiren eklentiyi indiriniz. .NET Core SDK adresinden .NET Core 3.1 runtime SDK dosyasƒ±nƒ± indirip kurmalƒ±sƒ±nƒ±z.Projeye Hangfire Paketlerinin Eklenmesi&lt;ItemGroup&gt; &lt;PackageReference Include=\"Microsoft.AspNetCore.App\" /&gt; &lt;PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.2.0\" PrivateAssets=\"All\" /&gt; &lt;PackageReference Include=\"Hangfire.Core\" Version=\"1.7.*\"&gt;&lt;/PackageReference&gt; &lt;PackageReference Include=\"Hangfire.SqlServer\" Version=\"1.7.*\"&gt;&lt;/PackageReference&gt; &lt;PackageReference Include=\"Hangfire.AspNetCore\" Version=\"1.7.*\"&gt;&lt;/PackageReference&gt;&lt;/ItemGroup&gt;Yazƒ±nƒ±n detayƒ±na girmeden √∂nce .Net Core ile ilgili en son yazdƒ±ƒüƒ±m ASP.NET Core 3.1 Web API ‚Äì Swagger Kullanƒ±mƒ± yazƒ±mƒ± okuyabilirsiniz. Hangfire k√ºt√ºphanesini nuget paket y√∂netiminden a≈üaƒüƒ±daki gibi y√ºkleyebiliriz.dotnet add package Hangfire.AspNetCore --version 1.7.12Hangfire i√ßin Veritabanƒ± Olu≈üturmaHangfire yapƒ±sƒ± veri ve ayarlarƒ± saklamak i√ßin Redis yada SQL veritabanƒ±na ihtiya√ß duymaktadƒ±r. Bu makalede SQL veritabanƒ± olu≈üturarak Hangfire kullanƒ±mƒ±na deƒüineceƒüim. √ñncelikle Hangfire i√ßin bir veritabanƒ± olu≈üturalƒ±m.CREATE DATABASE [Hangfire]GOHangfire Veritabanƒ± Yapƒ±landƒ±rƒ±lmasƒ±Olu≈üturduƒüumuz veritabanƒ± i√ßin bir baƒülantƒ± bilgisi eklememiz gerekmektedir. Bu baƒülantƒ± bilgisini appsettings.json i√ßerisinde a≈üaƒüƒ±daki ≈üekilde ekliyorum.\"ConnectionStrings\": { \"HangfireConnection\": \"Server=.\\\\sqlexpress;Database=Hangfire;Integrated Security=SSPI;\" }Hangfire uyarƒ± mesajlarƒ±nƒ± farklƒ± bir t√ºrde g√∂stermek i√ßin a≈üaƒüƒ±daki ≈üekilde Logging alanƒ±nƒ± d√ºzenleyebilirsiniz.\"Logging\": { \"LogLevel\": { \"Default\": \"Warning\", \"Hangfire\": \"Information\" }}Hangfire Yapƒ±landƒ±rƒ±lmasƒ±Projemizde Hangfire yapƒ±landƒ±rma kodlarƒ±nƒ± yazacaƒüƒ±mƒ±z Startup.cs dosyasƒ±nda a≈üaƒüƒ±daki ayarlamalarƒ± yapmamƒ±z gerekmektedir.public void ConfigureServices(IServiceCollection services) { services.AddHangfire(hf =&gt; hf.UseSqlServerStorage(Configuration.GetConnectionString(\"HangfireConnection\"))); services.AddHangfireServer(); }Hangfire dashboard kullanƒ±mƒ± i√ßin ApplicationBuilder ayarlarƒ±nda UseHangfireDashboard() tanƒ±mƒ±nƒ± yapmalƒ±yƒ±z.public void Configure(IApplicationBuilder app, IHostingEnvironment env){ app.UseHangfireDashboard();}Yapƒ±landƒ±rma sonrasƒ±nda projemizi √ßalƒ±≈ütƒ±rdƒ±ƒüƒ±mƒ±zda http://localhost:57992/hangfire/ yolundan Hangfire Dashboard sayfasƒ±na eri≈üebiliriz.Hangfire Background Job Tipleri Fire and forget jobs : Yapƒ±lacak i≈üin belirli bir zamana programlanmadan hemen yapƒ±lmasƒ± ve tekrar etmeden tek bir defa √ßalƒ±≈ütƒ±rƒ±lmasƒ±nƒ± saƒülayan background job tipidir.BackgroundJob.Enqueue(() =&gt; Console.WriteLine(\"Hello, world!\")); Delayed jobs : Yapƒ±lacak i≈üin belirli bir zaman bitiminde ve bir defa √ßalƒ±≈ümasƒ±nƒ± saƒülayan background job tipidir.var jobId = BackgroundJob.Schedule(() =&gt; Console.WriteLine(\"Delayed!\"), TimeSpan.FromDays(7)); Recurring jobs : Yapƒ±lacak i≈üin bir zaman programƒ±na uygun olarak bir √ßok kez yapƒ±lmasƒ±nƒ± saƒülayan background job tipidir. Bu zamanlama i≈ülemlerini CRON s√ºrecinde (saatlik,g√ºnl√ºk,haftalƒ±k,aylƒ±k, yƒ±llƒ±k yada CRON expression vb.) tanƒ±mlayabiliriz.RecurringJob.AddOrUpdate(() =&gt; Console.WriteLine(\"Recurring!\"), Cron.Daily); Continuations job: Daha √∂nceden tanƒ±mlanan bir i≈üin tamamlanmasƒ±ndan sonra √ßalƒ±≈üan background job tipidir. √ñrnekte g√∂r√ºld√ºƒü√º √ºzere jobId tamanlanmasƒ± gereken √∂ncelikli i≈ü tanƒ±mƒ±dƒ±r. Bu ana i≈ü tamamlandƒ±ktan sonra Console.WriteLine(‚ÄúContinuation!‚Äù) i≈üi yerine getirilecektir.BackgroundJob.ContinueJobWith(jobId,() =&gt; Console.WriteLine(\"Continuation!\"));Hangfire k√ºt√ºphanesinin √ºcretli b√∂l√ºm√ºnde bulunan Batch (PRO) ve Batch Continuations (PRO) job t√ºrlerini inceleyelim. Batch (PRO) : Tanƒ±mlanan birden fazla i≈üi tek bir grup ≈üeklinde √ßalƒ±≈ütƒ±ran background job t√ºr√ºd√ºr.var batchId = BatchJob.StartNew(x =&gt; { x.Enqueue(() =&gt; Console.WriteLine(\"Job 1\")); x.Enqueue(() =&gt; Console.WriteLine(\"Job 2\")); }); Batch Continuations (PRO) : Grup halinde tanƒ±mlanan Batch i≈ü tanƒ±mlarƒ±nƒ±n tamamlanmasƒ±ndan sonra √ßalƒ±≈üacak olan background job t√ºr√ºd√ºr.BatchJob.ContinueBatchWith(batchId, x =&gt;{x.Enqueue(() =&gt; Console.WriteLine(\"Last Job\"));});Detaylƒ± d√∂k√ºman bilgisine buradan ula≈üabilirsiniz." }, { "title": "Dependency Injection ‚Äî Ninject Kullanƒ±mƒ±", "url": "/posts/dependency-injection-ninject-kullanimi/", "categories": "Dependency Injection", "tags": "dependency injection, ninject", "date": "2020-06-04 19:33:00 +0300", "snippet": "Merhabalar, yaygƒ±n olarak kullanƒ±lan k√ºt√ºphanelerden bir tanesi Ninject‚Äôtir. ƒ∞ncelemek i√ßin bir √∂nceki Dependency Injection √∂rneƒüinin aynƒ±sƒ± √ºzerinden gideceƒüiz. Yaptƒ±ƒüƒ±mƒ±z √∂rnekle √ßok benzer olduƒü...", "content": "Merhabalar, yaygƒ±n olarak kullanƒ±lan k√ºt√ºphanelerden bir tanesi Ninject‚Äôtir. ƒ∞ncelemek i√ßin bir √∂nceki Dependency Injection √∂rneƒüinin aynƒ±sƒ± √ºzerinden gideceƒüiz. Yaptƒ±ƒüƒ±mƒ±z √∂rnekle √ßok benzer olduƒüunu s√∂yleyebilirim. Hatta standart Dependency Injection kullanƒ±mƒ±na g√∂re birazdaha fazla kod yazdƒ±ƒüƒ±mƒ±zƒ± g√∂rebilirsiniz. Fakat kurumsal projelerde yaygƒ±n kullanƒ±mƒ±nƒ±n arkasƒ±nda yatan sebep sadece standart kullanƒ±mlarƒ±ndan ziyade, projelerimizde birden fazla loosely coupled yani gev≈üek baƒülƒ± yapƒ±larƒ± kullanma gerekinimindeki karma≈üƒ±klƒ±ƒüƒ± en az seviyieye indirmektedir. Birden fazla gev≈üek baƒülƒ± yapƒ± durumuna √∂rneƒüimizde deyineceƒüiz. √ñncelikle Nuget paketinden Install-Package Ninject ≈üeklinde Ninject paketini projemize indirip kuruyoruz. Daha sonrasƒ±nda interface ve implemente yapƒ±lacak class larƒ±mƒ±zƒ± olu≈üturuyoruz.interface ILogger{ void WriteLog(string message);}class TextLogger : ILogger{ public void WriteLog(string message) { Console.WriteLine(\"TextLogger : {0}\", message); }}class XmlLogger : ILogger{ public void WriteLog(string message) { Console.WriteLine(\"XmlLogger : {0}\", message); }}class DatabaseLogger : ILogger{ public void WriteLog(string message) { Console.WriteLine(\"DatabaseLogger : {0}\", message); }}Bu a≈üamaya kadar bir √∂nceki √∂rneƒüimizin aynƒ±sƒ±nƒ± yapƒ±yoruz. Daha sonra yine bir √∂nceki √∂rneƒüimizdeki gibi sƒ±nƒ±flarƒ± y√∂netebilmemiz i√ßin LogManager yapƒ±sƒ±nƒ± olu≈üturuyoruz.class LogManager { readonly ILogger logger; [Inject] public LogManager(ILogger logger) { this.logger = logger; } public void Handle(string message) { this.logger.WriteLog(message); } }Bu sƒ±nƒ±fƒ±mƒ±zdaki tek fark [Inject] tanƒ±mƒ±mlasƒ±dƒ±r. LogManager yapƒ±sƒ±nƒ± kullanƒ±rken hangi sƒ±nƒ±fƒ± √ßaƒüƒ±racaƒüƒ±mƒ±zƒ± Ninject.Modules.NinjectModule sƒ±nƒ±fƒ±nƒ±ndan ayarlayabilmekteyiz. Bu mod√ºl sƒ±nƒ±fƒ±nƒ±n en g√ºzel yanƒ± daha sonra ihtiyacƒ±mƒ±z olabilecek birden fazla gev≈üek baƒülƒ± yapƒ±larƒ±mƒ±zƒ±n Bind i≈ülemlerini yapabilmemizdir.class Bindings : NinjectModule{ public override void Load() { Bind&lt;ILogger&gt;().To&lt;DatabaseLogger&gt;(); }}Bu tanƒ±mlamanƒ±n anlamƒ± ILogger tipindeki sƒ±nƒ±f istendiƒüinde otomatik olarak DatabaseLogger sƒ±nƒ±fƒ±nƒ± d√∂nd√ºrecektir. Daha sonra Main sƒ±nƒ±fƒ±mƒ±zƒ±n i√ßerisinde ilgili kodlarƒ± a≈üaƒüƒ±daki gibi olu≈üturuyoruz.class Program{ static void Main(string[] args) { IKernel kernel = new StandardKernel(new Bindings()); LogManager logManager = kernel.Get&lt;LogManager&gt;(); logManager.Handle(\"ƒ∞≈ülem Tamamlandƒ±.\"); Console.ReadLine(); }}Bu kod par√ßasƒ±ndaki dikkat edilmesi gereken nokta new StandartKernel i√ßerisinde load metoduna Bindings sƒ±nƒ±fƒ±mƒ±zƒ± g√∂ndermektir. Bu ≈üekilde yapƒ±landƒ±rma sƒ±nƒ±fƒ±nƒ± Ninject‚Äôe set etmi≈ü oluyoruz. Birden fazla ‚Äúgev≈üek baƒülƒ±‚Äù bir yapƒ±yƒ± a≈üaƒüƒ±daki gibi yine NinjectModules yapsƒ±sƒ±ndaki Bindings sƒ±nƒ±fƒ±mƒ±z ile yapƒ±landƒ±rabiliriz.interface IConnections { void GetConnectionString(); } class MsSql : IConnections { public void GetConnectionString() { Console.WriteLine(\"Connection Type: MsSql\"); } } class EntityFramework : IConnections { public void GetConnectionString() { Console.WriteLine(\"Connection Type: EntityFramework\"); } } class MySql : IConnections { public void GetConnectionString() { Console.WriteLine(\"Connection Type: MySql\"); } } class ConnectionManager { readonly IConnections connections; [Inject] public ConnectionManager(IConnections connections) { this.connections = connections; } public void GetConnectionStr() { this.connections.GetConnectionString(); } } Bindings sƒ±nƒ±fƒ±mƒ±z i√ßerisine aynƒ± ≈üekilde diƒüer Dependency Injection yapƒ±sƒ±nƒ±n tanƒ±mƒ±nƒ± yapabiliriz.class Bindings : NinjectModule{ public override void Load() { Bind&lt;ILogger&gt;().To&lt;DatabaseLogger&gt;(); Bind&lt;IConnections&gt;().To&lt;EntityFramework&gt;(); }}Main sƒ±nƒ±fƒ±nƒ±n i√ßerisinde aynƒ± ≈üekilde yeni eklediƒüimiz IConnection yapƒ±mƒ±zƒ± i≈üleme alabiliriz.class Program{ static void Main(string[] args) { IKernel kernel = new StandardKernel(new Bindings()); LogManager logManager = kernel.Get&lt;LogManager&gt;(); logManager.Handle(\"ƒ∞≈ülem Tamamlandƒ±.\"); ConnectionManager connectionManager = kernel.Get&lt;ConnectionManager&gt;(); connectionManager.GetConnectionStr(); Console.ReadLine(); }}Bir sonraki makalede g√∂r√º≈ümek √ºzere." }, { "title": "Logo Objects Entegrasyon Ayarlarƒ±", "url": "/posts/logo-objects-entegrasyon-ayarlari/", "categories": "LOGO", "tags": "logo objects", "date": "2020-03-14 19:33:00 +0300", "snippet": "Merhabalar bu makalede Logo Yazƒ±lƒ±m firmasƒ±nƒ±n ERP (Tiger vb.) √ºr√ºnlerine dƒ±≈üarƒ±dan veri g√∂nderip / almabilmek i√ßin geli≈ütiridiƒüi, entegrasyon aracƒ±nƒ±n (UnityObject, Logo.dll, Lobject.dll) nasƒ±l ku...", "content": "Merhabalar bu makalede Logo Yazƒ±lƒ±m firmasƒ±nƒ±n ERP (Tiger vb.) √ºr√ºnlerine dƒ±≈üarƒ±dan veri g√∂nderip / almabilmek i√ßin geli≈ütiridiƒüi, entegrasyon aracƒ±nƒ±n (UnityObject, Logo.dll, Lobject.dll) nasƒ±l kullanƒ±lmasƒ± gerektiƒüi ile ilgili hem kendime hemde sizlere notlar yazmak istedim. Normal ≈üartlarda bu √ºr√ºn ile ilgili geli≈ütirmelerin √ß√∂z√ºm ortaƒüƒ± serfitikasƒ±na sahip yetkin ki≈üilerce yapƒ±lmasƒ± gerekmektedir. ≈ûimdi LOBJECTS.exe uygulamasƒ±nƒ±n register ve web kullanƒ±mƒ± i√ßin IIS yetkilendirmesini inceleyelim.LOBJECTS.exe Register Nasƒ±l Yapƒ±lƒ±r?Logo √ºr√ºn√ºn√ºn kurulu olduƒüu dizinde REGISTER.bat dosyasƒ± ile ERP uygulamasƒ±nƒ±n kullanƒ±mƒ± i√ßin gerekli olan dll dosyalarƒ±nƒ± hazƒ±r DOS komutlarƒ± ile sisteme register yapƒ±lmasƒ±nƒ± saƒülƒ±yoruz. Dosyayƒ± saƒü tu≈ü ‚Äì Y√∂netici olarak √ßalƒ±≈ütƒ±rƒ±p t√ºm register i≈ülemlerinin yapƒ±lmasƒ±nƒ± bekliyoruz. Eƒüer manual olarak register i≈ülemi yapmak isterseniz a≈üaƒüƒ±daki y√∂ntemleri deneyebilirsiniz. ba≈ülat-&gt; √ßalƒ±≈ütƒ±r -&gt; cmd yazƒ±p konsole ekranƒ±na ge√ßiyoruz REGISTER-DLL : regsvr32 erpPath\\LOBJECTS.dll UNREGISTER-DLL : regsvr32 -u erpPath\\LOBJECTS.dll REGISTER-EXE : erpPath\\LOBJECTS.exe -REGSERVER UNREGISTER-EXE : erpPath\\LOBJECTS.exe -UNREGSERVER Not: Eƒüer ERP √ºr√ºn Active Directory √ºzerinde bir sunucuda ise resgister yapmak istediƒüiniz makineyi ve kullanƒ±cƒ±yƒ± Active Directory yapƒ±sƒ±na eklemeniz gerekmektedir. Y√∂netici izinleri olmadan yada Active Directory yapƒ±sƒ±nda olmayan bir kullanƒ±cƒ±/makine ile register i≈ülemleri COM hatalarƒ± almanƒ±za sebep olacaktƒ±r.REGISTER.bat dosyasƒ±ndaki t√ºm register i≈ülemlerinin ba≈üarƒ±yla tamamlanmasƒ± sonrasƒ±nda LOBJECTS.exe kullanƒ±ma uygun hale gelecektir.Uygulamalarda LOBJECTS √úr√ºn√º Referance Eklemesi Nasƒ±l Yapƒ±lƒ±r?Projenize Lobjects √ºr√ºn√ºn√º referans olarak eklemek istediƒüinizde hemen hemen bir√ßok ki≈üinin yaptƒ±ƒüƒ± bir hatayƒ± payla≈üayƒ±m. Projenin referance ekleme b√∂l√ºm√ºne girip Browse √ºzerinden Logo √ºr√ºn√ºn√ºn bulunduƒüu dosya yolundaki LOBJECTS.dll dosyasƒ±nƒ± referance olarak ekleniyor. Bu Logo tarafƒ±ndan asla √∂nerilmeyen bir y√∂ntemdir. Biz zaten LOBJECTS.exe dosyasƒ±nƒ± REGISTER.bat ile sisteme register yaptƒ±k. Bu referans bilgisine artƒ±k COM kaynaklarƒ±ndan eri≈üebilmekteyiz.COM kayƒ±tlarƒ±Windows Service Uygulamalarƒ±nda LOBJECTS √úr√ºn√º Yetkilendirmesi Nasƒ±l Yapƒ±lƒ±r?Windows Service uygulamlarƒ±mƒ±zda ERP entegrasyon aracƒ±nƒ± kullanmak istersek servisi sistemimize kurduƒüumuzda belirli yetkilendirme ayarlarƒ± yapmamƒ±z gerekmektedir. Servisin ayarlarƒ±na girdiƒüimizde LOG On sekmesinde servisin ba≈ülatma kullanƒ±cƒ±sƒ±nƒ±, sunucu eƒüer bir Active Directory yapƒ±sƒ±nda deƒüilse sunucunun Administrator hesabƒ± ile, eƒüer bir Active Directory yapƒ±sƒ±nda ise Active Directory Adminisitrator hesabƒ± ile √ßalƒ±≈ümasƒ±nƒ± saƒülamalƒ±yƒ±z.Web Projelerinde Kullanabilmek i√ßin IIS Yetkilendirmesi Nasƒ±l Yapƒ±lƒ±r?Lobject.exe √ºr√ºn√ºn√º web projelerinde kullanabilmek IIS √ºzerinde ve DOM portlarƒ±nda birka√ß yetkilendirme ayarƒ± yapmamƒ±z gerekmektedir. √ñncelikle web projemizi IIS sistemine y√ºkledikten sonra Application-Pool ayarlarƒ±nƒ± yapalƒ±m. Not:Logo Web uyuglamalarƒ±nda LOBJETS.dll dosyasƒ± yerine LOBJECTS.exe dosyasƒ±nƒ±n kullanƒ±lmasƒ± gerektiƒüini s√∂ylemektedir.Resimde g√∂r√ºld√ºƒü√º gibi ilk olarak Enable 32-Bit Applications deƒüerini True olarak deƒüi≈ütiriyorum. Daha sonra Identity b√∂l√ºm√ºnde NetworkService kullanƒ±cƒ±sƒ± ile yetkilendiriyorum. Ayrƒ±ca .Net Framework Version deƒüerini v4.0 olarak deƒüi≈ütiriniz. IIS √ºzerindeki ayarlarƒ±n yapƒ±lmasƒ±ndan sonra ≈üimdi DOM anahtarlarƒ±nda nasƒ±l bir yetkilendirme i≈ülemi yapacaƒüƒ±mza bakalƒ±m. √ñncelikle run/√ßalƒ±≈ütƒ±r yardƒ±mƒ±yla comexp.msc /32 Component Servicesleri a√ßalƒ±m. Burada Component Services =&gt; Computers =&gt; My Computer =&gt; DCOM Config yolunu izleyerek DCOM uygulama anahtarlarƒ±na eri≈üiyorum. Register yaptƒ±ƒüƒ±m LOBJECTS.exe anahtarƒ±nƒ± listeden buluyorum ve Properties b√∂l√ºm√ºn√º a√ßƒ±yorum.COM kayƒ±tlarƒ±General b√∂l√ºm√ºnde Authentication Level alaƒ±nƒ± None olarak deƒüi≈ütiriyorum . Daha sonra Identity sekmesini a√ßƒ±yorum,Identity sekmesinde regsiter yaptƒ±ƒüƒ±mƒ±z exe‚Äônin hangi kullanƒ±cƒ± ile √ßalƒ±≈ütƒ±rƒ±lacaƒüƒ±nƒ± ayarlamamƒ±z gerekiyor. This User se√ßeneƒüinden server Administrator kullanƒ±cƒ±sƒ±nƒ± yada server Active Directory altƒ±nda ise Active Directory Administrator hesabƒ±nƒ± girip onaylƒ±yorum.Bu ≈üekilde LOBJECT.exe √ºr√ºn√ºn√º nasƒ±l register ve yetkilendirme yapabileceƒüimiz konusundaki makalemizi tamamlamƒ±≈ü oluyoruz. Aklƒ±nƒ±za takƒ±lan sorular yada kar≈üƒ±la≈ütƒ±ƒüƒ±nƒ±z problemleri yorum olarak yada ileti≈üim sayfasƒ±ndan g√∂nderebilirsiniz. Bir sonraki makalede g√∂r√º≈ümek √ºzere." } ]
